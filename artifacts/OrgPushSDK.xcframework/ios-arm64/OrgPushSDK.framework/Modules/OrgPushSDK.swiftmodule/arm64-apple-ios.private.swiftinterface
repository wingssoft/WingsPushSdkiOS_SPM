// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name OrgPushSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Combine
import CommonCrypto/*.CC_LONG*/
import CommonCrypto/*.CC_MD5*/
import CommonCrypto/*.CC_MD5_DIGEST_LENGTH*/
import Compression
import CoreData
import CoreFoundation
import CoreGraphics
import Darwin
import Dispatch
import Foundation
import ObjectiveC
@_exported import OrgPushSDK
import Security
import Swift
import SystemConfiguration
import UIKit
import UserNotifications
import _Concurrency
import _StringProcessing
import os.log
import os
import Darwin.C.stdio
import Darwin.C.stdlib
@objc public protocol ExtraContentProtocol {
  @objc var mimeType: Swift.String? { get }
  @objc var value: Swift.String? { get }
  @objc var messageId: Swift.String? { get }
}
@objc public protocol MessageProtocol {
  @objc var id: Swift.String? { get }
  @objc var title: Swift.String? { get }
  @objc var subtitle: Swift.String? { get }
  @objc var body: Swift.String? { get }
  @objc var messageDate: Foundation.Date? { get }
  @objc var messageStringDate: Swift.String? { get }
  @objc var contentAvailable: Swift.Bool { get }
  @objc var customData: [Swift.String : Swift.String]? { get }
  @objc var statusName: Swift.String? { get set }
  @objc var statusDate: Foundation.Date? { get }
  @objc var channelName: Swift.String? { get set }
  @objc var isSent: Swift.Bool { get set }
}
public protocol DatabaseCancellable {
  func cancel()
}
public class AnyDatabaseCancellable : OrgPushSDK.DatabaseCancellable {
  public init(cancel: @escaping () -> Swift.Void)
  convenience public init(_ cancellable: OrgPushSDK.DatabaseCancellable)
  @objc deinit
  public func cancel()
}
extension CoreFoundation.CGFloat : OrgPushSDK.DatabaseValueConvertible {
  public var databaseValue: OrgPushSDK.DatabaseValue {
    get
  }
  public static func fromDatabaseValue(_ dbValue: OrgPushSDK.DatabaseValue) -> CoreFoundation.CGFloat?
}
public protocol StorageMessageProtocol {
  var observer: OrgPushSDK.NSSQLiteDatabaseChangeDelegate? { get set }
  func messageById(messageId: Swift.String?) throws -> OrgPushSDK.Message?
  func saveMessage(_ message: OrgPushSDK.MessageProtocol) throws
  func saveMessage(_ message: OrgPushSDK.MessageProtocol, _ messageAttributes: OrgPushSDK.MessageAttributesProtocol) throws
  func saveMessages(_ messages: [OrgPushSDK.MessageProtocol], extraContents: [OrgPushSDK.ExtraContentProtocol]) throws
  func isMessageExists(id: Swift.String) -> Swift.Bool
  func getMessages() -> [OrgPushSDK.Message]
  func getMessages(byPredicate predicate: OrgPushSDK.SQLSpecificExpressible) -> [OrgPushSDK.Message]
  func readMessage(byId messageId: Swift.String) throws
  func getMessageStatusesUnsent() -> [OrgPushSDK.MessageStatus]
  func markMessageStatusAsSent(_ messageStatus: OrgPushSDK.MessageStatusExternalProtocol)
  func markMessageStatusAsUnsent(_ messageStatus: OrgPushSDK.MessageStatusExternalProtocol)
  func removeAllMessages() throws
  func removeMessage(id: Swift.String)
  func removeMessages(ids: [Swift.String])
  func removeMessages(predicate: OrgPushSDK.SQLSpecificExpressible)
  func erase() throws
  func extraContent(for messageId: Swift.String) -> OrgPushSDK.ExtraContent?
  func storeExtraContent(content: OrgPushSDK.ExtraContentProtocol) throws
}
public protocol __StorageMessageProtocol {
  func isMessageExist(_ id: Swift.String) -> Swift.Bool
  func getMessages() -> [OrgPushSDK.Message]
  func getMessage(byId id: Swift.String) -> OrgPushSDK.Message?
  func getMessage(byPredicate predicate: Foundation.NSPredicate) -> [OrgPushSDK.Message]
  func saveMessage(fromImpl impl: OrgPushSDK.MessageProtocol) throws
  func removeMessage(byId messageId: Swift.String) throws
  func removeMessages(byPredicate predicate: Foundation.NSPredicate) throws
  func removeAllMessages() throws
}
public let defaultReadChunkSize: Swift.UInt32
public let defaultWriteChunkSize: Swift.UInt32
public let defaultFilePermissions: Swift.UInt16
public let defaultDirectoryPermissions: Swift.UInt16
public enum CompressionMethod : Swift.UInt16 {
  case none
  case deflate
  public init?(rawValue: Swift.UInt16)
  public typealias RawValue = Swift.UInt16
  public var rawValue: Swift.UInt16 {
    get
  }
}
final public class Archive : Swift.Sequence {
  public enum ArchiveError : Swift.Error {
    case unreadableArchive
    case unwritableArchive
    case invalidEntryPath
    case invalidCompressionMethod
    case invalidStartOfCentralDirectoryOffset
    case missingEndOfCentralDirectoryRecord
    case cancelledOperation
    public static func == (a: OrgPushSDK.Archive.ArchiveError, b: OrgPushSDK.Archive.ArchiveError) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum AccessMode : Swift.UInt {
    case create
    case read
    case update
    public init?(rawValue: Swift.UInt)
    public typealias RawValue = Swift.UInt
    public var rawValue: Swift.UInt {
      get
    }
  }
  final public let url: Foundation.URL
  final public let accessMode: OrgPushSDK.Archive.AccessMode
  public init?(url: Foundation.URL, accessMode mode: OrgPushSDK.Archive.AccessMode, preferredEncoding: Swift.String.Encoding? = nil)
  public init?(data: Foundation.Data = Data(), accessMode mode: OrgPushSDK.Archive.AccessMode, preferredEncoding: Swift.String.Encoding? = nil)
  @objc deinit
  final public func makeIterator() -> Swift.AnyIterator<OrgPushSDK.Entry>
  final public subscript(path: Swift.String) -> OrgPushSDK.Entry? {
    get
  }
  public typealias Element = OrgPushSDK.Entry
  public typealias Iterator = Swift.AnyIterator<OrgPushSDK.Entry>
}
extension OrgPushSDK.Archive {
  final public func totalUnitCountForRemoving(_ entry: OrgPushSDK.Entry) -> Swift.Int64
  final public func totalUnitCountForReading(_ entry: OrgPushSDK.Entry) -> Swift.Int64
  final public func totalUnitCountForAddingItem(at url: Foundation.URL) -> Swift.Int64
}
@_hasMissingDesignatedInitializers final public class DatabaseSnapshot : OrgPushSDK.DatabaseReader {
  final public var configuration: OrgPushSDK.Configuration {
    get
  }
  @objc deinit
  final public func close() throws
}
extension OrgPushSDK.DatabaseSnapshot {
  final public func interrupt()
  final public func read<T>(_ block: (OrgPushSDK.Database) throws -> T) rethrows -> T
  final public func asyncRead(_ value: @escaping (Swift.Result<OrgPushSDK.Database, Swift.Error>) -> Swift.Void)
  final public func _weakAsyncRead(_ value: @escaping (Swift.Result<OrgPushSDK.Database, Swift.Error>?) -> Swift.Void)
  final public func unsafeRead<T>(_ value: (OrgPushSDK.Database) throws -> T) rethrows -> T
  final public func asyncUnsafeRead(_ value: @escaping (Swift.Result<OrgPushSDK.Database, Swift.Error>) -> Swift.Void)
  final public func unsafeReentrantRead<T>(_ value: (OrgPushSDK.Database) throws -> T) throws -> T
  final public func _add<Reducer>(observation: OrgPushSDK.ValueObservation<Reducer>, scheduling scheduler: OrgPushSDK.ValueObservationScheduler, onChange: @escaping (Reducer.Value) -> Swift.Void) -> OrgPushSDK.DatabaseCancellable where Reducer : OrgPushSDK.ValueReducer
}
extension OrgPushSDK.DatabaseValueConvertible where Self : Swift.Encodable {
  public var databaseValue: OrgPushSDK.DatabaseValue {
    get
  }
}
extension OrgPushSDK.DatabaseValueConvertible where Self : Swift.Encodable, Self : Swift.RawRepresentable, Self.RawValue : OrgPushSDK.DatabaseValueConvertible {
  public var databaseValue: OrgPushSDK.DatabaseValue {
    get
  }
}
@objc public class StatisticsResult : ObjectiveC.NSObject, Swift.Decodable {
  public init(resultKind: OrgPushSDK.ResultKind, errorCode: Swift.Int, errorDescription: Swift.String?, messages: [OrgPushSDK.MessageElement]?)
  required public init(from decoder: Swift.Decoder) throws
  public func getResultKind() -> OrgPushSDK.ResultKind
  public func getErrorCode() -> Swift.Int
  public func getErrorDescription() -> Swift.String?
  public func getMessages() -> [OrgPushSDK.MessageElement]?
  @objc deinit
}
public struct MessageElement : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
extension OrgPushSDK.SQLInterpolation {
  public mutating func appendInterpolation<T>(_ table: T.Type) where T : OrgPushSDK.TableRecord
  @_disfavoredOverload public mutating func appendInterpolation(_ table: OrgPushSDK.TableRecord.Type)
  public mutating func appendInterpolation<T>(tableOf record: T) where T : OrgPushSDK.TableRecord
  @_disfavoredOverload public mutating func appendInterpolation(tableOf record: OrgPushSDK.TableRecord)
  public mutating func appendInterpolation<T>(columnsOf record: T.Type, tableAlias: Swift.String? = nil) where T : OrgPushSDK.TableRecord
  public mutating func appendInterpolation<T>(_ selection: T) where T : OrgPushSDK.SQLSelectable
  @_disfavoredOverload public mutating func appendInterpolation(_ selection: OrgPushSDK.SQLSelectable?)
  public mutating func appendInterpolation<T>(_ orderingTerm: T) where T : OrgPushSDK.SQLOrderingTerm
  @_disfavoredOverload public mutating func appendInterpolation(_ orderingTerm: OrgPushSDK.SQLOrderingTerm)
  public mutating func appendInterpolation<T>(_ expressible: T) where T : OrgPushSDK.SQLExpressible, T : OrgPushSDK.SQLOrderingTerm, T : OrgPushSDK.SQLSelectable
  @_disfavoredOverload public mutating func appendInterpolation(_ expressible: OrgPushSDK.SQLExpressible?)
  public mutating func appendInterpolation<T>(_ key: T) where T : Swift.CodingKey
  public mutating func appendInterpolation<T>(_ key: T) where T : OrgPushSDK.SQLExpressible, T : OrgPushSDK.SQLOrderingTerm, T : OrgPushSDK.SQLSelectable, T : Swift.CodingKey
  @_disfavoredOverload public mutating func appendInterpolation(_ key: Swift.CodingKey)
  public mutating func appendInterpolation<T>(_ subquery: T) where T : OrgPushSDK.SQLSubqueryable
  public mutating func appendInterpolation<T>(_ sequence: T) where T : Swift.Sequence, T.Element : OrgPushSDK.SQLExpressible
  public mutating func appendInterpolation<T>(_ sequence: T) where T : Swift.Sequence, T.Element == OrgPushSDK.SQLExpressible
  public mutating func appendInterpolation<T>(_ expressible: T) where T : OrgPushSDK.SQLExpressible, T : Swift.Sequence, T.Element : OrgPushSDK.SQLExpressible
  public mutating func appendInterpolation<T>(_ cte: OrgPushSDK.CommonTableExpression<T>)
  public mutating func appendInterpolation<T>(definitionFor cte: OrgPushSDK.CommonTableExpression<T>)
  public mutating func appendInterpolation(_ collation: OrgPushSDK.DatabaseCollation)
  public mutating func appendInterpolation(_ collation: OrgPushSDK.Database.CollationName)
}
public struct ValueObservation<Reducer> where Reducer : OrgPushSDK.ValueReducer {
  public var requiresWriteAccess: Swift.Bool
}
extension OrgPushSDK.ValueObservation {
  public func start(in reader: OrgPushSDK.DatabaseReader, scheduling scheduler: OrgPushSDK.ValueObservationScheduler = .async(onQueue: .main), onError: @escaping (Swift.Error) -> Swift.Void, onChange: @escaping (Reducer.Value) -> Swift.Void) -> OrgPushSDK.DatabaseCancellable
  public func handleEvents(willStart: (() -> Swift.Void)? = nil, willFetch: (() -> Swift.Void)? = nil, willTrackRegion: ((OrgPushSDK.DatabaseRegion) -> Swift.Void)? = nil, databaseDidChange: (() -> Swift.Void)? = nil, didReceiveValue: ((Reducer.Value) -> Swift.Void)? = nil, didFail: ((Swift.Error) -> Swift.Void)? = nil, didCancel: (() -> Swift.Void)? = nil) -> OrgPushSDK.ValueObservation<OrgPushSDK.ValueReducers.Trace<Reducer>>
  public func print(_ prefix: Swift.String = "", to stream: Swift.TextOutputStream? = nil) -> OrgPushSDK.ValueObservation<OrgPushSDK.ValueReducers.Trace<Reducer>>
}
extension OrgPushSDK.ValueObservation {
  @available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
  public func publisher(in reader: OrgPushSDK.DatabaseReader, scheduling scheduler: OrgPushSDK.ValueObservationScheduler = .async(onQueue: .main)) -> OrgPushSDK.DatabasePublishers.Value<Reducer.Value>
}
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension OrgPushSDK.DatabasePublishers {
  public struct Value<Output> : Combine.Publisher {
    public typealias Failure = Swift.Error
    public func receive<S>(subscriber: S) where Output == S.Input, S : Combine.Subscriber, S.Failure == Swift.Error
  }
}
extension OrgPushSDK.ValueObservation where Reducer == OrgPushSDK.ValueReducers.Auto {
  public static func trackingConstantRegion<Value>(_ fetch: @escaping (OrgPushSDK.Database) throws -> Value) -> OrgPushSDK.ValueObservation<OrgPushSDK.ValueReducers.Fetch<Value>>
  public static func tracking<Value>(region: OrgPushSDK.DatabaseRegionConvertible..., fetch: @escaping (OrgPushSDK.Database) throws -> Value) -> OrgPushSDK.ValueObservation<OrgPushSDK.ValueReducers.Fetch<Value>>
  public static func tracking<Value>(regions: [OrgPushSDK.DatabaseRegionConvertible], fetch: @escaping (OrgPushSDK.Database) throws -> Value) -> OrgPushSDK.ValueObservation<OrgPushSDK.ValueReducers.Fetch<Value>>
  public static func tracking<Value>(_ fetch: @escaping (OrgPushSDK.Database) throws -> Value) -> OrgPushSDK.ValueObservation<OrgPushSDK.ValueReducers.Fetch<Value>>
  @available(*, deprecated, renamed: "tracking(_:)")
  public static func trackingVaryingRegion<Value>(_ fetch: @escaping (OrgPushSDK.Database) throws -> Value) -> OrgPushSDK.ValueObservation<OrgPushSDK.ValueReducers.Fetch<Value>>
}
public struct HasManyThroughAssociation<Origin, Destination> : OrgPushSDK.AssociationToMany {
  public typealias OriginRowDecoder = Origin
  public typealias RowDecoder = Destination
  public var _sqlAssociation: OrgPushSDK._SQLAssociation
}
extension Foundation.NSString : OrgPushSDK.DatabaseValueConvertible {
  public var databaseValue: OrgPushSDK.DatabaseValue {
    get
  }
  public static func fromDatabaseValue(_ dbValue: OrgPushSDK.DatabaseValue) -> Self?
}
public func abs(_ value: OrgPushSDK.SQLSpecificExpressible) -> OrgPushSDK.SQLExpression
public func average(_ value: OrgPushSDK.SQLSpecificExpressible) -> OrgPushSDK.SQLExpression
@available(*, deprecated)
public func count(_ counted: OrgPushSDK.SQLSelectable) -> OrgPushSDK.SQLExpression
public func count(_ counted: OrgPushSDK.SQLSpecificExpressible) -> OrgPushSDK.SQLExpression
public func count(distinct value: OrgPushSDK.SQLSpecificExpressible) -> OrgPushSDK.SQLExpression
public func ?? (lhs: OrgPushSDK.SQLSpecificExpressible, rhs: OrgPushSDK.SQLExpressible) -> OrgPushSDK.SQLExpression
public func length(_ value: OrgPushSDK.SQLSpecificExpressible) -> OrgPushSDK.SQLExpression
public func max(_ value: OrgPushSDK.SQLSpecificExpressible) -> OrgPushSDK.SQLExpression
public func min(_ value: OrgPushSDK.SQLSpecificExpressible) -> OrgPushSDK.SQLExpression
public func sum(_ value: OrgPushSDK.SQLSpecificExpressible) -> OrgPushSDK.SQLExpression
public func total(_ value: OrgPushSDK.SQLSpecificExpressible) -> OrgPushSDK.SQLExpression
extension OrgPushSDK.SQLSpecificExpressible {
  public var capitalized: OrgPushSDK.SQLExpression {
    get
  }
  public var lowercased: OrgPushSDK.SQLExpression {
    get
  }
  public var uppercased: OrgPushSDK.SQLExpression {
    get
  }
}
extension OrgPushSDK.SQLSpecificExpressible {
  @available(macOS 10.11, watchOS 3.0, *)
  public var localizedCapitalized: OrgPushSDK.SQLExpression {
    get
  }
  @available(macOS 10.11, watchOS 3.0, *)
  public var localizedLowercased: OrgPushSDK.SQLExpression {
    get
  }
  @available(macOS 10.11, watchOS 3.0, *)
  public var localizedUppercased: OrgPushSDK.SQLExpression {
    get
  }
}
public enum SQLDateModifier : OrgPushSDK.SQLSpecificExpressible {
  case second(Swift.Double)
  case minute(Swift.Int)
  case hour(Swift.Int)
  case day(Swift.Int)
  case month(Swift.Int)
  case year(Swift.Int)
  case startOfDay
  case startOfMonth
  case startOfYear
  case weekday(Swift.Int)
  case unixEpoch
  case localTime
  case utc
  public var sqlExpression: OrgPushSDK.SQLExpression {
    get
  }
}
public func julianDay(_ value: OrgPushSDK.SQLSpecificExpressible, _ modifiers: OrgPushSDK.SQLDateModifier...) -> OrgPushSDK.SQLExpression
public func dateTime(_ value: OrgPushSDK.SQLSpecificExpressible, _ modifiers: OrgPushSDK.SQLDateModifier...) -> OrgPushSDK.SQLExpression
public struct HasOneAssociation<Origin, Destination> : OrgPushSDK.AssociationToOne {
  public typealias OriginRowDecoder = Origin
  public typealias RowDecoder = Destination
  public var _sqlAssociation: OrgPushSDK._SQLAssociation
}
@_hasMissingDesignatedInitializers public class PushSDKNotificationParser {
  public static let shared: OrgPushSDK.PushSDKNotificationParser
  public func parseNotification(_ userInfo: [Swift.AnyHashable : Any]) -> OrgPushSDK.PushNotification?
  @objc deinit
}
public enum PushTask : Swift.String {
  case SendLogs
  case UpdateNotificationStatuses
  case ScheduleLocalNotification
  case UnknownTask
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol PushNotification {
  var id: Swift.String { get }
  var title: Swift.String? { get set }
  var subtitle: Swift.String? { get set }
  var body: Swift.String? { get set }
  var contentAvailable: Swift.Bool? { get set }
  var customData: [Swift.AnyHashable : Any]? { get set }
  var trackData: [Swift.AnyHashable : Any]? { get set }
  var tasks: [OrgPushSDK.PushTask : [Swift.String : Any]]? { get set }
  var type: Swift.String? { get set }
  var thisRejectedId: Swift.String? { get set }
}
@_hasMissingDesignatedInitializers public class TableAlias : Swift.Hashable {
  public init(name: Swift.String? = nil)
  public subscript(selectable: OrgPushSDK.SQLSelectable) -> OrgPushSDK.SQLSelection {
    get
  }
  public subscript(expression: OrgPushSDK.SQLSpecificExpressible) -> OrgPushSDK.SQLExpression {
    get
  }
  public subscript(ordering: OrgPushSDK.SQLOrderingTerm) -> OrgPushSDK.SQLOrdering {
    get
  }
  public subscript(column: Swift.String) -> OrgPushSDK.SQLExpression {
    get
  }
  public var exists: OrgPushSDK.SQLExpression {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: OrgPushSDK.TableAlias, rhs: OrgPushSDK.TableAlias) -> Swift.Bool
  @objc deinit
  public var hashValue: Swift.Int {
    get
  }
}
public struct SQLSubquery {
}
public protocol SQLSubqueryable : OrgPushSDK.SQLSpecificExpressible {
  var sqlSubquery: OrgPushSDK.SQLSubquery { get }
}
extension OrgPushSDK.SQLSubquery : OrgPushSDK.SQLSubqueryable {
  @available(*, deprecated, message: "Already SQLSubquery")
  public var sqlSubquery: OrgPushSDK.SQLSubquery {
    get
  }
}
extension OrgPushSDK.SQLSubqueryable {
  public var sqlExpression: OrgPushSDK.SQLExpression {
    get
  }
}
extension OrgPushSDK.SQLSubqueryable {
  public func contains(_ element: OrgPushSDK.SQLExpressible) -> OrgPushSDK.SQLExpression
  public func exists() -> OrgPushSDK.SQLExpression
}
final public class DatabaseFunction : Swift.Hashable {
  final public var name: Swift.String {
    get
  }
  public init(_ name: Swift.String, argumentCount: Swift.Int32? = nil, pure: Swift.Bool = false, function: @escaping ([OrgPushSDK.DatabaseValue]) throws -> OrgPushSDK.DatabaseValueConvertible?)
  public init<Aggregate>(_ name: Swift.String, argumentCount: Swift.Int32? = nil, pure: Swift.Bool = false, aggregate: Aggregate.Type) where Aggregate : OrgPushSDK.DatabaseAggregate
  final public func callAsFunction(_ arguments: OrgPushSDK.SQLExpressible...) -> OrgPushSDK.SQLExpression
  @objc deinit
  final public var hashValue: Swift.Int {
    get
  }
}
extension OrgPushSDK.DatabaseFunction {
  final public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: OrgPushSDK.DatabaseFunction, rhs: OrgPushSDK.DatabaseFunction) -> Swift.Bool
}
public protocol DatabaseAggregate {
  init()
  mutating func step(_ dbValues: [OrgPushSDK.DatabaseValue]) throws
  func finalize() throws -> OrgPushSDK.DatabaseValueConvertible?
}
public struct QueryInterfaceRequest<RowDecoder> {
}
extension OrgPushSDK.QueryInterfaceRequest : OrgPushSDK.FetchRequest {
  public var sqlSubquery: OrgPushSDK.SQLSubquery {
    get
  }
  public func fetchCount(_ db: OrgPushSDK.Database) throws -> Swift.Int
  public func makePreparedRequest(_ db: OrgPushSDK.Database, forSingleResult singleResult: Swift.Bool = false) throws -> OrgPushSDK.PreparedRequest
}
extension OrgPushSDK.QueryInterfaceRequest : OrgPushSDK.SelectionRequest {
  public func select(_ selection: @escaping (OrgPushSDK.Database) throws -> [OrgPushSDK.SQLSelectable]) -> OrgPushSDK.QueryInterfaceRequest<RowDecoder>
  public func select<RowDecoder>(_ selection: [OrgPushSDK.SQLSelectable], as type: RowDecoder.Type = RowDecoder.self) -> OrgPushSDK.QueryInterfaceRequest<RowDecoder>
  public func select<RowDecoder>(_ selection: OrgPushSDK.SQLSelectable..., as type: RowDecoder.Type = RowDecoder.self) -> OrgPushSDK.QueryInterfaceRequest<RowDecoder>
  public func select<RowDecoder>(sql: Swift.String, arguments: OrgPushSDK.StatementArguments = StatementArguments(), as type: RowDecoder.Type = RowDecoder.self) -> OrgPushSDK.QueryInterfaceRequest<RowDecoder>
  public func select<RowDecoder>(literal sqlLiteral: OrgPushSDK.SQL, as type: RowDecoder.Type = RowDecoder.self) -> OrgPushSDK.QueryInterfaceRequest<RowDecoder>
  public func annotated(with selection: @escaping (OrgPushSDK.Database) throws -> [OrgPushSDK.SQLSelectable]) -> OrgPushSDK.QueryInterfaceRequest<RowDecoder>
}
@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6, *)
extension OrgPushSDK.QueryInterfaceRequest where RowDecoder : Swift.Identifiable, RowDecoder.ID : OrgPushSDK.DatabaseValueConvertible {
  public func selectID() -> OrgPushSDK.QueryInterfaceRequest<RowDecoder.ID>
}
@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6, *)
extension OrgPushSDK.QueryInterfaceRequest where RowDecoder : Swift.Identifiable, RowDecoder.ID : OrgPushSDK._OptionalProtocol, RowDecoder.ID.Wrapped : OrgPushSDK.DatabaseValueConvertible {
  public func selectID() -> OrgPushSDK.QueryInterfaceRequest<RowDecoder.ID.Wrapped>
}
extension OrgPushSDK.QueryInterfaceRequest : OrgPushSDK.FilteredRequest {
  public func filter(_ predicate: @escaping (OrgPushSDK.Database) throws -> OrgPushSDK.SQLExpressible) -> OrgPushSDK.QueryInterfaceRequest<RowDecoder>
}
extension OrgPushSDK.QueryInterfaceRequest : OrgPushSDK.OrderedRequest {
  public func order(_ orderings: @escaping (OrgPushSDK.Database) throws -> [OrgPushSDK.SQLOrderingTerm]) -> OrgPushSDK.QueryInterfaceRequest<RowDecoder>
  public func reversed() -> OrgPushSDK.QueryInterfaceRequest<RowDecoder>
  public func unordered() -> OrgPushSDK.QueryInterfaceRequest<RowDecoder>
}
extension OrgPushSDK.QueryInterfaceRequest : OrgPushSDK.AggregatingRequest {
  public func group(_ expressions: @escaping (OrgPushSDK.Database) throws -> [OrgPushSDK.SQLExpressible]) -> OrgPushSDK.QueryInterfaceRequest<RowDecoder>
  public func having(_ predicate: @escaping (OrgPushSDK.Database) throws -> OrgPushSDK.SQLExpressible) -> OrgPushSDK.QueryInterfaceRequest<RowDecoder>
}
extension OrgPushSDK.QueryInterfaceRequest : OrgPushSDK._JoinableRequest {
  public func _including(all association: OrgPushSDK._SQLAssociation) -> OrgPushSDK.QueryInterfaceRequest<RowDecoder>
  public func _including(optional association: OrgPushSDK._SQLAssociation) -> OrgPushSDK.QueryInterfaceRequest<RowDecoder>
  public func _including(required association: OrgPushSDK._SQLAssociation) -> OrgPushSDK.QueryInterfaceRequest<RowDecoder>
  public func _joining(optional association: OrgPushSDK._SQLAssociation) -> OrgPushSDK.QueryInterfaceRequest<RowDecoder>
  public func _joining(required association: OrgPushSDK._SQLAssociation) -> OrgPushSDK.QueryInterfaceRequest<RowDecoder>
}
extension OrgPushSDK.QueryInterfaceRequest : OrgPushSDK.JoinableRequest {
}
extension OrgPushSDK.QueryInterfaceRequest : OrgPushSDK.TableRequest {
  public var databaseTableName: Swift.String {
    get
  }
  public func aliased(_ alias: OrgPushSDK.TableAlias) -> OrgPushSDK.QueryInterfaceRequest<RowDecoder>
}
extension OrgPushSDK.QueryInterfaceRequest : OrgPushSDK.DerivableRequest {
  public func distinct() -> OrgPushSDK.QueryInterfaceRequest<RowDecoder>
  public func limit(_ limit: Swift.Int, offset: Swift.Int?) -> OrgPushSDK.QueryInterfaceRequest<RowDecoder>
  public func with<RowDecoder>(_ cte: OrgPushSDK.CommonTableExpression<RowDecoder>) -> OrgPushSDK.QueryInterfaceRequest<RowDecoder>
}
extension OrgPushSDK.QueryInterfaceRequest {
  public func asRequest<RowDecoder>(of type: RowDecoder.Type) -> OrgPushSDK.QueryInterfaceRequest<RowDecoder>
}
extension OrgPushSDK.QueryInterfaceRequest {
  public func isEmpty(_ db: OrgPushSDK.Database) throws -> Swift.Bool
}
extension OrgPushSDK.QueryInterfaceRequest {
  @discardableResult
  public func deleteAll(_ db: OrgPushSDK.Database) throws -> Swift.Int
}
extension OrgPushSDK.QueryInterfaceRequest {
  @discardableResult
  public func updateAll(_ db: OrgPushSDK.Database, onConflict conflictResolution: OrgPushSDK.Database.ConflictResolution? = nil, _ assignments: [OrgPushSDK.ColumnAssignment]) throws -> Swift.Int
  @discardableResult
  public func updateAll(_ db: OrgPushSDK.Database, onConflict conflictResolution: OrgPushSDK.Database.ConflictResolution? = nil, _ assignment: OrgPushSDK.ColumnAssignment, _ otherAssignments: OrgPushSDK.ColumnAssignment...) throws -> Swift.Int
}
public struct ColumnAssignment {
}
extension OrgPushSDK.ColumnExpression {
  public func set(to value: OrgPushSDK.SQLExpressible?) -> OrgPushSDK.ColumnAssignment
}
public func += (column: OrgPushSDK.ColumnExpression, value: OrgPushSDK.SQLExpressible) -> OrgPushSDK.ColumnAssignment
public func -= (column: OrgPushSDK.ColumnExpression, value: OrgPushSDK.SQLExpressible) -> OrgPushSDK.ColumnAssignment
public func *= (column: OrgPushSDK.ColumnExpression, value: OrgPushSDK.SQLExpressible) -> OrgPushSDK.ColumnAssignment
public func /= (column: OrgPushSDK.ColumnExpression, value: OrgPushSDK.SQLExpressible) -> OrgPushSDK.ColumnAssignment
public protocol DatabaseReader : AnyObject {
  var configuration: OrgPushSDK.Configuration { get }
  func close() throws
  func interrupt()
  @_disfavoredOverload func read<T>(_ value: (OrgPushSDK.Database) throws -> T) throws -> T
  func asyncRead(_ value: @escaping (Swift.Result<OrgPushSDK.Database, Swift.Error>) -> Swift.Void)
  func _weakAsyncRead(_ value: @escaping (Swift.Result<OrgPushSDK.Database, Swift.Error>?) -> Swift.Void)
  @_disfavoredOverload func unsafeRead<T>(_ value: (OrgPushSDK.Database) throws -> T) throws -> T
  func asyncUnsafeRead(_ value: @escaping (Swift.Result<OrgPushSDK.Database, Swift.Error>) -> Swift.Void)
  func unsafeReentrantRead<T>(_ value: (OrgPushSDK.Database) throws -> T) throws -> T
  func _add<Reducer>(observation: OrgPushSDK.ValueObservation<Reducer>, scheduling scheduler: OrgPushSDK.ValueObservationScheduler, onChange: @escaping (Reducer.Value) -> Swift.Void) -> OrgPushSDK.DatabaseCancellable where Reducer : OrgPushSDK.ValueReducer
}
extension OrgPushSDK.DatabaseReader {
  public func backup(to writer: OrgPushSDK.DatabaseWriter, pagesPerStep: Swift.Int32 = -1, progress: ((OrgPushSDK.DatabaseBackupProgress) throws -> Swift.Void)? = nil) throws
}
extension OrgPushSDK.DatabaseReader {
  @available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
  public func readPublisher<Output>(value: @escaping (OrgPushSDK.Database) throws -> Output) -> OrgPushSDK.DatabasePublishers.Read<Output>
  @available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
  public func readPublisher<S, Output>(receiveOn scheduler: S, value: @escaping (OrgPushSDK.Database) throws -> Output) -> OrgPushSDK.DatabasePublishers.Read<Output> where S : Combine.Scheduler
}
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension OrgPushSDK.DatabasePublishers {
  public struct Read<Output> : Combine.Publisher {
    public typealias Output = Output
    public typealias Failure = Swift.Error
    public func receive<S>(subscriber: S) where Output == S.Input, S : Combine.Subscriber, S.Failure == Swift.Error
  }
}
final public class AnyDatabaseReader : OrgPushSDK.DatabaseReader {
  public init(_ base: OrgPushSDK.DatabaseReader)
  final public var configuration: OrgPushSDK.Configuration {
    get
  }
  final public func close() throws
  final public func interrupt()
  @_disfavoredOverload final public func read<T>(_ value: (OrgPushSDK.Database) throws -> T) throws -> T
  final public func asyncRead(_ value: @escaping (Swift.Result<OrgPushSDK.Database, Swift.Error>) -> Swift.Void)
  final public func _weakAsyncRead(_ value: @escaping (Swift.Result<OrgPushSDK.Database, Swift.Error>?) -> Swift.Void)
  @_disfavoredOverload final public func unsafeRead<T>(_ value: (OrgPushSDK.Database) throws -> T) throws -> T
  final public func asyncUnsafeRead(_ value: @escaping (Swift.Result<OrgPushSDK.Database, Swift.Error>) -> Swift.Void)
  final public func unsafeReentrantRead<T>(_ value: (OrgPushSDK.Database) throws -> T) throws -> T
  final public func _add<Reducer>(observation: OrgPushSDK.ValueObservation<Reducer>, scheduling scheduler: OrgPushSDK.ValueObservationScheduler, onChange: @escaping (Reducer.Value) -> Swift.Void) -> OrgPushSDK.DatabaseCancellable where Reducer : OrgPushSDK.ValueReducer
  @objc deinit
}
public struct Icon : Swift.Codable, Swift.Hashable, OrgPushSDK.TableRecord, OrgPushSDK.FetchableRecord, OrgPushSDK.MutablePersistableRecord {
  public var url: Swift.String?
  public var value: Swift.String?
  public var messageId: Swift.String
  #if compiler(>=5.3) && $EffectfulProp
  public var messageLink: OrgPushSDK.Message? {
    get throws
  }
  #endif
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: OrgPushSDK.Icon, b: OrgPushSDK.Icon) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
public struct FTS3TokenizerDescriptor {
  public static let simple: OrgPushSDK.FTS3TokenizerDescriptor
  public static let porter: OrgPushSDK.FTS3TokenizerDescriptor
  public static func unicode61(diacritics: OrgPushSDK.FTS3.Diacritics = .removeLegacy, separators: Swift.Set<Swift.Character> = [], tokenCharacters: Swift.Set<Swift.Character> = []) -> OrgPushSDK.FTS3TokenizerDescriptor
}
extension Swift.Bool : OrgPushSDK.DatabaseValueConvertible, OrgPushSDK.StatementColumnConvertible {
  public init(sqliteStatement: OrgPushSDK.SQLiteStatement, index: Swift.Int32)
  public var databaseValue: OrgPushSDK.DatabaseValue {
    get
  }
  public static func fromDatabaseValue(_ dbValue: OrgPushSDK.DatabaseValue) -> Swift.Bool?
  public func bind(to sqliteStatement: OrgPushSDK.SQLiteStatement, at index: Swift.CInt) -> Swift.CInt
}
extension Swift.Int : OrgPushSDK.DatabaseValueConvertible, OrgPushSDK.StatementColumnConvertible {
  @inline(__always) @inlinable public init?(sqliteStatement: OrgPushSDK.SQLiteStatement, index: Swift.Int32) {
        let int64 = sqlite3_column_int64(sqliteStatement, index)
        guard let v = Int(exactly: int64) else { return nil }
        self = v
    }
  public var databaseValue: OrgPushSDK.DatabaseValue {
    get
  }
  public static func fromDatabaseValue(_ dbValue: OrgPushSDK.DatabaseValue) -> Swift.Int?
  public func bind(to sqliteStatement: OrgPushSDK.SQLiteStatement, at index: Swift.CInt) -> Swift.CInt
}
extension Swift.Int8 : OrgPushSDK.DatabaseValueConvertible, OrgPushSDK.StatementColumnConvertible {
  @inline(__always) @inlinable public init?(sqliteStatement: OrgPushSDK.SQLiteStatement, index: Swift.Int32) {
        let int64 = sqlite3_column_int64(sqliteStatement, index)
        guard let v = Int8(exactly: int64) else { return nil }
        self = v
    }
  public var databaseValue: OrgPushSDK.DatabaseValue {
    get
  }
  public static func fromDatabaseValue(_ dbValue: OrgPushSDK.DatabaseValue) -> Swift.Int8?
  public func bind(to sqliteStatement: OrgPushSDK.SQLiteStatement, at index: Swift.CInt) -> Swift.CInt
}
extension Swift.Int16 : OrgPushSDK.DatabaseValueConvertible, OrgPushSDK.StatementColumnConvertible {
  @inline(__always) @inlinable public init?(sqliteStatement: OrgPushSDK.SQLiteStatement, index: Swift.Int32) {
        let int64 = sqlite3_column_int64(sqliteStatement, index)
        guard let v = Int16(exactly: int64) else { return nil }
        self = v
    }
  public var databaseValue: OrgPushSDK.DatabaseValue {
    get
  }
  public static func fromDatabaseValue(_ dbValue: OrgPushSDK.DatabaseValue) -> Swift.Int16?
  public func bind(to sqliteStatement: OrgPushSDK.SQLiteStatement, at index: Swift.CInt) -> Swift.CInt
}
extension Swift.Int32 : OrgPushSDK.DatabaseValueConvertible, OrgPushSDK.StatementColumnConvertible {
  @inline(__always) @inlinable public init?(sqliteStatement: OrgPushSDK.SQLiteStatement, index: Swift.Int32) {
        let int64 = sqlite3_column_int64(sqliteStatement, index)
        guard let v = Int32(exactly: int64) else { return nil }
        self = v
    }
  public var databaseValue: OrgPushSDK.DatabaseValue {
    get
  }
  public static func fromDatabaseValue(_ dbValue: OrgPushSDK.DatabaseValue) -> Swift.Int32?
  public func bind(to sqliteStatement: OrgPushSDK.SQLiteStatement, at index: Swift.CInt) -> Swift.CInt
}
extension Swift.Int64 : OrgPushSDK.DatabaseValueConvertible, OrgPushSDK.StatementColumnConvertible {
  public init(sqliteStatement: OrgPushSDK.SQLiteStatement, index: Swift.Int32)
  public var databaseValue: OrgPushSDK.DatabaseValue {
    get
  }
  public static func fromDatabaseValue(_ dbValue: OrgPushSDK.DatabaseValue) -> Swift.Int64?
  public func bind(to sqliteStatement: OrgPushSDK.SQLiteStatement, at index: Swift.CInt) -> Swift.CInt
}
extension Swift.UInt : OrgPushSDK.DatabaseValueConvertible, OrgPushSDK.StatementColumnConvertible {
  @inline(__always) @inlinable public init?(sqliteStatement: OrgPushSDK.SQLiteStatement, index: Swift.Int32) {
        let int64 = sqlite3_column_int64(sqliteStatement, index)
        guard let v = UInt(exactly: int64) else { return nil }
        self = v
    }
  public var databaseValue: OrgPushSDK.DatabaseValue {
    get
  }
  public static func fromDatabaseValue(_ dbValue: OrgPushSDK.DatabaseValue) -> Swift.UInt?
  public func bind(to sqliteStatement: OrgPushSDK.SQLiteStatement, at index: Swift.CInt) -> Swift.CInt
}
extension Swift.UInt8 : OrgPushSDK.DatabaseValueConvertible, OrgPushSDK.StatementColumnConvertible {
  @inline(__always) @inlinable public init?(sqliteStatement: OrgPushSDK.SQLiteStatement, index: Swift.Int32) {
        let int64 = sqlite3_column_int64(sqliteStatement, index)
        guard let v = UInt8(exactly: int64) else { return nil }
        self = v
    }
  public var databaseValue: OrgPushSDK.DatabaseValue {
    get
  }
  public static func fromDatabaseValue(_ dbValue: OrgPushSDK.DatabaseValue) -> Swift.UInt8?
  public func bind(to sqliteStatement: OrgPushSDK.SQLiteStatement, at index: Swift.CInt) -> Swift.CInt
}
extension Swift.UInt16 : OrgPushSDK.DatabaseValueConvertible, OrgPushSDK.StatementColumnConvertible {
  @inline(__always) @inlinable public init?(sqliteStatement: OrgPushSDK.SQLiteStatement, index: Swift.Int32) {
        let int64 = sqlite3_column_int64(sqliteStatement, index)
        guard let v = UInt16(exactly: int64) else { return nil }
        self = v
    }
  public var databaseValue: OrgPushSDK.DatabaseValue {
    get
  }
  public static func fromDatabaseValue(_ dbValue: OrgPushSDK.DatabaseValue) -> Swift.UInt16?
  public func bind(to sqliteStatement: OrgPushSDK.SQLiteStatement, at index: Swift.CInt) -> Swift.CInt
}
extension Swift.UInt32 : OrgPushSDK.DatabaseValueConvertible, OrgPushSDK.StatementColumnConvertible {
  @inline(__always) @inlinable public init?(sqliteStatement: OrgPushSDK.SQLiteStatement, index: Swift.Int32) {
        let int64 = sqlite3_column_int64(sqliteStatement, index)
        guard let v = UInt32(exactly: int64) else { return nil }
        self = v
    }
  public var databaseValue: OrgPushSDK.DatabaseValue {
    get
  }
  public static func fromDatabaseValue(_ dbValue: OrgPushSDK.DatabaseValue) -> Swift.UInt32?
  public func bind(to sqliteStatement: OrgPushSDK.SQLiteStatement, at index: Swift.CInt) -> Swift.CInt
}
extension Swift.UInt64 : OrgPushSDK.DatabaseValueConvertible, OrgPushSDK.StatementColumnConvertible {
  @inline(__always) @inlinable public init?(sqliteStatement: OrgPushSDK.SQLiteStatement, index: Swift.Int32) {
        let int64 = sqlite3_column_int64(sqliteStatement, index)
        guard let v = UInt64(exactly: int64) else { return nil }
        self = v
    }
  public var databaseValue: OrgPushSDK.DatabaseValue {
    get
  }
  public static func fromDatabaseValue(_ dbValue: OrgPushSDK.DatabaseValue) -> Swift.UInt64?
  public func bind(to sqliteStatement: OrgPushSDK.SQLiteStatement, at index: Swift.CInt) -> Swift.CInt
}
extension Swift.Double : OrgPushSDK.DatabaseValueConvertible, OrgPushSDK.StatementColumnConvertible {
  public init(sqliteStatement: OrgPushSDK.SQLiteStatement, index: Swift.Int32)
  public var databaseValue: OrgPushSDK.DatabaseValue {
    get
  }
  public static func fromDatabaseValue(_ dbValue: OrgPushSDK.DatabaseValue) -> Swift.Double?
  public func bind(to sqliteStatement: OrgPushSDK.SQLiteStatement, at index: Swift.CInt) -> Swift.CInt
}
extension Swift.Float : OrgPushSDK.DatabaseValueConvertible, OrgPushSDK.StatementColumnConvertible {
  public init(sqliteStatement: OrgPushSDK.SQLiteStatement, index: Swift.Int32)
  public var databaseValue: OrgPushSDK.DatabaseValue {
    get
  }
  public static func fromDatabaseValue(_ dbValue: OrgPushSDK.DatabaseValue) -> Swift.Float?
  public func bind(to sqliteStatement: OrgPushSDK.SQLiteStatement, at index: Swift.CInt) -> Swift.CInt
}
extension Swift.String : OrgPushSDK.DatabaseValueConvertible, OrgPushSDK.StatementColumnConvertible {
  public init(sqliteStatement: OrgPushSDK.SQLiteStatement, index: Swift.Int32)
  public var databaseValue: OrgPushSDK.DatabaseValue {
    get
  }
  public static func fromDatabaseValue(_ dbValue: OrgPushSDK.DatabaseValue) -> Swift.String?
  public func bind(to sqliteStatement: OrgPushSDK.SQLiteStatement, at index: Swift.CInt) -> Swift.CInt
}
extension OrgPushSDK.DatabaseFunction {
  public static let capitalize: OrgPushSDK.DatabaseFunction
  public static let lowercase: OrgPushSDK.DatabaseFunction
  public static let uppercase: OrgPushSDK.DatabaseFunction
}
extension OrgPushSDK.DatabaseFunction {
  @available(macOS 10.11, watchOS 3.0, *)
  public static let localizedCapitalize: OrgPushSDK.DatabaseFunction
  @available(macOS 10.11, watchOS 3.0, *)
  public static let localizedLowercase: OrgPushSDK.DatabaseFunction
  @available(macOS 10.11, watchOS 3.0, *)
  public static let localizedUppercase: OrgPushSDK.DatabaseFunction
}
extension OrgPushSDK.DatabaseCollation {
  public static let unicodeCompare: OrgPushSDK.DatabaseCollation
  public static let caseInsensitiveCompare: OrgPushSDK.DatabaseCollation
  public static let localizedCaseInsensitiveCompare: OrgPushSDK.DatabaseCollation
  public static let localizedCompare: OrgPushSDK.DatabaseCollation
  public static let localizedStandardCompare: OrgPushSDK.DatabaseCollation
}
public func splittingRowAdapters(columnCounts: [Swift.Int]) -> [OrgPushSDK.RowAdapter]
public struct _LayoutedColumnMapping {
  public let _layoutColumns: [(Swift.Int, Swift.String)]
}
extension OrgPushSDK._LayoutedColumnMapping : OrgPushSDK._LayoutedRowAdapter {
  public var _mapping: OrgPushSDK._LayoutedColumnMapping {
    get
  }
  public var _scopes: [Swift.String : OrgPushSDK._LayoutedRowAdapter] {
    get
  }
}
extension OrgPushSDK._LayoutedColumnMapping : OrgPushSDK._RowLayout {
  public func _layoutIndex(ofColumn name: Swift.String) -> Swift.Int?
}
public protocol _LayoutedRowAdapter {
  var _mapping: OrgPushSDK._LayoutedColumnMapping { get }
  var _scopes: [Swift.String : OrgPushSDK._LayoutedRowAdapter] { get }
}
public protocol _RowLayout {
  var _layoutColumns: [(Swift.Int, Swift.String)] { get }
  func _layoutIndex(ofColumn name: Swift.String) -> Swift.Int?
}
extension OrgPushSDK.Statement : OrgPushSDK._RowLayout {
  final public var _layoutColumns: [(Swift.Int, Swift.String)] {
    get
  }
  final public func _layoutIndex(ofColumn name: Swift.String) -> Swift.Int?
}
public protocol _RowAdapter {
  func _layoutedAdapter(from layout: OrgPushSDK._RowLayout) throws -> OrgPushSDK._LayoutedRowAdapter
}
public protocol RowAdapter : OrgPushSDK._RowAdapter {
}
extension OrgPushSDK.RowAdapter {
  public func addingScopes(_ scopes: [Swift.String : OrgPushSDK.RowAdapter]) -> OrgPushSDK.RowAdapter
}
public struct EmptyRowAdapter : OrgPushSDK.RowAdapter {
  public init()
  public func _layoutedAdapter(from layout: OrgPushSDK._RowLayout) throws -> OrgPushSDK._LayoutedRowAdapter
}
public struct ColumnMapping : OrgPushSDK.RowAdapter {
  public init(_ mapping: [Swift.String : Swift.String])
  public func _layoutedAdapter(from layout: OrgPushSDK._RowLayout) throws -> OrgPushSDK._LayoutedRowAdapter
}
public struct SuffixRowAdapter : OrgPushSDK.RowAdapter {
  public init(fromIndex index: Swift.Int)
  public func _layoutedAdapter(from layout: OrgPushSDK._RowLayout) throws -> OrgPushSDK._LayoutedRowAdapter
}
public struct RangeRowAdapter : OrgPushSDK.RowAdapter {
  public init(_ range: Swift.CountableRange<Swift.Int>)
  public init(_ range: Swift.CountableClosedRange<Swift.Int>)
  public func _layoutedAdapter(from layout: OrgPushSDK._RowLayout) throws -> OrgPushSDK._LayoutedRowAdapter
}
public struct ScopeAdapter : OrgPushSDK.RowAdapter {
  public init(_ scopes: [Swift.String : OrgPushSDK.RowAdapter])
  public init(base: OrgPushSDK.RowAdapter, scopes: [Swift.String : OrgPushSDK.RowAdapter])
  public func _layoutedAdapter(from layout: OrgPushSDK._RowLayout) throws -> OrgPushSDK._LayoutedRowAdapter
}
public struct RenameColumnAdapter : OrgPushSDK.RowAdapter {
  public init(_ transform: @escaping (Swift.String) -> Swift.String)
  public func _layoutedAdapter(from layout: OrgPushSDK._RowLayout) throws -> OrgPushSDK._LayoutedRowAdapter
}
public enum StorageMessageError : Swift.Error {
  case contextIsNil
  case notSaved(Swift.Error)
}
public enum StorageMessageEntity : Swift.String {
  case message
  case messageStatus
  case status
  case channel
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
final public class StorageMessage {
  public init(groupId: Swift.String)
  convenience public init(groupId: Swift.String, useEncrypt: Swift.Bool, quantityLimit: Swift.Int?, daysLimit: Swift.Int?)
  final public func cleanup(quantityLimit: Swift.Int, daysLimit: Swift.Int)
  @objc deinit
}
extension OrgPushSDK.StorageMessage : OrgPushSDK.StorageMessageProtocol {
  final public var observer: OrgPushSDK.NSSQLiteDatabaseChangeDelegate? {
    get
    set
  }
  final public func saveMessage(_ message: OrgPushSDK.MessageProtocol) throws
  final public func saveMessage(_ message: OrgPushSDK.MessageProtocol, _ messageAttributes: OrgPushSDK.MessageAttributesProtocol) throws
  final public func saveMessage(_ message: OrgPushSDK.MessageProtocol, _ messageAttributes: OrgPushSDK.MessageAttributesProtocol, _ icon: OrgPushSDK.IconProtocol) throws
  final public func saveMessages(_ messages: [OrgPushSDK.MessageProtocol], extraContents: [OrgPushSDK.ExtraContentProtocol] = []) throws
  final public func saveMessage(_ message: OrgPushSDK.MessageProtocol, extraContent: OrgPushSDK.ExtraContentProtocol? = nil) throws
  final public func removeAllMessages() throws
  final public func removeMessage(id: Swift.String)
  final public func removeMessages(ids: [Swift.String])
  final public func removeMessages(predicate: OrgPushSDK.SQLSpecificExpressible)
  final public func messageById(messageId: Swift.String?) -> OrgPushSDK.Message?
  final public func getMessages() -> [OrgPushSDK.Message]
  final public func getMessages(byPredicate predicate: OrgPushSDK.SQLSpecificExpressible) -> [OrgPushSDK.Message]
  final public func isMessageExists(id: Swift.String) -> Swift.Bool
  final public func getMessageStatusesUnsent() -> [OrgPushSDK.MessageStatus]
  final public func markMessageStatusAsSent(_ messageStatus: OrgPushSDK.MessageStatusExternalProtocol)
  final public func readMessage(byId messageId: Swift.String) throws
  final public func markMessageStatusAsUnsent(_ messageStatus: OrgPushSDK.MessageStatusExternalProtocol)
  final public func extraContent(for messageId: Swift.String) -> OrgPushSDK.ExtraContent?
  final public func storeExtraContent(content: OrgPushSDK.ExtraContentProtocol) throws
  final public func icon(for url: Swift.String) -> OrgPushSDK.Icon?
  final public func erase() throws
}
extension CoreData.NSManagedObjectContext {
  public func executeAndMergeChanges(using batchDeleteRequest: CoreData.NSBatchDeleteRequest) throws
}
public struct _SQLAssociation {
}
public struct DatabaseDateComponents : OrgPushSDK.DatabaseValueConvertible, OrgPushSDK.StatementColumnConvertible, Swift.Codable {
  public enum Format : Swift.String {
    case YMD
    case YMD_HM
    case YMD_HMS
    case YMD_HMSS
    case HM
    case HMS
    case HMSS
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public let dateComponents: Foundation.DateComponents
  public let format: OrgPushSDK.DatabaseDateComponents.Format
  public init(_ dateComponents: Foundation.DateComponents, format: OrgPushSDK.DatabaseDateComponents.Format)
  @inline(__always) @inlinable public init?(sqliteStatement: OrgPushSDK.SQLiteStatement, index: Swift.Int32) {
        guard let cString = sqlite3_column_text(sqliteStatement, index) else {
            return nil
        }
        let length = Int(sqlite3_column_bytes(sqliteStatement, index)) // avoid an strlen
        let optionalComponents = cString.withMemoryRebound(
            to: Int8.self,
            capacity: length + 1 /* trailing \0 */) { cString in
            SQLiteDateParser().components(cString: cString, length: length)
        }
        guard let components = optionalComponents else {
            return nil
        }
        self.init(components.dateComponents, format: components.format)
    }
  public var databaseValue: OrgPushSDK.DatabaseValue {
    get
  }
  public static func fromDatabaseValue(_ dbValue: OrgPushSDK.DatabaseValue) -> OrgPushSDK.DatabaseDateComponents?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public enum NSResultsChangeType {
  case insert
  case delete
  case update
  public static func == (a: OrgPushSDK.NSResultsChangeType, b: OrgPushSDK.NSResultsChangeType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum NSObjectChanged : Swift.String {
  case message
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol NSSQLiteDatabaseChangeDelegate : AnyObject {
  func controller(didChanges objects: [OrgPushSDK.Message], type: OrgPushSDK.DatabaseEvent.Kind)
}
public struct SecurityOptions {
}
@_hasMissingDesignatedInitializers final public class StorageManager {
  final public let observer: OrgPushSDK.PushSDKObserver
  @objc deinit
}
extension OrgPushSDK.StorageManager {
  final public var databaseReader: OrgPushSDK.DatabaseReader {
    get
  }
}
extension OrgPushSDK.StorageManager {
  public static let shared: OrgPushSDK.StorageManager
}
extension OrgPushSDK.FetchableRecord where Self : Swift.Decodable {
  public init(row: OrgPushSDK.Row)
}
extension Foundation.NSDate : OrgPushSDK.DatabaseValueConvertible {
  public var databaseValue: OrgPushSDK.DatabaseValue {
    get
  }
  public static func fromDatabaseValue(_ dbValue: OrgPushSDK.DatabaseValue) -> Self?
}
extension Foundation.Date : OrgPushSDK.DatabaseValueConvertible {
  public var databaseValue: OrgPushSDK.DatabaseValue {
    get
  }
  public static func fromDatabaseValue(_ dbValue: OrgPushSDK.DatabaseValue) -> Foundation.Date?
  @usableFromInline
  internal init?(databaseDateComponents: OrgPushSDK.DatabaseDateComponents)
  public init?(julianDay: Swift.Double)
}
extension Foundation.Date : OrgPushSDK.StatementColumnConvertible {
  @inline(__always) @inlinable public init?(sqliteStatement: OrgPushSDK.SQLiteStatement, index: Swift.Int32) {
        switch sqlite3_column_type(sqliteStatement, index) {
        case SQLITE_INTEGER, SQLITE_FLOAT:
            self.init(timeIntervalSince1970: sqlite3_column_double(sqliteStatement, index))
        case SQLITE_TEXT:
            guard let components = DatabaseDateComponents(sqliteStatement: sqliteStatement, index: index),
                  let date = Date(databaseDateComponents: components)
            else {
                return nil
            }
            self.init(timeIntervalSinceReferenceDate: date.timeIntervalSinceReferenceDate)
        default:
            return nil
        }
    }
}
extension OrgPushSDK.SQLSelectable where Self : Swift.RawRepresentable, Self.RawValue : OrgPushSDK.SQLSelectable {
  public var sqlSelection: OrgPushSDK.SQLSelection {
    get
  }
}
extension OrgPushSDK.SQLOrderingTerm where Self : Swift.RawRepresentable, Self.RawValue : OrgPushSDK.SQLOrderingTerm {
  public var sqlOrdering: OrgPushSDK.SQLOrdering {
    get
  }
}
extension OrgPushSDK.SQLExpressible where Self : Swift.RawRepresentable, Self.RawValue : OrgPushSDK.SQLExpressible {
  public var sqlExpression: OrgPushSDK.SQLExpression {
    get
  }
}
extension OrgPushSDK.StatementBinding where Self : Swift.RawRepresentable, Self.RawValue : OrgPushSDK.StatementBinding {
  public func bind(to sqliteStatement: OrgPushSDK.SQLiteStatement, at index: Swift.CInt) -> Swift.CInt
}
extension OrgPushSDK.DatabaseValueConvertible where Self : Swift.RawRepresentable, Self.RawValue : OrgPushSDK.DatabaseValueConvertible {
  public var databaseValue: OrgPushSDK.DatabaseValue {
    get
  }
  public static func fromDatabaseValue(_ dbValue: OrgPushSDK.DatabaseValue) -> Self?
}
public enum PersistenceError : Swift.Error, Swift.CustomStringConvertible {
  case recordNotFound(databaseTableName: Swift.String, key: [Swift.String : OrgPushSDK.DatabaseValue])
}
extension OrgPushSDK.PersistenceError {
  public var description: Swift.String {
    get
  }
}
public struct PersistenceConflictPolicy {
  public let conflictResolutionForInsert: OrgPushSDK.Database.ConflictResolution
  public let conflictResolutionForUpdate: OrgPushSDK.Database.ConflictResolution
  public init(insert: OrgPushSDK.Database.ConflictResolution = .abort, update: OrgPushSDK.Database.ConflictResolution = .abort)
}
public protocol MutablePersistableRecord : OrgPushSDK.EncodableRecord, OrgPushSDK.TableRecord {
  static var persistenceConflictPolicy: OrgPushSDK.PersistenceConflictPolicy { get }
  mutating func didInsert(with rowID: Swift.Int64, for column: Swift.String?)
  mutating func insert(_ db: OrgPushSDK.Database) throws
  func update(_ db: OrgPushSDK.Database, columns: Swift.Set<Swift.String>) throws
  mutating func save(_ db: OrgPushSDK.Database) throws
  @discardableResult
  func delete(_ db: OrgPushSDK.Database) throws -> Swift.Bool
  func exists(_ db: OrgPushSDK.Database) throws -> Swift.Bool
}
extension OrgPushSDK.MutablePersistableRecord {
  public static var persistenceConflictPolicy: OrgPushSDK.PersistenceConflictPolicy {
    get
  }
  public mutating func didInsert(with rowID: Swift.Int64, for column: Swift.String?)
  public mutating func insert(_ db: OrgPushSDK.Database) throws
  public func inserted(_ db: OrgPushSDK.Database) throws -> Self
  public func update(_ db: OrgPushSDK.Database, columns: Swift.Set<Swift.String>) throws
  public func update<Sequence>(_ db: OrgPushSDK.Database, columns: Sequence) throws where Sequence : Swift.Sequence, Sequence.Element : OrgPushSDK.ColumnExpression
  public func update<Sequence>(_ db: OrgPushSDK.Database, columns: Sequence) throws where Sequence : Swift.Sequence, Sequence.Element == Swift.String
  public func update(_ db: OrgPushSDK.Database) throws
  @discardableResult
  public func updateChanges<Record>(_ db: OrgPushSDK.Database, from record: Record) throws -> Swift.Bool where Record : OrgPushSDK.MutablePersistableRecord
  @discardableResult
  public mutating func updateChanges(_ db: OrgPushSDK.Database, with change: (inout Self) throws -> Swift.Void) throws -> Swift.Bool
  public mutating func save(_ db: OrgPushSDK.Database) throws
  public func saved(_ db: OrgPushSDK.Database) throws -> Self
  @discardableResult
  public func delete(_ db: OrgPushSDK.Database) throws -> Swift.Bool
  public func exists(_ db: OrgPushSDK.Database) throws -> Swift.Bool
  public mutating func performInsert(_ db: OrgPushSDK.Database) throws
  public func performUpdate(_ db: OrgPushSDK.Database, columns: Swift.Set<Swift.String>) throws
  public mutating func performSave(_ db: OrgPushSDK.Database) throws
  public func performDelete(_ db: OrgPushSDK.Database) throws -> Swift.Bool
  public func performExists(_ db: OrgPushSDK.Database) throws -> Swift.Bool
}
extension OrgPushSDK.MutablePersistableRecord where Self : AnyObject {
  @discardableResult
  public func updateChanges(_ db: OrgPushSDK.Database, with change: (Self) throws -> Swift.Void) throws -> Swift.Bool
}
public protocol PersistableRecord : OrgPushSDK.MutablePersistableRecord {
  func didInsert(with rowID: Swift.Int64, for column: Swift.String?)
  func insert(_ db: OrgPushSDK.Database) throws
  func save(_ db: OrgPushSDK.Database) throws
}
extension OrgPushSDK.PersistableRecord {
  public func didInsert(with rowID: Swift.Int64, for column: Swift.String?)
  public func insert(_ db: OrgPushSDK.Database) throws
  public func save(_ db: OrgPushSDK.Database) throws
  public func performInsert(_ db: OrgPushSDK.Database) throws
  public func performSave(_ db: OrgPushSDK.Database) throws
}
public struct FTS4 : OrgPushSDK.VirtualTableModule {
  public init()
  public let moduleName: Swift.String
  public func makeTableDefinition() -> OrgPushSDK.FTS4TableDefinition
  public func makeTableDefinition(configuration: OrgPushSDK.VirtualTableConfiguration) -> OrgPushSDK.FTS4TableDefinition
  public func moduleArguments(for definition: OrgPushSDK.FTS4TableDefinition, in db: OrgPushSDK.Database) -> [Swift.String]
  public func database(_ db: OrgPushSDK.Database, didCreate tableName: Swift.String, using definition: OrgPushSDK.FTS4TableDefinition) throws
  public typealias TableDefinition = OrgPushSDK.FTS4TableDefinition
}
@_hasMissingDesignatedInitializers final public class FTS4TableDefinition {
  final public var tokenizer: OrgPushSDK.FTS3TokenizerDescriptor?
  final public var content: Swift.String? {
    get
    set
  }
  final public var compress: Swift.String?
  final public var uncompress: Swift.String?
  final public var matchinfo: Swift.String?
  final public var prefixes: Swift.Set<Swift.Int>?
  @discardableResult
  final public func column(_ name: Swift.String) -> OrgPushSDK.FTS4ColumnDefinition
  final public func synchronize(withTable tableName: Swift.String)
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class FTS4ColumnDefinition {
  @discardableResult
  final public func notIndexed() -> Self
  @discardableResult
  final public func asLanguageId() -> Self
  @objc deinit
}
extension OrgPushSDK.Database {
  final public func dropFTS4SynchronizationTriggers(forTable tableName: Swift.String) throws
}
extension Foundation.Data : OrgPushSDK.DatabaseValueConvertible, OrgPushSDK.StatementColumnConvertible {
  public init(sqliteStatement: OrgPushSDK.SQLiteStatement, index: Swift.Int32)
  public var databaseValue: OrgPushSDK.DatabaseValue {
    get
  }
  public static func fromDatabaseValue(_ dbValue: OrgPushSDK.DatabaseValue) -> Foundation.Data?
  public func bind(to sqliteStatement: OrgPushSDK.SQLiteStatement, at index: Swift.CInt) -> Swift.CInt
}
public typealias SQLiteConnection = Swift.OpaquePointer
@_hasMissingDesignatedInitializers final public class Database : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible {
  final public var sqliteConnection: OrgPushSDK.SQLiteConnection?
  public static var logError: OrgPushSDK.Database.LogErrorFunction? {
    get
    set
  }
  final public let configuration: OrgPushSDK.Configuration
  final public let description: Swift.String
  final public var debugDescription: Swift.String {
    get
  }
  final public var lastInsertedRowID: Swift.Int64 {
    get
  }
  final public var changesCount: Swift.Int {
    get
  }
  final public var totalChangesCount: Swift.Int {
    get
  }
  final public var isInsideTransaction: Swift.Bool {
    get
  }
  final public var lastErrorCode: OrgPushSDK.ResultCode {
    get
  }
  final public var lastErrorMessage: Swift.String? {
    get
  }
  @objc deinit
  final public var maximumStatementArgumentCount: Swift.Int {
    get
  }
  final public func add(function: OrgPushSDK.DatabaseFunction)
  final public func remove(function: OrgPushSDK.DatabaseFunction)
  final public func add(collation: OrgPushSDK.DatabaseCollation)
  final public func remove(collation: OrgPushSDK.DatabaseCollation)
  final public func trace(options: OrgPushSDK.Database.TracingOptions = .statement, _ trace: ((OrgPushSDK.Database.TraceEvent) -> Swift.Void)? = nil)
  @discardableResult
  final public func checkpoint(_ kind: OrgPushSDK.Database.CheckpointMode = .passive, on dbName: Swift.String? = "main") throws -> (walFrameCount: Swift.Int, checkpointedFrameCount: Swift.Int)
  public static let suspendNotification: Foundation.Notification.Name
  public static let resumeNotification: Foundation.Notification.Name
  final public func inTransaction(_ kind: OrgPushSDK.Database.TransactionKind? = nil, _ block: () throws -> OrgPushSDK.Database.TransactionCompletion) throws
  final public func inSavepoint(_ block: () throws -> OrgPushSDK.Database.TransactionCompletion) throws
  final public func beginTransaction(_ kind: OrgPushSDK.Database.TransactionKind? = nil) throws
  final public func rollback() throws
  final public func commit() throws
  final public func backup(to destDb: OrgPushSDK.Database, pagesPerStep: Swift.Int32 = -1, progress: ((OrgPushSDK.DatabaseBackupProgress) throws -> Swift.Void)? = nil) throws
}
extension OrgPushSDK.Database {
  final public func usePassphrase(_ passphrase: Swift.String) throws
  final public func usePassphrase(_ passphrase: Foundation.Data) throws
  final public func changePassphrase(_ passphrase: Swift.String) throws
  final public func changePassphrase(_ passphrase: Foundation.Data) throws
}
extension OrgPushSDK.Database {
  public typealias BusyCallback = (_ numberOfTries: Swift.Int) -> Swift.Bool
  public enum BusyMode {
    case immediateError
    case timeout(Foundation.TimeInterval)
    case callback(OrgPushSDK.Database.BusyCallback)
  }
  public enum CheckpointMode : Swift.Int32 {
    case passive
    case full
    case restart
    case truncate
    public init?(rawValue: Swift.Int32)
    public typealias RawValue = Swift.Int32
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public struct CollationName : Swift.RawRepresentable, Swift.Hashable {
    public let rawValue: Swift.String
    public init(rawValue: Swift.String)
    public static let binary: OrgPushSDK.Database.CollationName
    public static let nocase: OrgPushSDK.Database.CollationName
    public static let rtrim: OrgPushSDK.Database.CollationName
    public typealias RawValue = Swift.String
  }
  public struct ColumnType : Swift.RawRepresentable, Swift.Hashable {
    public let rawValue: Swift.String
    public init(rawValue: Swift.String)
    public static let text: OrgPushSDK.Database.ColumnType
    public static let integer: OrgPushSDK.Database.ColumnType
    public static let double: OrgPushSDK.Database.ColumnType
    public static let real: OrgPushSDK.Database.ColumnType
    public static let numeric: OrgPushSDK.Database.ColumnType
    public static let boolean: OrgPushSDK.Database.ColumnType
    public static let blob: OrgPushSDK.Database.ColumnType
    public static let date: OrgPushSDK.Database.ColumnType
    public static let datetime: OrgPushSDK.Database.ColumnType
    public static let any: OrgPushSDK.Database.ColumnType
    public typealias RawValue = Swift.String
  }
  public enum ConflictResolution : Swift.String {
    case rollback
    case abort
    case fail
    case ignore
    case replace
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum ForeignKeyAction : Swift.String {
    case cascade
    case restrict
    case setNull
    case setDefault
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public typealias LogErrorFunction = (_ resultCode: OrgPushSDK.ResultCode, _ message: Swift.String) -> Swift.Void
  public struct TracingOptions : Swift.OptionSet {
    public let rawValue: Swift.CInt
    public init(rawValue: Swift.CInt)
    public static let statement: OrgPushSDK.Database.TracingOptions
    public static let profile: OrgPushSDK.Database.TracingOptions
    public typealias ArrayLiteralElement = OrgPushSDK.Database.TracingOptions
    public typealias Element = OrgPushSDK.Database.TracingOptions
    public typealias RawValue = Swift.CInt
  }
  public enum TraceEvent : Swift.CustomStringConvertible {
    public struct Statement : Swift.CustomStringConvertible {
      public var sql: Swift.String {
        get
      }
      public var expandedSQL: Swift.String {
        get
      }
      public var description: Swift.String {
        get
      }
    }
    case statement(OrgPushSDK.Database.TraceEvent.Statement)
    case profile(statement: OrgPushSDK.Database.TraceEvent.Statement, duration: Foundation.TimeInterval)
    public var description: Swift.String {
      get
    }
    public var expandedDescription: Swift.String {
      get
    }
  }
  @frozen public enum TransactionCompletion {
    case commit
    case rollback
    public static func == (a: OrgPushSDK.Database.TransactionCompletion, b: OrgPushSDK.Database.TransactionCompletion) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum TransactionKind : Swift.String {
    case deferred
    case immediate
    case exclusive
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
}
public struct ExtraContent : Swift.Codable, Swift.Hashable, OrgPushSDK.TableRecord, OrgPushSDK.FetchableRecord, OrgPushSDK.MutablePersistableRecord {
  public var mimeType: Swift.String?
  public var value: Swift.String?
  public var messageId: Swift.String
  #if compiler(>=5.3) && $EffectfulProp
  public var messageLink: OrgPushSDK.Message? {
    get throws
  }
  #endif
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: OrgPushSDK.ExtraContent, b: OrgPushSDK.ExtraContent) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
public protocol SwizzlingInjection : AnyObject {
  static func inject()
}
extension UIKit.UIApplication : OrgPushSDK.SwizzlingInjection {
  @_Concurrency.MainActor(unsafe) public static func inject()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var next: UIKit.UIResponder? {
    @objc get
  }
}
extension Swift.String : Swift.Error {
}
@_hasMissingDesignatedInitializers public class ValueObservationScheduler {
  public static func async(onQueue queue: Dispatch.DispatchQueue) -> OrgPushSDK.ValueObservationScheduler
  public static let immediate: OrgPushSDK.ValueObservationScheduler
  @objc deinit
}
public struct HasManyAssociation<Origin, Destination> : OrgPushSDK.AssociationToMany {
  public typealias OriginRowDecoder = Origin
  public typealias RowDecoder = Destination
  public var _sqlAssociation: OrgPushSDK._SQLAssociation
}
@_hasMissingDesignatedInitializers open class PushSDKNotificationHandler {
  open class func didReceiveNotificationExtensionRequest(identifier: Swift.String, request: UserNotifications.UNNotificationRequest, withContentHandler contentHandler: @escaping (UserNotifications.UNNotificationContent) -> Swift.Void)
  open class func serviceExtensionTimeWillExpireRequest()
  @objc deinit
}
extension OrgPushSDK.Inflections {
  public static var `default`: OrgPushSDK.Inflections
}
public protocol _ValueReducer {
  associatedtype Fetched
  associatedtype Value
  func _fetch(_ db: OrgPushSDK.Database) throws -> Self.Fetched
  mutating func _value(_ fetched: Self.Fetched) -> Self.Value?
}
public protocol ValueReducer : OrgPushSDK._ValueReducer {
}
public enum ValueReducers {
  public enum Auto : OrgPushSDK.ValueReducer {
    public func _fetch(_ db: OrgPushSDK.Database) throws -> Swift.Never
    public mutating func _value(_ fetched: Swift.Never) -> Swift.Never?
    public typealias Fetched = Swift.Never
    public typealias Value = Swift.Never
  }
}
public struct DatabaseBackupProgress {
  public let remainingPageCount: Swift.Int
  public let totalPageCount: Swift.Int
  public var completedPageCount: Swift.Int {
    get
  }
  public let isCompleted: Swift.Bool
}
public struct MessageStatus : Swift.Codable, Swift.Hashable, OrgPushSDK.TableRecord, OrgPushSDK.FetchableRecord, OrgPushSDK.MutablePersistableRecord {
  public var isSentInternal: Swift.Bool
  public var statusDateInternal: Foundation.Date?
  public var statusNameInternal: Swift.String?
  public var messageId: Swift.String
  #if compiler(>=5.3) && $EffectfulProp
  public var messageLink: OrgPushSDK.Message? {
    get throws
  }
  #endif
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: OrgPushSDK.MessageStatus, b: OrgPushSDK.MessageStatus) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
extension Foundation.FileManager {
  public func safeCopyItem(at srcURL: Foundation.URL, to dstURL: Foundation.URL, completion: (Swift.Bool) -> ())
}
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public enum DatabasePublishers {
}
extension OrgPushSDK.Database {
  final public func makeStatement(sql: Swift.String) throws -> OrgPushSDK.Statement
  final public func makeStatement(literal sqlLiteral: OrgPushSDK.SQL) throws -> OrgPushSDK.Statement
  @available(*, deprecated, renamed: "makeStatement(sql:)")
  final public func makeSelectStatement(sql: Swift.String) throws -> OrgPushSDK.Statement
  @available(*, deprecated, renamed: "makeStatement(literal:)")
  final public func makeSelectStatement(literal sqlLiteral: OrgPushSDK.SQL) throws -> OrgPushSDK.Statement
  final public func cachedStatement(sql: Swift.String) throws -> OrgPushSDK.Statement
  final public func cachedStatement(literal sqlLiteral: OrgPushSDK.SQL) throws -> OrgPushSDK.Statement
  @available(*, deprecated, renamed: "cachedStatement(sql:)")
  final public func cachedSelectStatement(sql: Swift.String) throws -> OrgPushSDK.Statement
  @available(*, deprecated, renamed: "cachedStatement(literal:)")
  final public func cachedSelectStatement(literal sqlLiteral: OrgPushSDK.SQL) throws -> OrgPushSDK.Statement
  @available(*, deprecated, renamed: "makeStatement(sql:)")
  final public func makeUpdateStatement(sql: Swift.String) throws -> OrgPushSDK.Statement
  @available(*, deprecated, renamed: "makeStatement(literal:)")
  final public func makeUpdateStatement(literal sqlLiteral: OrgPushSDK.SQL) throws -> OrgPushSDK.Statement
  @available(*, deprecated, renamed: "cachedStatement(sql:)")
  final public func cachedUpdateStatement(sql: Swift.String) throws -> OrgPushSDK.Statement
  @available(*, deprecated, renamed: "cachedStatement(sql:)")
  final public func cachedUpdateStatement(literal sqlLiteral: OrgPushSDK.SQL) throws -> OrgPushSDK.Statement
  final public func allStatements(sql: Swift.String, arguments: OrgPushSDK.StatementArguments? = nil) throws -> OrgPushSDK.SQLStatementCursor
  final public func allStatements(literal sqlLiteral: OrgPushSDK.SQL) throws -> OrgPushSDK.SQLStatementCursor
  final public func execute(sql: Swift.String, arguments: OrgPushSDK.StatementArguments = StatementArguments()) throws
  final public func execute(literal sqlLiteral: OrgPushSDK.SQL) throws
}
@_hasMissingDesignatedInitializers public class SQLStatementCursor : OrgPushSDK.Cursor {
  public func next() throws -> OrgPushSDK.Statement?
  public typealias Element = OrgPushSDK.Statement
  @objc deinit
}
extension OrgPushSDK.Database {
  @usableFromInline
  final internal func statementWillExecute(_ statement: OrgPushSDK.Statement) throws
  @usableFromInline
  final internal func statementDidExecute(_ statement: OrgPushSDK.Statement) throws
  @usableFromInline
  final internal func statementDidFail(_ statement: OrgPushSDK.Statement, withResultCode resultCode: Swift.Int32) throws -> Swift.Never
}
public struct SQLSelection {
}
public protocol SQLSelectable {
  var sqlSelection: OrgPushSDK.SQLSelection { get }
}
extension OrgPushSDK.SQLSelection : OrgPushSDK.SQLSelectable {
  @available(*, deprecated, message: "Already SQLSelection")
  public var sqlSelection: OrgPushSDK.SQLSelection {
    get
  }
}
public struct AllColumns : OrgPushSDK.SQLSelectable {
  public init()
  public var sqlSelection: OrgPushSDK.SQLSelection {
    get
  }
}
public struct ForeignKey : Swift.Equatable {
  public init(_ originColumns: [Swift.String], to destinationColumns: [Swift.String]? = nil)
  public init(_ originColumns: [OrgPushSDK.ColumnExpression], to destinationColumns: [OrgPushSDK.ColumnExpression]? = nil)
  public static func == (a: OrgPushSDK.ForeignKey, b: OrgPushSDK.ForeignKey) -> Swift.Bool
}
public struct DatabaseRegion : Swift.CustomStringConvertible, Swift.Equatable {
  public var isEmpty: Swift.Bool {
    get
  }
  public var isFullDatabase: Swift.Bool {
    get
  }
  public static let fullDatabase: OrgPushSDK.DatabaseRegion
  public init()
  @available(*, deprecated, message: "In order to specify a table region, prefer `Table(tableName)`")
  public init(table: Swift.String)
  public func union(_ other: OrgPushSDK.DatabaseRegion) -> OrgPushSDK.DatabaseRegion
  public mutating func formUnion(_ other: OrgPushSDK.DatabaseRegion)
}
extension OrgPushSDK.DatabaseRegion {
  public func isModified(byEventsOfKind eventKind: OrgPushSDK.DatabaseEventKind) -> Swift.Bool
  public func isModified(by event: OrgPushSDK.DatabaseEvent) -> Swift.Bool
}
extension OrgPushSDK.DatabaseRegion {
  public static func == (lhs: OrgPushSDK.DatabaseRegion, rhs: OrgPushSDK.DatabaseRegion) -> Swift.Bool
}
extension OrgPushSDK.DatabaseRegion {
  public var description: Swift.String {
    get
  }
}
public protocol DatabaseRegionConvertible {
  func databaseRegion(_ db: OrgPushSDK.Database) throws -> OrgPushSDK.DatabaseRegion
}
extension OrgPushSDK.DatabaseRegionConvertible where Self == OrgPushSDK.DatabaseRegion {
  public static var fullDatabase: OrgPushSDK.DatabaseRegion {
    get
  }
}
extension OrgPushSDK.DatabaseRegion : OrgPushSDK.DatabaseRegionConvertible {
  public func databaseRegion(_ db: OrgPushSDK.Database) throws -> OrgPushSDK.DatabaseRegion
}
public struct AnyDatabaseRegionConvertible : OrgPushSDK.DatabaseRegionConvertible {
  public init(_ region: @escaping (OrgPushSDK.Database) throws -> OrgPushSDK.DatabaseRegion)
  public init(_ region: OrgPushSDK.DatabaseRegionConvertible)
  public func databaseRegion(_ db: OrgPushSDK.Database) throws -> OrgPushSDK.DatabaseRegion
}
final public class DatabaseQueue : OrgPushSDK.DatabaseWriter {
  final public var configuration: OrgPushSDK.Configuration {
    get
  }
  final public var path: Swift.String {
    get
  }
  public init(path: Swift.String, configuration: OrgPushSDK.Configuration = Configuration()) throws
  public init(configuration: OrgPushSDK.Configuration = Configuration())
  @objc deinit
  final public func close() throws
}
extension OrgPushSDK.DatabaseQueue {
  final public func releaseMemory()
}
extension OrgPushSDK.DatabaseQueue {
  final public func interrupt()
  @_disfavoredOverload final public func read<T>(_ value: (OrgPushSDK.Database) throws -> T) throws -> T
  final public func asyncRead(_ value: @escaping (Swift.Result<OrgPushSDK.Database, Swift.Error>) -> Swift.Void)
  final public func _weakAsyncRead(_ value: @escaping (Swift.Result<OrgPushSDK.Database, Swift.Error>?) -> Swift.Void)
  final public func unsafeRead<T>(_ value: (OrgPushSDK.Database) throws -> T) rethrows -> T
  final public func asyncUnsafeRead(_ value: @escaping (Swift.Result<OrgPushSDK.Database, Swift.Error>) -> Swift.Void)
  final public func unsafeReentrantRead<T>(_ value: (OrgPushSDK.Database) throws -> T) rethrows -> T
  final public func concurrentRead<T>(_ value: @escaping (OrgPushSDK.Database) throws -> T) -> OrgPushSDK.DatabaseFuture<T>
  final public func spawnConcurrentRead(_ value: @escaping (Swift.Result<OrgPushSDK.Database, Swift.Error>) -> Swift.Void)
  final public func inTransaction(_ kind: OrgPushSDK.Database.TransactionKind? = nil, _ updates: (OrgPushSDK.Database) throws -> OrgPushSDK.Database.TransactionCompletion) throws
  @_disfavoredOverload final public func writeWithoutTransaction<T>(_ updates: (OrgPushSDK.Database) throws -> T) rethrows -> T
  @_disfavoredOverload final public func barrierWriteWithoutTransaction<T>(_ updates: (OrgPushSDK.Database) throws -> T) rethrows -> T
  final public func asyncBarrierWriteWithoutTransaction(_ updates: @escaping (OrgPushSDK.Database) -> Swift.Void)
  final public func inDatabase<T>(_ updates: (OrgPushSDK.Database) throws -> T) rethrows -> T
  final public func unsafeReentrantWrite<T>(_ updates: (OrgPushSDK.Database) throws -> T) rethrows -> T
  final public func asyncWriteWithoutTransaction(_ updates: @escaping (OrgPushSDK.Database) -> Swift.Void)
  final public func _weakAsyncWriteWithoutTransaction(_ updates: @escaping (OrgPushSDK.Database?) -> Swift.Void)
  final public func _add<Reducer>(observation: OrgPushSDK.ValueObservation<Reducer>, scheduling scheduler: OrgPushSDK.ValueObservationScheduler, onChange: @escaping (Reducer.Value) -> Swift.Void) -> OrgPushSDK.DatabaseCancellable where Reducer : OrgPushSDK.ValueReducer
}
final public class DatabasePool : OrgPushSDK.DatabaseWriter {
  final public var configuration: OrgPushSDK.Configuration {
    get
  }
  final public var path: Swift.String {
    get
  }
  public init(path: Swift.String, configuration: OrgPushSDK.Configuration = Configuration()) throws
  @objc deinit
}
extension OrgPushSDK.DatabasePool {
  final public func releaseMemory()
}
extension OrgPushSDK.DatabasePool : OrgPushSDK.DatabaseReader {
  final public func close() throws
  final public func interrupt()
  @_disfavoredOverload final public func read<T>(_ value: (OrgPushSDK.Database) throws -> T) throws -> T
  final public func asyncRead(_ value: @escaping (Swift.Result<OrgPushSDK.Database, Swift.Error>) -> Swift.Void)
  final public func _weakAsyncRead(_ value: @escaping (Swift.Result<OrgPushSDK.Database, Swift.Error>?) -> Swift.Void)
  @_disfavoredOverload final public func unsafeRead<T>(_ value: (OrgPushSDK.Database) throws -> T) throws -> T
  final public func asyncUnsafeRead(_ value: @escaping (Swift.Result<OrgPushSDK.Database, Swift.Error>) -> Swift.Void)
  final public func unsafeReentrantRead<T>(_ value: (OrgPushSDK.Database) throws -> T) throws -> T
  final public func concurrentRead<T>(_ value: @escaping (OrgPushSDK.Database) throws -> T) -> OrgPushSDK.DatabaseFuture<T>
  final public func spawnConcurrentRead(_ value: @escaping (Swift.Result<OrgPushSDK.Database, Swift.Error>) -> Swift.Void)
  final public func asyncConcurrentRead(_ value: @escaping (Swift.Result<OrgPushSDK.Database, Swift.Error>) -> Swift.Void)
  final public func invalidateReadOnlyConnections()
  @_disfavoredOverload final public func writeWithoutTransaction<T>(_ updates: (OrgPushSDK.Database) throws -> T) rethrows -> T
  @_disfavoredOverload final public func barrierWriteWithoutTransaction<T>(_ updates: (OrgPushSDK.Database) throws -> T) rethrows -> T
  final public func asyncBarrierWriteWithoutTransaction(_ updates: @escaping (OrgPushSDK.Database) -> Swift.Void)
  final public func writeInTransaction(_ kind: OrgPushSDK.Database.TransactionKind? = nil, _ updates: (OrgPushSDK.Database) throws -> OrgPushSDK.Database.TransactionCompletion) throws
  final public func unsafeReentrantWrite<T>(_ updates: (OrgPushSDK.Database) throws -> T) rethrows -> T
  final public func asyncWriteWithoutTransaction(_ updates: @escaping (OrgPushSDK.Database) -> Swift.Void)
  final public func _weakAsyncWriteWithoutTransaction(_ updates: @escaping (OrgPushSDK.Database?) -> Swift.Void)
  final public func _add<Reducer>(observation: OrgPushSDK.ValueObservation<Reducer>, scheduling scheduler: OrgPushSDK.ValueObservationScheduler, onChange: @escaping (Reducer.Value) -> Swift.Void) -> OrgPushSDK.DatabaseCancellable where Reducer : OrgPushSDK.ValueReducer
}
extension OrgPushSDK.DatabasePool {
  final public func makeSnapshot() throws -> OrgPushSDK.DatabaseSnapshot
}
public struct Configuration {
  public var foreignKeysEnabled: Swift.Bool
  public var readonly: Swift.Bool
  public var label: Swift.String?
  public var acceptsDoubleQuotedStringLiterals: Swift.Bool
  public var observesSuspensionNotifications: Swift.Bool
  public var publicStatementArguments: Swift.Bool
  public mutating func prepareDatabase(_ setup: @escaping (OrgPushSDK.Database) throws -> Swift.Void)
  public var defaultTransactionKind: OrgPushSDK.Database.TransactionKind
  public var allowsUnsafeTransactions: Swift.Bool
  public var busyMode: OrgPushSDK.Database.BusyMode
  public var maximumReaderCount: Swift.Int
  public var qos: Dispatch.DispatchQoS
  public var targetQueue: Dispatch.DispatchQueue?
  public var writeTargetQueue: Dispatch.DispatchQueue?
  public init()
}
public protocol _Association {
  var _sqlAssociation: OrgPushSDK._SQLAssociation { get set }
}
public protocol Association : OrgPushSDK.DerivableRequest, OrgPushSDK._Association {
  associatedtype OriginRowDecoder
  func forKey(_ key: Swift.String) -> Self
}
extension OrgPushSDK.Association {
  public func _including(all association: OrgPushSDK._SQLAssociation) -> Self
  public func _including(optional association: OrgPushSDK._SQLAssociation) -> Self
  public func _including(required association: OrgPushSDK._SQLAssociation) -> Self
  public func _joining(optional association: OrgPushSDK._SQLAssociation) -> Self
  public func _joining(required association: OrgPushSDK._SQLAssociation) -> Self
}
extension OrgPushSDK.Association {
  public func forKey(_ codingKey: Swift.CodingKey) -> Self
  public func aliased(_ alias: OrgPushSDK.TableAlias) -> Self
}
extension OrgPushSDK.Association {
  public func select(_ selection: @escaping (OrgPushSDK.Database) throws -> [OrgPushSDK.SQLSelectable]) -> Self
  public func annotated(with selection: @escaping (OrgPushSDK.Database) throws -> [OrgPushSDK.SQLSelectable]) -> Self
}
extension OrgPushSDK.Association {
  public func filter(_ predicate: @escaping (OrgPushSDK.Database) throws -> OrgPushSDK.SQLExpressible) -> Self
}
extension OrgPushSDK.Association {
  public func order(_ orderings: @escaping (OrgPushSDK.Database) throws -> [OrgPushSDK.SQLOrderingTerm]) -> Self
  public func reversed() -> Self
  public func unordered() -> Self
}
extension OrgPushSDK.Association {
  public var databaseTableName: Swift.String {
    get
  }
}
extension OrgPushSDK.Association {
  public func group(_ expressions: @escaping (OrgPushSDK.Database) throws -> [OrgPushSDK.SQLExpressible]) -> Self
  public func having(_ predicate: @escaping (OrgPushSDK.Database) throws -> OrgPushSDK.SQLExpressible) -> Self
}
extension OrgPushSDK.Association {
  public func distinct() -> Self
  public func limit(_ limit: Swift.Int, offset: Swift.Int? = nil) -> Self
  public func with<RowDecoder>(_ cte: OrgPushSDK.CommonTableExpression<RowDecoder>) -> Self
}
public protocol AssociationToOne : OrgPushSDK.Association {
}
extension OrgPushSDK.AssociationToOne {
  public func forKey(_ key: Swift.String) -> Self
}
public protocol AssociationToMany : OrgPushSDK.Association {
}
extension OrgPushSDK.AssociationToMany {
  public func forKey(_ key: Swift.String) -> Self
}
public enum ReachabilityError : Swift.Error {
  case failedToCreateWithAddress(Darwin.sockaddr, Swift.Int32)
  case failedToCreateWithHostname(Swift.String, Swift.Int32)
  case unableToSetCallback(Swift.Int32)
  case unableToSetDispatchQueue(Swift.Int32)
  case unableToGetFlags(Swift.Int32)
}
@available(*, unavailable, renamed: "Notification.Name.reachabilityChanged")
public let ReachabilityChangedNotification: Foundation.NSNotification.Name
extension Foundation.NSNotification.Name {
  public static let reachabilityChanged: Foundation.Notification.Name
}
public class Reachability {
  public typealias NetworkReachable = (OrgPushSDK.Reachability) -> ()
  public typealias NetworkUnreachable = (OrgPushSDK.Reachability) -> ()
  @available(*, unavailable, renamed: "Connection")
  public enum NetworkStatus : Swift.CustomStringConvertible, Swift.Hashable {
    case notReachable, reachableViaWiFi, reachableViaWWAN
    public var description: Swift.String {
      get
    }
    public static func == (a: OrgPushSDK.Reachability.NetworkStatus, b: OrgPushSDK.Reachability.NetworkStatus) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Connection : Swift.CustomStringConvertible {
    case unavailable, wifi, cellular
    public var description: Swift.String {
      get
    }
    @available(*, deprecated, renamed: "unavailable")
    public static let none: OrgPushSDK.Reachability.Connection
    public static func == (a: OrgPushSDK.Reachability.Connection, b: OrgPushSDK.Reachability.Connection) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var whenReachable: OrgPushSDK.Reachability.NetworkReachable?
  public var whenUnreachable: OrgPushSDK.Reachability.NetworkUnreachable?
  @available(*, deprecated, renamed: "allowsCellularConnection")
  final public let reachableOnWWAN: Swift.Bool
  public var allowsCellularConnection: Swift.Bool
  public var notificationCenter: Foundation.NotificationCenter
  @available(*, deprecated, renamed: "connection.description")
  public var currentReachabilityString: Swift.String {
    get
  }
  @available(*, unavailable, renamed: "connection")
  public var currentReachabilityStatus: OrgPushSDK.Reachability.Connection {
    get
  }
  public var connection: OrgPushSDK.Reachability.Connection {
    get
  }
  required public init(reachabilityRef: SystemConfiguration.SCNetworkReachability, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main)
  convenience public init(hostname: Swift.String, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main) throws
  convenience public init(queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main) throws
  @objc deinit
}
extension OrgPushSDK.Reachability {
  public func startNotifier() throws
  public func stopNotifier()
  @available(*, deprecated, message: "Please use `connection != .none`")
  public var isReachable: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Please use `connection == .cellular`")
  public var isReachableViaWWAN: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Please use `connection == .wifi`")
  public var isReachableViaWiFi: Swift.Bool {
    get
  }
  public var description: Swift.String {
    get
  }
}
extension Foundation.NSUUID : OrgPushSDK.DatabaseValueConvertible {
  public var databaseValue: OrgPushSDK.DatabaseValue {
    get
  }
  public static func fromDatabaseValue(_ dbValue: OrgPushSDK.DatabaseValue) -> Self?
}
extension Foundation.UUID : OrgPushSDK.DatabaseValueConvertible {
  public var databaseValue: OrgPushSDK.DatabaseValue {
    get
  }
  public static func fromDatabaseValue(_ dbValue: OrgPushSDK.DatabaseValue) -> Foundation.UUID?
}
extension Foundation.UUID : OrgPushSDK.StatementColumnConvertible {
  @inline(__always) @inlinable public init?(sqliteStatement: OrgPushSDK.SQLiteStatement, index: Swift.Int32) {
        switch sqlite3_column_type(sqliteStatement, index) {
        case SQLITE_TEXT:
            let string = String(cString: sqlite3_column_text(sqliteStatement, index)!)
            guard let uuid = UUID(uuidString: string) else {
                return nil
            }
            self.init(uuid: uuid.uuid)
        case SQLITE_BLOB:
            guard sqlite3_column_bytes(sqliteStatement, index) == 16,
                  let blob = sqlite3_column_blob(sqliteStatement, index) else
            {
                return nil
            }
            self.init(uuid: blob.assumingMemoryBound(to: uuid_t.self).pointee)
        default:
            return nil
        }
    }
}
public func == (lhs: OrgPushSDK.SQLSpecificExpressible, rhs: OrgPushSDK.SQLExpressible?) -> OrgPushSDK.SQLExpression
public func == (lhs: OrgPushSDK.SQLSpecificExpressible, rhs: Swift.Bool) -> OrgPushSDK.SQLExpression
public func == (lhs: OrgPushSDK.SQLExpressible?, rhs: OrgPushSDK.SQLSpecificExpressible) -> OrgPushSDK.SQLExpression
public func == (lhs: Swift.Bool, rhs: OrgPushSDK.SQLSpecificExpressible) -> OrgPushSDK.SQLExpression
public func == (lhs: OrgPushSDK.SQLSpecificExpressible, rhs: OrgPushSDK.SQLSpecificExpressible) -> OrgPushSDK.SQLExpression
public func != (lhs: OrgPushSDK.SQLSpecificExpressible, rhs: OrgPushSDK.SQLExpressible?) -> OrgPushSDK.SQLExpression
public func != (lhs: OrgPushSDK.SQLSpecificExpressible, rhs: Swift.Bool) -> OrgPushSDK.SQLExpression
public func != (lhs: OrgPushSDK.SQLExpressible?, rhs: OrgPushSDK.SQLSpecificExpressible) -> OrgPushSDK.SQLExpression
public func != (lhs: Swift.Bool, rhs: OrgPushSDK.SQLSpecificExpressible) -> OrgPushSDK.SQLExpression
public func != (lhs: OrgPushSDK.SQLSpecificExpressible, rhs: OrgPushSDK.SQLSpecificExpressible) -> OrgPushSDK.SQLExpression
public func === (lhs: OrgPushSDK.SQLSpecificExpressible, rhs: OrgPushSDK.SQLExpressible?) -> OrgPushSDK.SQLExpression
public func === (lhs: OrgPushSDK.SQLExpressible?, rhs: OrgPushSDK.SQLSpecificExpressible) -> OrgPushSDK.SQLExpression
public func === (lhs: OrgPushSDK.SQLSpecificExpressible, rhs: OrgPushSDK.SQLSpecificExpressible) -> OrgPushSDK.SQLExpression
public func !== (lhs: OrgPushSDK.SQLSpecificExpressible, rhs: OrgPushSDK.SQLExpressible?) -> OrgPushSDK.SQLExpression
public func !== (lhs: OrgPushSDK.SQLExpressible?, rhs: OrgPushSDK.SQLSpecificExpressible) -> OrgPushSDK.SQLExpression
public func !== (lhs: OrgPushSDK.SQLSpecificExpressible, rhs: OrgPushSDK.SQLSpecificExpressible) -> OrgPushSDK.SQLExpression
public func < (lhs: OrgPushSDK.SQLSpecificExpressible, rhs: OrgPushSDK.SQLExpressible) -> OrgPushSDK.SQLExpression
public func < (lhs: OrgPushSDK.SQLExpressible, rhs: OrgPushSDK.SQLSpecificExpressible) -> OrgPushSDK.SQLExpression
public func < (lhs: OrgPushSDK.SQLSpecificExpressible, rhs: OrgPushSDK.SQLSpecificExpressible) -> OrgPushSDK.SQLExpression
public func <= (lhs: OrgPushSDK.SQLSpecificExpressible, rhs: OrgPushSDK.SQLExpressible) -> OrgPushSDK.SQLExpression
public func <= (lhs: OrgPushSDK.SQLExpressible, rhs: OrgPushSDK.SQLSpecificExpressible) -> OrgPushSDK.SQLExpression
public func <= (lhs: OrgPushSDK.SQLSpecificExpressible, rhs: OrgPushSDK.SQLSpecificExpressible) -> OrgPushSDK.SQLExpression
public func > (lhs: OrgPushSDK.SQLSpecificExpressible, rhs: OrgPushSDK.SQLExpressible) -> OrgPushSDK.SQLExpression
public func > (lhs: OrgPushSDK.SQLExpressible, rhs: OrgPushSDK.SQLSpecificExpressible) -> OrgPushSDK.SQLExpression
public func > (lhs: OrgPushSDK.SQLSpecificExpressible, rhs: OrgPushSDK.SQLSpecificExpressible) -> OrgPushSDK.SQLExpression
public func >= (lhs: OrgPushSDK.SQLSpecificExpressible, rhs: OrgPushSDK.SQLExpressible) -> OrgPushSDK.SQLExpression
public func >= (lhs: OrgPushSDK.SQLExpressible, rhs: OrgPushSDK.SQLSpecificExpressible) -> OrgPushSDK.SQLExpression
public func >= (lhs: OrgPushSDK.SQLSpecificExpressible, rhs: OrgPushSDK.SQLSpecificExpressible) -> OrgPushSDK.SQLExpression
extension Swift.Range where Bound : OrgPushSDK.SQLExpressible {
  public func contains(_ element: OrgPushSDK.SQLSpecificExpressible) -> OrgPushSDK.SQLExpression
}
extension Swift.ClosedRange where Bound : OrgPushSDK.SQLExpressible {
  public func contains(_ element: OrgPushSDK.SQLSpecificExpressible) -> OrgPushSDK.SQLExpression
}
extension Swift.CountableRange where Bound : OrgPushSDK.SQLExpressible, Bound : Swift.Strideable, Bound.Stride : Swift.SignedInteger {
  public func contains(_ element: OrgPushSDK.SQLSpecificExpressible) -> OrgPushSDK.SQLExpression
}
extension Swift.CountableClosedRange where Bound : OrgPushSDK.SQLExpressible, Bound : Swift.Strideable, Bound.Stride : Swift.SignedInteger {
  public func contains(_ element: OrgPushSDK.SQLSpecificExpressible) -> OrgPushSDK.SQLExpression
}
extension Swift.Sequence where Self.Element : OrgPushSDK.SQLExpressible {
  public func contains(_ element: OrgPushSDK.SQLSpecificExpressible) -> OrgPushSDK.SQLExpression
}
extension Swift.Sequence where Self.Element == OrgPushSDK.SQLExpressible {
  public func contains(_ element: OrgPushSDK.SQLSpecificExpressible) -> OrgPushSDK.SQLExpression
}
public func * (lhs: OrgPushSDK.SQLSpecificExpressible, rhs: OrgPushSDK.SQLExpressible) -> OrgPushSDK.SQLExpression
public func * (lhs: OrgPushSDK.SQLExpressible, rhs: OrgPushSDK.SQLSpecificExpressible) -> OrgPushSDK.SQLExpression
public func * (lhs: OrgPushSDK.SQLSpecificExpressible, rhs: OrgPushSDK.SQLSpecificExpressible) -> OrgPushSDK.SQLExpression
public func / (lhs: OrgPushSDK.SQLSpecificExpressible, rhs: OrgPushSDK.SQLExpressible) -> OrgPushSDK.SQLExpression
public func / (lhs: OrgPushSDK.SQLExpressible, rhs: OrgPushSDK.SQLSpecificExpressible) -> OrgPushSDK.SQLExpression
public func / (lhs: OrgPushSDK.SQLSpecificExpressible, rhs: OrgPushSDK.SQLSpecificExpressible) -> OrgPushSDK.SQLExpression
public func + (lhs: OrgPushSDK.SQLSpecificExpressible, rhs: OrgPushSDK.SQLExpressible) -> OrgPushSDK.SQLExpression
public func + (lhs: OrgPushSDK.SQLExpressible, rhs: OrgPushSDK.SQLSpecificExpressible) -> OrgPushSDK.SQLExpression
public func + (lhs: OrgPushSDK.SQLSpecificExpressible, rhs: OrgPushSDK.SQLSpecificExpressible) -> OrgPushSDK.SQLExpression
prefix public func - (value: OrgPushSDK.SQLSpecificExpressible) -> OrgPushSDK.SQLExpression
public func - (lhs: OrgPushSDK.SQLSpecificExpressible, rhs: OrgPushSDK.SQLExpressible) -> OrgPushSDK.SQLExpression
public func - (lhs: OrgPushSDK.SQLExpressible, rhs: OrgPushSDK.SQLSpecificExpressible) -> OrgPushSDK.SQLExpression
public func - (lhs: OrgPushSDK.SQLSpecificExpressible, rhs: OrgPushSDK.SQLSpecificExpressible) -> OrgPushSDK.SQLExpression
public func && (lhs: OrgPushSDK.SQLSpecificExpressible, rhs: OrgPushSDK.SQLExpressible) -> OrgPushSDK.SQLExpression
public func && (lhs: OrgPushSDK.SQLExpressible, rhs: OrgPushSDK.SQLSpecificExpressible) -> OrgPushSDK.SQLExpression
public func && (lhs: OrgPushSDK.SQLSpecificExpressible, rhs: OrgPushSDK.SQLSpecificExpressible) -> OrgPushSDK.SQLExpression
public func || (lhs: OrgPushSDK.SQLSpecificExpressible, rhs: OrgPushSDK.SQLExpressible) -> OrgPushSDK.SQLExpression
public func || (lhs: OrgPushSDK.SQLExpressible, rhs: OrgPushSDK.SQLSpecificExpressible) -> OrgPushSDK.SQLExpression
public func || (lhs: OrgPushSDK.SQLSpecificExpressible, rhs: OrgPushSDK.SQLSpecificExpressible) -> OrgPushSDK.SQLExpression
prefix public func ! (value: OrgPushSDK.SQLSpecificExpressible) -> OrgPushSDK.SQLExpression
extension OrgPushSDK.SQLSpecificExpressible {
  public func like(_ pattern: OrgPushSDK.SQLExpressible, escape: OrgPushSDK.SQLExpressible? = nil) -> OrgPushSDK.SQLExpression
}
extension OrgPushSDK.Database {
  final public func clearSchemaCache()
  final public func tableExists(_ name: Swift.String) throws -> Swift.Bool
  public static func isSQLiteInternalTable(_ tableName: Swift.String) -> Swift.Bool
  @available(*, deprecated, message: "Use Database.isSQLiteInternalTable(_:) static method instead.")
  final public func isSQLiteInternalTable(_ tableName: Swift.String) -> Swift.Bool
  public static func isGRDBInternalTable(_ tableName: Swift.String) -> Swift.Bool
  @available(*, deprecated, message: "Use Database.isGRDBInternalTable(_:) static method instead.")
  final public func isGRDBInternalTable(_ tableName: Swift.String) -> Swift.Bool
  final public func viewExists(_ name: Swift.String) throws -> Swift.Bool
  final public func triggerExists(_ name: Swift.String) throws -> Swift.Bool
  final public func primaryKey(_ tableName: Swift.String) throws -> OrgPushSDK.PrimaryKeyInfo
  final public func indexes(on tableName: Swift.String) throws -> [OrgPushSDK.IndexInfo]
  final public func table<T>(_ tableName: Swift.String, hasUniqueKey columns: T) throws -> Swift.Bool where T : Swift.Sequence, T.Element == Swift.String
  final public func foreignKeys(on tableName: Swift.String) throws -> [OrgPushSDK.ForeignKeyInfo]
  final public func foreignKeyViolations() throws -> OrgPushSDK.RecordCursor<OrgPushSDK.ForeignKeyViolation>
  final public func foreignKeyViolations(in tableName: Swift.String) throws -> OrgPushSDK.RecordCursor<OrgPushSDK.ForeignKeyViolation>
  final public func checkForeignKeys() throws
  final public func checkForeignKeys(in tableName: Swift.String) throws
}
extension OrgPushSDK.Database {
  final public func columns(in tableName: Swift.String) throws -> [OrgPushSDK.ColumnInfo]
}
public struct ColumnInfo : OrgPushSDK.FetchableRecord {
  public let name: Swift.String
  public let type: Swift.String
  public let isNotNull: Swift.Bool
  public let defaultValueSQL: Swift.String?
  public let primaryKeyIndex: Swift.Int
  public init(row: OrgPushSDK.Row)
}
public struct IndexInfo {
  public let name: Swift.String
  public let columns: [Swift.String]
  public let isUnique: Swift.Bool
}
public struct ForeignKeyViolation : OrgPushSDK.FetchableRecord, Swift.CustomStringConvertible {
  public var originTable: Swift.String
  public var originRowID: Swift.Int64?
  public var destinationTable: Swift.String
  public var foreignKeyId: Swift.Int
  public init(row: OrgPushSDK.Row)
  public var description: Swift.String {
    get
  }
  public func failureDescription(_ db: OrgPushSDK.Database) throws -> Swift.String
  public func databaseError(_ db: OrgPushSDK.Database) -> OrgPushSDK.DatabaseError
}
public struct PrimaryKeyInfo {
  public var columns: [Swift.String] {
    get
  }
  public var rowIDColumn: Swift.String? {
    get
  }
  public var isRowID: Swift.Bool {
    get
  }
}
public struct ForeignKeyInfo {
  public var id: Swift.Int
  public let destinationTable: Swift.String
  public let mapping: [(origin: Swift.String, destination: Swift.String)]
  public var originColumns: [Swift.String] {
    get
  }
  public var destinationColumns: [Swift.String] {
    get
  }
}
extension Foundation.NSURL : OrgPushSDK.DatabaseValueConvertible {
  public var databaseValue: OrgPushSDK.DatabaseValue {
    get
  }
  public static func fromDatabaseValue(_ dbValue: OrgPushSDK.DatabaseValue) -> Self?
}
extension Foundation.URL : OrgPushSDK.DatabaseValueConvertible {
}
public struct ResultCode : Swift.RawRepresentable, Swift.Equatable, Swift.CustomStringConvertible {
  public let rawValue: Swift.CInt
  public init(rawValue: Swift.CInt)
  public var primaryResultCode: OrgPushSDK.ResultCode {
    get
  }
  public static func ~= (pattern: OrgPushSDK.ResultCode, code: OrgPushSDK.ResultCode) -> Swift.Bool
  public static let SQLITE_OK: OrgPushSDK.ResultCode
  public static let SQLITE_ERROR: OrgPushSDK.ResultCode
  public static let SQLITE_INTERNAL: OrgPushSDK.ResultCode
  public static let SQLITE_PERM: OrgPushSDK.ResultCode
  public static let SQLITE_ABORT: OrgPushSDK.ResultCode
  public static let SQLITE_BUSY: OrgPushSDK.ResultCode
  public static let SQLITE_LOCKED: OrgPushSDK.ResultCode
  public static let SQLITE_NOMEM: OrgPushSDK.ResultCode
  public static let SQLITE_READONLY: OrgPushSDK.ResultCode
  public static let SQLITE_INTERRUPT: OrgPushSDK.ResultCode
  public static let SQLITE_IOERR: OrgPushSDK.ResultCode
  public static let SQLITE_CORRUPT: OrgPushSDK.ResultCode
  public static let SQLITE_NOTFOUND: OrgPushSDK.ResultCode
  public static let SQLITE_FULL: OrgPushSDK.ResultCode
  public static let SQLITE_CANTOPEN: OrgPushSDK.ResultCode
  public static let SQLITE_PROTOCOL: OrgPushSDK.ResultCode
  public static let SQLITE_EMPTY: OrgPushSDK.ResultCode
  public static let SQLITE_SCHEMA: OrgPushSDK.ResultCode
  public static let SQLITE_TOOBIG: OrgPushSDK.ResultCode
  public static let SQLITE_CONSTRAINT: OrgPushSDK.ResultCode
  public static let SQLITE_MISMATCH: OrgPushSDK.ResultCode
  public static let SQLITE_MISUSE: OrgPushSDK.ResultCode
  public static let SQLITE_NOLFS: OrgPushSDK.ResultCode
  public static let SQLITE_AUTH: OrgPushSDK.ResultCode
  public static let SQLITE_FORMAT: OrgPushSDK.ResultCode
  public static let SQLITE_RANGE: OrgPushSDK.ResultCode
  public static let SQLITE_NOTADB: OrgPushSDK.ResultCode
  public static let SQLITE_NOTICE: OrgPushSDK.ResultCode
  public static let SQLITE_WARNING: OrgPushSDK.ResultCode
  public static let SQLITE_ROW: OrgPushSDK.ResultCode
  public static let SQLITE_DONE: OrgPushSDK.ResultCode
  public static let SQLITE_ERROR_MISSING_COLLSEQ: OrgPushSDK.ResultCode
  public static let SQLITE_ERROR_RETRY: OrgPushSDK.ResultCode
  public static let SQLITE_ERROR_SNAPSHOT: OrgPushSDK.ResultCode
  public static let SQLITE_IOERR_READ: OrgPushSDK.ResultCode
  public static let SQLITE_IOERR_SHORT_READ: OrgPushSDK.ResultCode
  public static let SQLITE_IOERR_WRITE: OrgPushSDK.ResultCode
  public static let SQLITE_IOERR_FSYNC: OrgPushSDK.ResultCode
  public static let SQLITE_IOERR_DIR_FSYNC: OrgPushSDK.ResultCode
  public static let SQLITE_IOERR_TRUNCATE: OrgPushSDK.ResultCode
  public static let SQLITE_IOERR_FSTAT: OrgPushSDK.ResultCode
  public static let SQLITE_IOERR_UNLOCK: OrgPushSDK.ResultCode
  public static let SQLITE_IOERR_RDLOCK: OrgPushSDK.ResultCode
  public static let SQLITE_IOERR_DELETE: OrgPushSDK.ResultCode
  public static let SQLITE_IOERR_BLOCKED: OrgPushSDK.ResultCode
  public static let SQLITE_IOERR_NOMEM: OrgPushSDK.ResultCode
  public static let SQLITE_IOERR_ACCESS: OrgPushSDK.ResultCode
  public static let SQLITE_IOERR_CHECKRESERVEDLOCK: OrgPushSDK.ResultCode
  public static let SQLITE_IOERR_LOCK: OrgPushSDK.ResultCode
  public static let SQLITE_IOERR_CLOSE: OrgPushSDK.ResultCode
  public static let SQLITE_IOERR_DIR_CLOSE: OrgPushSDK.ResultCode
  public static let SQLITE_IOERR_SHMOPEN: OrgPushSDK.ResultCode
  public static let SQLITE_IOERR_SHMSIZE: OrgPushSDK.ResultCode
  public static let SQLITE_IOERR_SHMLOCK: OrgPushSDK.ResultCode
  public static let SQLITE_IOERR_SHMMAP: OrgPushSDK.ResultCode
  public static let SQLITE_IOERR_SEEK: OrgPushSDK.ResultCode
  public static let SQLITE_IOERR_DELETE_NOENT: OrgPushSDK.ResultCode
  public static let SQLITE_IOERR_MMAP: OrgPushSDK.ResultCode
  public static let SQLITE_IOERR_GETTEMPPATH: OrgPushSDK.ResultCode
  public static let SQLITE_IOERR_CONVPATH: OrgPushSDK.ResultCode
  public static let SQLITE_IOERR_VNODE: OrgPushSDK.ResultCode
  public static let SQLITE_IOERR_AUTH: OrgPushSDK.ResultCode
  public static let SQLITE_IOERR_BEGIN_ATOMIC: OrgPushSDK.ResultCode
  public static let SQLITE_IOERR_COMMIT_ATOMIC: OrgPushSDK.ResultCode
  public static let SQLITE_IOERR_ROLLBACK_ATOMIC: OrgPushSDK.ResultCode
  public static let SQLITE_IOERR_DATA: OrgPushSDK.ResultCode
  public static let SQLITE_IOERR_CORRUPTFS: OrgPushSDK.ResultCode
  public static let SQLITE_LOCKED_SHAREDCACHE: OrgPushSDK.ResultCode
  public static let SQLITE_LOCKED_VTAB: OrgPushSDK.ResultCode
  public static let SQLITE_BUSY_RECOVERY: OrgPushSDK.ResultCode
  public static let SQLITE_BUSY_SNAPSHOT: OrgPushSDK.ResultCode
  public static let SQLITE_BUSY_TIMEOUT: OrgPushSDK.ResultCode
  public static let SQLITE_CANTOPEN_NOTEMPDIR: OrgPushSDK.ResultCode
  public static let SQLITE_CANTOPEN_ISDIR: OrgPushSDK.ResultCode
  public static let SQLITE_CANTOPEN_FULLPATH: OrgPushSDK.ResultCode
  public static let SQLITE_CANTOPEN_CONVPATH: OrgPushSDK.ResultCode
  public static let SQLITE_CANTOPEN_DIRTYWAL: OrgPushSDK.ResultCode
  public static let SQLITE_CANTOPEN_SYMLINK: OrgPushSDK.ResultCode
  public static let SQLITE_CORRUPT_VTAB: OrgPushSDK.ResultCode
  public static let SQLITE_CORRUPT_SEQUENCE: OrgPushSDK.ResultCode
  public static let SQLITE_CORRUPT_INDEX: OrgPushSDK.ResultCode
  public static let SQLITE_READONLY_RECOVERY: OrgPushSDK.ResultCode
  public static let SQLITE_READONLY_CANTLOCK: OrgPushSDK.ResultCode
  public static let SQLITE_READONLY_ROLLBACK: OrgPushSDK.ResultCode
  public static let SQLITE_READONLY_DBMOVED: OrgPushSDK.ResultCode
  public static let SQLITE_READONLY_CANTINIT: OrgPushSDK.ResultCode
  public static let SQLITE_READONLY_DIRECTORY: OrgPushSDK.ResultCode
  public static let SQLITE_ABORT_ROLLBACK: OrgPushSDK.ResultCode
  public static let SQLITE_CONSTRAINT_CHECK: OrgPushSDK.ResultCode
  public static let SQLITE_CONSTRAINT_COMMITHOOK: OrgPushSDK.ResultCode
  public static let SQLITE_CONSTRAINT_FOREIGNKEY: OrgPushSDK.ResultCode
  public static let SQLITE_CONSTRAINT_FUNCTION: OrgPushSDK.ResultCode
  public static let SQLITE_CONSTRAINT_NOTNULL: OrgPushSDK.ResultCode
  public static let SQLITE_CONSTRAINT_PRIMARYKEY: OrgPushSDK.ResultCode
  public static let SQLITE_CONSTRAINT_TRIGGER: OrgPushSDK.ResultCode
  public static let SQLITE_CONSTRAINT_UNIQUE: OrgPushSDK.ResultCode
  public static let SQLITE_CONSTRAINT_VTAB: OrgPushSDK.ResultCode
  public static let SQLITE_CONSTRAINT_ROWID: OrgPushSDK.ResultCode
  public static let SQLITE_CONSTRAINT_PINNED: OrgPushSDK.ResultCode
  public static let SQLITE_CONSTRAINT_DATATYPE: OrgPushSDK.ResultCode
  public static let SQLITE_NOTICE_RECOVER_WAL: OrgPushSDK.ResultCode
  public static let SQLITE_NOTICE_RECOVER_ROLLBACK: OrgPushSDK.ResultCode
  public static let SQLITE_WARNING_AUTOINDEX: OrgPushSDK.ResultCode
  public static let SQLITE_AUTH_USER: OrgPushSDK.ResultCode
  public static let SQLITE_OK_LOAD_PERMANENTLY: OrgPushSDK.ResultCode
  public static let SQLITE_OK_SYMLINK: OrgPushSDK.ResultCode
  public typealias RawValue = Swift.CInt
}
extension OrgPushSDK.ResultCode {
  public static func ~= (lhs: OrgPushSDK.ResultCode, rhs: Swift.Error) -> Swift.Bool
}
extension OrgPushSDK.ResultCode {
  public var description: Swift.String {
    get
  }
}
extension OrgPushSDK.ResultCode : OrgPushSDK.GRDBSendable {
}
public struct DatabaseError : Swift.Error, Swift.CustomStringConvertible, Foundation.CustomNSError {
  public var resultCode: OrgPushSDK.ResultCode {
    get
  }
  public let extendedResultCode: OrgPushSDK.ResultCode
  public let message: Swift.String?
  public let sql: Swift.String?
  public let arguments: OrgPushSDK.StatementArguments?
  public init(resultCode: OrgPushSDK.ResultCode = .SQLITE_ERROR, message: Swift.String? = nil, sql: Swift.String? = nil, arguments: OrgPushSDK.StatementArguments? = nil, publicStatementArguments: Swift.Bool = false)
  @usableFromInline
  internal init(resultCode: Swift.CInt, message: Swift.String? = nil, sql: Swift.String? = nil)
  @usableFromInline
  internal init(resultCode: Swift.CInt, message: Swift.String? = nil, sql: Swift.String? = nil, arguments: OrgPushSDK.StatementArguments?, publicStatementArguments: Swift.Bool)
}
extension OrgPushSDK.DatabaseError {
  public static let SQLITE_OK: OrgPushSDK.ResultCode
  public static let SQLITE_ERROR: OrgPushSDK.ResultCode
  public static let SQLITE_INTERNAL: OrgPushSDK.ResultCode
  public static let SQLITE_PERM: OrgPushSDK.ResultCode
  public static let SQLITE_ABORT: OrgPushSDK.ResultCode
  public static let SQLITE_BUSY: OrgPushSDK.ResultCode
  public static let SQLITE_LOCKED: OrgPushSDK.ResultCode
  public static let SQLITE_NOMEM: OrgPushSDK.ResultCode
  public static let SQLITE_READONLY: OrgPushSDK.ResultCode
  public static let SQLITE_INTERRUPT: OrgPushSDK.ResultCode
  public static let SQLITE_IOERR: OrgPushSDK.ResultCode
  public static let SQLITE_CORRUPT: OrgPushSDK.ResultCode
  public static let SQLITE_NOTFOUND: OrgPushSDK.ResultCode
  public static let SQLITE_FULL: OrgPushSDK.ResultCode
  public static let SQLITE_CANTOPEN: OrgPushSDK.ResultCode
  public static let SQLITE_PROTOCOL: OrgPushSDK.ResultCode
  public static let SQLITE_EMPTY: OrgPushSDK.ResultCode
  public static let SQLITE_SCHEMA: OrgPushSDK.ResultCode
  public static let SQLITE_TOOBIG: OrgPushSDK.ResultCode
  public static let SQLITE_CONSTRAINT: OrgPushSDK.ResultCode
  public static let SQLITE_MISMATCH: OrgPushSDK.ResultCode
  public static let SQLITE_MISUSE: OrgPushSDK.ResultCode
  public static let SQLITE_NOLFS: OrgPushSDK.ResultCode
  public static let SQLITE_AUTH: OrgPushSDK.ResultCode
  public static let SQLITE_FORMAT: OrgPushSDK.ResultCode
  public static let SQLITE_RANGE: OrgPushSDK.ResultCode
  public static let SQLITE_NOTADB: OrgPushSDK.ResultCode
  public static let SQLITE_NOTICE: OrgPushSDK.ResultCode
  public static let SQLITE_WARNING: OrgPushSDK.ResultCode
  public static let SQLITE_ROW: OrgPushSDK.ResultCode
  public static let SQLITE_DONE: OrgPushSDK.ResultCode
  public static let SQLITE_ERROR_MISSING_COLLSEQ: OrgPushSDK.ResultCode
  public static let SQLITE_ERROR_RETRY: OrgPushSDK.ResultCode
  public static let SQLITE_ERROR_SNAPSHOT: OrgPushSDK.ResultCode
  public static let SQLITE_IOERR_READ: OrgPushSDK.ResultCode
  public static let SQLITE_IOERR_SHORT_READ: OrgPushSDK.ResultCode
  public static let SQLITE_IOERR_WRITE: OrgPushSDK.ResultCode
  public static let SQLITE_IOERR_FSYNC: OrgPushSDK.ResultCode
  public static let SQLITE_IOERR_DIR_FSYNC: OrgPushSDK.ResultCode
  public static let SQLITE_IOERR_TRUNCATE: OrgPushSDK.ResultCode
  public static let SQLITE_IOERR_FSTAT: OrgPushSDK.ResultCode
  public static let SQLITE_IOERR_UNLOCK: OrgPushSDK.ResultCode
  public static let SQLITE_IOERR_RDLOCK: OrgPushSDK.ResultCode
  public static let SQLITE_IOERR_DELETE: OrgPushSDK.ResultCode
  public static let SQLITE_IOERR_BLOCKED: OrgPushSDK.ResultCode
  public static let SQLITE_IOERR_NOMEM: OrgPushSDK.ResultCode
  public static let SQLITE_IOERR_ACCESS: OrgPushSDK.ResultCode
  public static let SQLITE_IOERR_CHECKRESERVEDLOCK: OrgPushSDK.ResultCode
  public static let SQLITE_IOERR_LOCK: OrgPushSDK.ResultCode
  public static let SQLITE_IOERR_CLOSE: OrgPushSDK.ResultCode
  public static let SQLITE_IOERR_DIR_CLOSE: OrgPushSDK.ResultCode
  public static let SQLITE_IOERR_SHMOPEN: OrgPushSDK.ResultCode
  public static let SQLITE_IOERR_SHMSIZE: OrgPushSDK.ResultCode
  public static let SQLITE_IOERR_SHMLOCK: OrgPushSDK.ResultCode
  public static let SQLITE_IOERR_SHMMAP: OrgPushSDK.ResultCode
  public static let SQLITE_IOERR_SEEK: OrgPushSDK.ResultCode
  public static let SQLITE_IOERR_DELETE_NOENT: OrgPushSDK.ResultCode
  public static let SQLITE_IOERR_MMAP: OrgPushSDK.ResultCode
  public static let SQLITE_IOERR_GETTEMPPATH: OrgPushSDK.ResultCode
  public static let SQLITE_IOERR_CONVPATH: OrgPushSDK.ResultCode
  public static let SQLITE_IOERR_VNODE: OrgPushSDK.ResultCode
  public static let SQLITE_IOERR_AUTH: OrgPushSDK.ResultCode
  public static let SQLITE_IOERR_BEGIN_ATOMIC: OrgPushSDK.ResultCode
  public static let SQLITE_IOERR_COMMIT_ATOMIC: OrgPushSDK.ResultCode
  public static let SQLITE_IOERR_ROLLBACK_ATOMIC: OrgPushSDK.ResultCode
  public static let SQLITE_IOERR_DATA: OrgPushSDK.ResultCode
  public static let SQLITE_IOERR_CORRUPTFS: OrgPushSDK.ResultCode
  public static let SQLITE_LOCKED_SHAREDCACHE: OrgPushSDK.ResultCode
  public static let SQLITE_LOCKED_VTAB: OrgPushSDK.ResultCode
  public static let SQLITE_BUSY_RECOVERY: OrgPushSDK.ResultCode
  public static let SQLITE_BUSY_SNAPSHOT: OrgPushSDK.ResultCode
  public static let SQLITE_BUSY_TIMEOUT: OrgPushSDK.ResultCode
  public static let SQLITE_CANTOPEN_NOTEMPDIR: OrgPushSDK.ResultCode
  public static let SQLITE_CANTOPEN_ISDIR: OrgPushSDK.ResultCode
  public static let SQLITE_CANTOPEN_FULLPATH: OrgPushSDK.ResultCode
  public static let SQLITE_CANTOPEN_CONVPATH: OrgPushSDK.ResultCode
  public static let SQLITE_CANTOPEN_DIRTYWAL: OrgPushSDK.ResultCode
  public static let SQLITE_CANTOPEN_SYMLINK: OrgPushSDK.ResultCode
  public static let SQLITE_CORRUPT_VTAB: OrgPushSDK.ResultCode
  public static let SQLITE_CORRUPT_SEQUENCE: OrgPushSDK.ResultCode
  public static let SQLITE_CORRUPT_INDEX: OrgPushSDK.ResultCode
  public static let SQLITE_READONLY_RECOVERY: OrgPushSDK.ResultCode
  public static let SQLITE_READONLY_CANTLOCK: OrgPushSDK.ResultCode
  public static let SQLITE_READONLY_ROLLBACK: OrgPushSDK.ResultCode
  public static let SQLITE_READONLY_DBMOVED: OrgPushSDK.ResultCode
  public static let SQLITE_READONLY_CANTINIT: OrgPushSDK.ResultCode
  public static let SQLITE_READONLY_DIRECTORY: OrgPushSDK.ResultCode
  public static let SQLITE_ABORT_ROLLBACK: OrgPushSDK.ResultCode
  public static let SQLITE_CONSTRAINT_CHECK: OrgPushSDK.ResultCode
  public static let SQLITE_CONSTRAINT_COMMITHOOK: OrgPushSDK.ResultCode
  public static let SQLITE_CONSTRAINT_FOREIGNKEY: OrgPushSDK.ResultCode
  public static let SQLITE_CONSTRAINT_FUNCTION: OrgPushSDK.ResultCode
  public static let SQLITE_CONSTRAINT_NOTNULL: OrgPushSDK.ResultCode
  public static let SQLITE_CONSTRAINT_PRIMARYKEY: OrgPushSDK.ResultCode
  public static let SQLITE_CONSTRAINT_TRIGGER: OrgPushSDK.ResultCode
  public static let SQLITE_CONSTRAINT_UNIQUE: OrgPushSDK.ResultCode
  public static let SQLITE_CONSTRAINT_VTAB: OrgPushSDK.ResultCode
  public static let SQLITE_CONSTRAINT_ROWID: OrgPushSDK.ResultCode
  public static let SQLITE_CONSTRAINT_PINNED: OrgPushSDK.ResultCode
  public static let SQLITE_CONSTRAINT_DATATYPE: OrgPushSDK.ResultCode
  public static let SQLITE_NOTICE_RECOVER_WAL: OrgPushSDK.ResultCode
  public static let SQLITE_NOTICE_RECOVER_ROLLBACK: OrgPushSDK.ResultCode
  public static let SQLITE_WARNING_AUTOINDEX: OrgPushSDK.ResultCode
  public static let SQLITE_AUTH_USER: OrgPushSDK.ResultCode
  public static let SQLITE_OK_LOAD_PERMANENTLY: OrgPushSDK.ResultCode
  public static let SQLITE_OK_SYMLINK: OrgPushSDK.ResultCode
}
extension OrgPushSDK.DatabaseError {
  public var isInterruptionError: Swift.Bool {
    get
  }
}
extension OrgPushSDK.DatabaseError {
  public var description: Swift.String {
    get
  }
  public var expandedDescription: Swift.String {
    get
  }
}
extension OrgPushSDK.DatabaseError {
  public static var errorDomain: Swift.String {
    get
  }
  public var errorCode: Swift.Int {
    get
  }
  public var errorUserInfo: [Swift.String : Any] {
    get
  }
}
public struct KeyChainAccessGroupInfo {
  public var prefix: Swift.String
  public var keyChainGroup: Swift.String
  public var rawValue: Swift.String
}
@_hasMissingDesignatedInitializers open class KeyChainAccessGroupHelper {
  public class func applicationPrefix() -> OrgPushSDK.KeyChainAccessGroupInfo?
  public class func getAccessGroupInfo() -> OrgPushSDK.KeyChainAccessGroupInfo?
  @objc deinit
}
extension OrgPushSDK.ValueObservation {
  public func removeDuplicates(by predicate: @escaping (Reducer.Value, Reducer.Value) -> Swift.Bool) -> OrgPushSDK.ValueObservation<OrgPushSDK.ValueReducers.RemoveDuplicates<Reducer>>
}
extension OrgPushSDK.ValueObservation where Reducer.Value : Swift.Equatable {
  public func removeDuplicates() -> OrgPushSDK.ValueObservation<OrgPushSDK.ValueReducers.RemoveDuplicates<Reducer>>
}
extension OrgPushSDK.ValueReducers {
  public struct RemoveDuplicates<Base> : OrgPushSDK.ValueReducer where Base : OrgPushSDK.ValueReducer {
    public func _fetch(_ db: OrgPushSDK.Database) throws -> Base.Fetched
    public mutating func _value(_ fetched: Base.Fetched) -> Base.Value?
    public typealias Fetched = Base.Fetched
    public typealias Value = Base.Value
  }
}
public struct DatabaseRegionObservation {
  public var extent: OrgPushSDK.Database.TransactionObservationExtent
}
extension OrgPushSDK.DatabaseRegionObservation {
  public init(tracking regions: OrgPushSDK.DatabaseRegionConvertible...)
  public init(tracking regions: [OrgPushSDK.DatabaseRegionConvertible])
}
extension OrgPushSDK.DatabaseRegionObservation {
  public func start(in dbWriter: OrgPushSDK.DatabaseWriter, onChange: @escaping (OrgPushSDK.Database) -> Swift.Void) throws -> OrgPushSDK.TransactionObserver
}
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension OrgPushSDK.DatabaseRegionObservation {
  @available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
  public func publisher(in writer: OrgPushSDK.DatabaseWriter) -> OrgPushSDK.DatabasePublishers.DatabaseRegion
}
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension OrgPushSDK.DatabasePublishers {
  public struct DatabaseRegion : Combine.Publisher {
    public typealias Output = OrgPushSDK.Database
    public typealias Failure = Swift.Error
    public func receive<S>(subscriber: S) where S : Combine.Subscriber, S.Failure == Swift.Error, S.Input == OrgPushSDK.Database
  }
}
public struct DarwinNotification {
  public struct Name : Swift.Equatable {
  }
}
extension OrgPushSDK.DarwinNotification.Name {
  public init(_ rawValue: Swift.String)
  public static func == (lhs: OrgPushSDK.DarwinNotification.Name, rhs: OrgPushSDK.DarwinNotification.Name) -> Swift.Bool
}
@_hasMissingDesignatedInitializers final public class DarwinNotificationCenter {
  public typealias NotificationHandler = ((OrgPushSDK.DarwinNotification) -> Swift.Void)
  public static var shared: OrgPushSDK.DarwinNotificationCenter
  final public func addObserver(_ observer: Swift.AnyObject, for name: OrgPushSDK.DarwinNotification.Name, using handler: @escaping OrgPushSDK.DarwinNotificationCenter.NotificationHandler)
  final public func removeObserver(_ observer: Swift.AnyObject, for name: OrgPushSDK.DarwinNotification.Name? = nil)
  final public func isObserver(_ observer: Swift.AnyObject, for name: OrgPushSDK.DarwinNotification.Name? = nil) -> Swift.Bool
  final public func postNotification(_ name: OrgPushSDK.DarwinNotification.Name, userInfo: [Swift.String : Any]? = nil)
  @objc deinit
}
public protocol SettingReceiver {
  func getProtocolType() -> Swift.String?
  func getServerAddress() -> Swift.String?
  func getServerPort() -> Swift.String?
  func getServerContext() -> Swift.String?
  func getServerLogin() -> Swift.String?
  func getServerPassword() -> Swift.String?
  func getLogServerProtocolType() -> Swift.String?
  func getLogServerAddress() -> Swift.String?
  func getLogServerPort() -> Swift.String?
  func getLogServerContext() -> Swift.String?
  func getSharedAppGroup() -> Swift.String?
  func getSilenceDuplicates() -> Swift.String?
  func getClientId() -> Swift.String?
  func getDeviceId() -> Swift.String?
  func getToken() -> Swift.String?
  func getStorageQuantityLimit() -> Swift.String?
  func getStorageDaysLimit() -> Swift.String?
  func getStorageEncryptEnabled() -> Swift.String?
  func IsNeedGetHistoryInSelfCheck() -> Swift.String?
}
public class PushSDKv1SettingReceiver : OrgPushSDK.SettingReceiver {
  public init(identifier: Swift.String?, removeAfterReceive: Swift.Bool = true)
  public func getProtocolType() -> Swift.String?
  public func getServerAddress() -> Swift.String?
  public func getServerPort() -> Swift.String?
  public func getServerContext() -> Swift.String?
  public func getServerLogin() -> Swift.String?
  public func getServerPassword() -> Swift.String?
  public func getLogServerProtocolType() -> Swift.String?
  public func getLogServerAddress() -> Swift.String?
  public func getLogServerPort() -> Swift.String?
  public func getLogServerContext() -> Swift.String?
  public func getSharedAppGroup() -> Swift.String?
  public func getSilenceDuplicates() -> Swift.String?
  public func getClientId() -> Swift.String?
  public func getDeviceId() -> Swift.String?
  public func getToken() -> Swift.String?
  public func getStorageDaysLimit() -> Swift.String?
  public func getStorageQuantityLimit() -> Swift.String?
  public func getStorageEncryptEnabled() -> Swift.String?
  public func IsNeedGetHistoryInSelfCheck() -> Swift.String?
  @objc deinit
}
public struct ServerParams {
  public init(protocolType: Swift.String, serverURL: Swift.String, serverPort: Swift.Int, context: Swift.String?)
}
public struct StorageParams {
  public init(quantityLimit: Swift.Int?, daysLimit: Swift.Int?)
}
public enum ApiMethods : Swift.CustomStringConvertible {
  case subscribe
  case unsubscribe
  case notifications
  case updateSubscriber
  case downloadContent
  case getSubscriberData
  case statistics
  case messages
  case messagesV2
  case saveLogFile
  public var description: Swift.String {
    get
  }
  public static func == (a: OrgPushSDK.ApiMethods, b: OrgPushSDK.ApiMethods) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum PushApiStatus : Swift.String {
  case delivered
  case read
  case transmitted
  case deferred
  case rejected
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_hasMissingDesignatedInitializers public class PushSDK : ObjectiveC.NSObject {
  public static var pushSDKVersion: Swift.String {
    get
  }
  public static var appVersion: Swift.String {
    get
  }
  public func start()
  public static func createInstance(identifier: Swift.String, pushServerParams: OrgPushSDK.ServerParams, login: Swift.String, password: Swift.String, logServerParams: OrgPushSDK.ServerParams?, silenceDuplicates: Swift.Bool = true) throws
  public static func createInstance(identifier: Swift.String, sharedAppGroup: Swift.String, pushServerParams: OrgPushSDK.ServerParams, login: Swift.String, password: Swift.String, logServerParams: OrgPushSDK.ServerParams?, silenceDuplicates: Swift.Bool = true, useEncrypt: Swift.Bool = false, storageParams: OrgPushSDK.StorageParams? = nil) throws
  public static func createTestInstance(identifier: Swift.String, sharedAppGroup: Swift.String, pushServerParams: OrgPushSDK.ServerParams, login: Swift.String, password: Swift.String, logServerParams: OrgPushSDK.ServerParams?, silenceDuplicates: Swift.Bool = true, useEncrypt: Swift.Bool = false, storageParams: OrgPushSDK.StorageParams? = nil) throws
  public static func getInstance(identifier: Swift.String, settingReceivers: [OrgPushSDK.SettingReceiver]? = nil, headerManager: OrgPushSDK.HttpRequestAdditionalHeaderManager? = nil) throws -> OrgPushSDK.PushSDK
  public static func getInstance(identifier: Swift.String, with headerManager: OrgPushSDK.HttpRequestAdditionalHeaderManager? = nil, settingsReceivers: [OrgPushSDK.SettingReceiver]? = nil) throws -> OrgPushSDK.PushSDK
  public func selfCheck(withDeviceId deviceId: Swift.String, clientId: Swift.String, token: Swift.String?, requestTimeout: Swift.Double? = nil, _ postCompleted: @escaping (OrgPushSDK.BaseApiResult?) -> ()) throws
  public func selfCheck(withDeviceId deviceId: Swift.String, clientId: Swift.String, requestTimeout: Swift.Double? = nil, _ postCompleted: @escaping (OrgPushSDK.BaseApiResult?) -> ()) throws
  public func subscribe(deviceId: Swift.String?, clientId: Swift.String?, token: Swift.String?, requestTimeout: Swift.Double? = nil, postCompleted: @escaping (OrgPushSDK.BaseApiResult?) -> ()) throws
  public func unsubscribe(note: Swift.String?, clearStorage: Swift.Bool = true, requestTimeout: Swift.Double? = nil, postCompleted: @escaping (_ response: OrgPushSDK.BaseApiResult?) -> ()) throws
  public func onMessageReceive(_ request: UserNotifications.UNNotificationRequest, with defaultAddress: Swift.String? = nil, postCompleted: @escaping (_ response: OrgPushSDK.BaseApiResult?, _ error: Swift.Error?, _ bestAttemptContent: UserNotifications.UNMutableNotificationContent?) -> ())
  public func onMessageReceive(messageId: Swift.String, title: Swift.String? = nil, subtitle: Swift.String? = nil, body: Swift.String? = nil, customData: [Swift.AnyHashable : Any]? = nil, trackData: [Swift.AnyHashable : Any]? = nil, with defaultAddress: Swift.String? = nil, postCompleted: @escaping (_ response: OrgPushSDK.BaseApiResult?) -> ()) throws
  public func silentMessageReceive(messageId: Swift.String, type: Swift.String? = nil, with defaultAddress: Swift.String? = nil, postCompleted: @escaping (_ response: OrgPushSDK.BaseApiResult?) -> ()) throws
  public func onMessageRead(didReceive response: UserNotifications.UNNotificationResponse, postCompleted: @escaping (_ response: OrgPushSDK.BaseApiResult?) -> ()) throws
  public func onMessageRead(messageId: Swift.String, postCompleted: @escaping (_ response: OrgPushSDK.BaseApiResult?) -> ()) throws
  public func getSavedToken() -> Swift.String?
  public func getClientId() -> Swift.String?
  public func getDeviceId() -> Swift.String?
  public func getSubscriberData(rDeviceId: Swift.String?, requestTimeout: Swift.Double? = nil, postCompleted: @escaping (_ response: OrgPushSDK.SubscriberGetResult?) -> ()) throws
  public func updateSubscriber(updateAddress: Swift.String?, attributes: [Swift.String : Swift.String], requestTimeout: Swift.Double? = nil, postCompleted: @escaping (_ response: OrgPushSDK.BaseApiResult?) -> ()) throws
  public func downloadContent(messageId: Swift.String?, requestTimeout: Swift.Double? = nil, postCompleted: @escaping (_ response: OrgPushSDK.ContentDownloadResult?) -> ()) throws
  public func getMessages(requestAddress: Swift.String? = nil, minId: Swift.String? = nil, maxId: Swift.String? = nil, minDate: Foundation.Date? = nil, maxDate: Foundation.Date? = nil, count: Swift.Int = 100, requestTimeout: Swift.Double? = nil, postCompleted: @escaping (_ response: OrgPushSDK.MessagesResult?) -> ()) throws
  public func sendLogs()
  public func removeAllMessages()
  public func removeMessage(by id: Swift.String)
  public func removeMessages(predicate: OrgPushSDK.SQLSpecificExpressible)
  public func setEncrypt(value: Swift.Bool)
  public func getMessages() -> [OrgPushSDK.Message]
  public func getMessage(byId id: Swift.String) -> OrgPushSDK.Message?
  public func getMessageByPredicate(predicate: OrgPushSDK.SQLSpecificExpressible) -> [OrgPushSDK.Message]
  public func removeMessage(byId id: Swift.String)
  weak public var messageObserver: OrgPushSDK.NSSQLiteDatabaseChangeDelegate? {
    get
    set
  }
  public func getNotificationContent(id: Swift.String, postCompleted: @escaping (_ result: OrgPushSDK.ExtraContent?) -> ())
  @objc deinit
}
public protocol MessageAttributesProtocol {
  var classifierdId: Swift.Int { get }
  var classifierName: Swift.String? { get }
  var isImportant: Swift.Int { get }
  var messageDate: Foundation.Date? { get }
  var messageId: Swift.String? { get }
}
public struct JoinAssociation<Origin, Destination> : OrgPushSDK.AssociationToOne {
  public typealias OriginRowDecoder = Origin
  public typealias RowDecoder = Destination
  public var _sqlAssociation: OrgPushSDK._SQLAssociation
}
public typealias DeviceUDID = Swift.String?
@objc @_inheritsConvenienceInitializers final public class UUIDManager : ObjectiveC.NSObject {
  public static var deviceUDID: Swift.String?
  public static func saveDeviceUUID(accessGroup: Swift.String?) -> OrgPushSDK.DeviceUDID
  @discardableResult
  public static func removeDeviceUUID(accessGroup: Swift.String?) -> Darwin.OSStatus
  public static func idDeviceIdGenerated(accessGroup: Swift.String?) -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@usableFromInline
internal enum RowKey : Swift.Hashable, OrgPushSDK.GRDBSendable {
  case columnName(Swift.String)
  case columnIndex(Swift.Int)
  case scope(Swift.String)
  case prefetchKey(Swift.String)
  @usableFromInline
  internal func hash(into hasher: inout Swift.Hasher)
  @usableFromInline
  internal static func == (a: OrgPushSDK.RowKey, b: OrgPushSDK.RowKey) -> Swift.Bool
  @usableFromInline
  internal var hashValue: Swift.Int {
    @usableFromInline
    get
  }
}
@usableFromInline
internal enum RowDecodingError : Swift.Error {
  @usableFromInline
  internal struct Context : Swift.CustomDebugStringConvertible, OrgPushSDK.GRDBSendable {
    @usableFromInline
    internal let debugDescription: Swift.String
  }
  case keyNotFound(OrgPushSDK.RowKey, OrgPushSDK.RowDecodingError.Context)
  case valueMismatch(Any.Type, OrgPushSDK.RowDecodingError.Context)
  @usableFromInline
  internal static func valueMismatch(_ type: Any.Type, sqliteStatement: OrgPushSDK.SQLiteStatement, index: Swift.Int32, context: OrgPushSDK.RowDecodingContext) -> OrgPushSDK.RowDecodingError
  @usableFromInline
  internal static func columnNotFound(_ columnName: Swift.String, context: OrgPushSDK.RowDecodingContext) -> OrgPushSDK.RowDecodingError
}
@usableFromInline
internal struct RowDecodingContext {
  @usableFromInline
  internal init(row: OrgPushSDK.Row, key: OrgPushSDK.RowKey? = nil)
  @usableFromInline
  internal init(statement: OrgPushSDK.Statement, index: Swift.Int)
}
extension OrgPushSDK.RowDecodingError : Swift.CustomStringConvertible {
  @usableFromInline
  internal var description: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers @objc public class ContentDownloadResult : ObjectiveC.NSObject, Swift.Decodable {
  required public init(from decoder: Swift.Decoder) throws
  public func getResultKind() -> OrgPushSDK.ResultKind
  public func getErrorCode() -> Swift.Int
  public func getErrorDescription() -> Swift.String?
  public func getContent() -> Foundation.Data?
  @objc deinit
}
extension OrgPushSDK.AssociationToMany {
  public var count: OrgPushSDK.AssociationAggregate<Self.OriginRowDecoder> {
    get
  }
  public var isEmpty: OrgPushSDK.AssociationAggregate<Self.OriginRowDecoder> {
    get
  }
  @available(*, deprecated, message: "Did you mean average(Column(...))? If not, prefer average(value.databaseValue) instead.")
  public func average(_ expression: OrgPushSDK.SQLExpressible) -> OrgPushSDK.AssociationAggregate<Self.OriginRowDecoder>
  public func average(_ expression: OrgPushSDK.SQLSpecificExpressible) -> OrgPushSDK.AssociationAggregate<Self.OriginRowDecoder>
  @available(*, deprecated, message: "Did you mean max(Column(...))? If not, prefer max(value.databaseValue) instead.")
  public func max(_ expression: OrgPushSDK.SQLExpressible) -> OrgPushSDK.AssociationAggregate<Self.OriginRowDecoder>
  public func max(_ expression: OrgPushSDK.SQLSpecificExpressible) -> OrgPushSDK.AssociationAggregate<Self.OriginRowDecoder>
  @available(*, deprecated, message: "Did you mean min(Column(...))? If not, prefer min(value.databaseValue) instead.")
  public func min(_ expression: OrgPushSDK.SQLExpressible) -> OrgPushSDK.AssociationAggregate<Self.OriginRowDecoder>
  public func min(_ expression: OrgPushSDK.SQLSpecificExpressible) -> OrgPushSDK.AssociationAggregate<Self.OriginRowDecoder>
  @available(*, deprecated, message: "Did you mean sum(Column(...))? If not, prefer sum(value.databaseValue) instead.")
  public func sum(_ expression: OrgPushSDK.SQLExpressible) -> OrgPushSDK.AssociationAggregate<Self.OriginRowDecoder>
  public func sum(_ expression: OrgPushSDK.SQLSpecificExpressible) -> OrgPushSDK.AssociationAggregate<Self.OriginRowDecoder>
  public func total(_ expression: OrgPushSDK.SQLSpecificExpressible) -> OrgPushSDK.AssociationAggregate<Self.OriginRowDecoder>
}
public struct AssociationAggregate<RowDecoder> {
}
extension OrgPushSDK.AssociationAggregate {
  public func forKey(_ key: Swift.String) -> OrgPushSDK.AssociationAggregate<RowDecoder>
  public func forKey(_ key: Swift.CodingKey) -> OrgPushSDK.AssociationAggregate<RowDecoder>
}
prefix public func ! <RowDecoder>(aggregate: OrgPushSDK.AssociationAggregate<RowDecoder>) -> OrgPushSDK.AssociationAggregate<RowDecoder>
public func && <RowDecoder>(lhs: OrgPushSDK.AssociationAggregate<RowDecoder>, rhs: OrgPushSDK.AssociationAggregate<RowDecoder>) -> OrgPushSDK.AssociationAggregate<RowDecoder>
public func && <RowDecoder>(lhs: OrgPushSDK.AssociationAggregate<RowDecoder>, rhs: OrgPushSDK.SQLExpressible) -> OrgPushSDK.AssociationAggregate<RowDecoder>
public func && <RowDecoder>(lhs: OrgPushSDK.SQLExpressible, rhs: OrgPushSDK.AssociationAggregate<RowDecoder>) -> OrgPushSDK.AssociationAggregate<RowDecoder>
public func || <RowDecoder>(lhs: OrgPushSDK.AssociationAggregate<RowDecoder>, rhs: OrgPushSDK.AssociationAggregate<RowDecoder>) -> OrgPushSDK.AssociationAggregate<RowDecoder>
public func || <RowDecoder>(lhs: OrgPushSDK.AssociationAggregate<RowDecoder>, rhs: OrgPushSDK.SQLExpressible) -> OrgPushSDK.AssociationAggregate<RowDecoder>
public func || <RowDecoder>(lhs: OrgPushSDK.SQLExpressible, rhs: OrgPushSDK.AssociationAggregate<RowDecoder>) -> OrgPushSDK.AssociationAggregate<RowDecoder>
public func == <RowDecoder>(lhs: OrgPushSDK.AssociationAggregate<RowDecoder>, rhs: OrgPushSDK.AssociationAggregate<RowDecoder>) -> OrgPushSDK.AssociationAggregate<RowDecoder>
public func == <RowDecoder>(lhs: OrgPushSDK.AssociationAggregate<RowDecoder>, rhs: OrgPushSDK.SQLExpressible) -> OrgPushSDK.AssociationAggregate<RowDecoder>
public func == <RowDecoder>(lhs: OrgPushSDK.SQLExpressible, rhs: OrgPushSDK.AssociationAggregate<RowDecoder>) -> OrgPushSDK.AssociationAggregate<RowDecoder>
public func == <RowDecoder>(lhs: OrgPushSDK.AssociationAggregate<RowDecoder>, rhs: Swift.Bool) -> OrgPushSDK.AssociationAggregate<RowDecoder>
public func == <RowDecoder>(lhs: Swift.Bool, rhs: OrgPushSDK.AssociationAggregate<RowDecoder>) -> OrgPushSDK.AssociationAggregate<RowDecoder>
public func != <RowDecoder>(lhs: OrgPushSDK.AssociationAggregate<RowDecoder>, rhs: OrgPushSDK.AssociationAggregate<RowDecoder>) -> OrgPushSDK.AssociationAggregate<RowDecoder>
public func != <RowDecoder>(lhs: OrgPushSDK.AssociationAggregate<RowDecoder>, rhs: OrgPushSDK.SQLExpressible) -> OrgPushSDK.AssociationAggregate<RowDecoder>
public func != <RowDecoder>(lhs: OrgPushSDK.SQLExpressible, rhs: OrgPushSDK.AssociationAggregate<RowDecoder>) -> OrgPushSDK.AssociationAggregate<RowDecoder>
public func != <RowDecoder>(lhs: OrgPushSDK.AssociationAggregate<RowDecoder>, rhs: Swift.Bool) -> OrgPushSDK.AssociationAggregate<RowDecoder>
public func != <RowDecoder>(lhs: Swift.Bool, rhs: OrgPushSDK.AssociationAggregate<RowDecoder>) -> OrgPushSDK.AssociationAggregate<RowDecoder>
public func === <RowDecoder>(lhs: OrgPushSDK.AssociationAggregate<RowDecoder>, rhs: OrgPushSDK.AssociationAggregate<RowDecoder>) -> OrgPushSDK.AssociationAggregate<RowDecoder>
public func === <RowDecoder>(lhs: OrgPushSDK.AssociationAggregate<RowDecoder>, rhs: OrgPushSDK.SQLExpressible) -> OrgPushSDK.AssociationAggregate<RowDecoder>
public func === <RowDecoder>(lhs: OrgPushSDK.SQLExpressible, rhs: OrgPushSDK.AssociationAggregate<RowDecoder>) -> OrgPushSDK.AssociationAggregate<RowDecoder>
public func !== <RowDecoder>(lhs: OrgPushSDK.AssociationAggregate<RowDecoder>, rhs: OrgPushSDK.AssociationAggregate<RowDecoder>) -> OrgPushSDK.AssociationAggregate<RowDecoder>
public func !== <RowDecoder>(lhs: OrgPushSDK.AssociationAggregate<RowDecoder>, rhs: OrgPushSDK.SQLExpressible) -> OrgPushSDK.AssociationAggregate<RowDecoder>
public func !== <RowDecoder>(lhs: OrgPushSDK.SQLExpressible, rhs: OrgPushSDK.AssociationAggregate<RowDecoder>) -> OrgPushSDK.AssociationAggregate<RowDecoder>
public func <= <RowDecoder>(lhs: OrgPushSDK.AssociationAggregate<RowDecoder>, rhs: OrgPushSDK.AssociationAggregate<RowDecoder>) -> OrgPushSDK.AssociationAggregate<RowDecoder>
public func <= <RowDecoder>(lhs: OrgPushSDK.AssociationAggregate<RowDecoder>, rhs: OrgPushSDK.SQLExpressible) -> OrgPushSDK.AssociationAggregate<RowDecoder>
public func <= <RowDecoder>(lhs: OrgPushSDK.SQLExpressible, rhs: OrgPushSDK.AssociationAggregate<RowDecoder>) -> OrgPushSDK.AssociationAggregate<RowDecoder>
public func < <RowDecoder>(lhs: OrgPushSDK.AssociationAggregate<RowDecoder>, rhs: OrgPushSDK.AssociationAggregate<RowDecoder>) -> OrgPushSDK.AssociationAggregate<RowDecoder>
public func < <RowDecoder>(lhs: OrgPushSDK.AssociationAggregate<RowDecoder>, rhs: OrgPushSDK.SQLExpressible) -> OrgPushSDK.AssociationAggregate<RowDecoder>
public func < <RowDecoder>(lhs: OrgPushSDK.SQLExpressible, rhs: OrgPushSDK.AssociationAggregate<RowDecoder>) -> OrgPushSDK.AssociationAggregate<RowDecoder>
public func > <RowDecoder>(lhs: OrgPushSDK.AssociationAggregate<RowDecoder>, rhs: OrgPushSDK.AssociationAggregate<RowDecoder>) -> OrgPushSDK.AssociationAggregate<RowDecoder>
public func > <RowDecoder>(lhs: OrgPushSDK.AssociationAggregate<RowDecoder>, rhs: OrgPushSDK.SQLExpressible) -> OrgPushSDK.AssociationAggregate<RowDecoder>
public func > <RowDecoder>(lhs: OrgPushSDK.SQLExpressible, rhs: OrgPushSDK.AssociationAggregate<RowDecoder>) -> OrgPushSDK.AssociationAggregate<RowDecoder>
public func >= <RowDecoder>(lhs: OrgPushSDK.AssociationAggregate<RowDecoder>, rhs: OrgPushSDK.AssociationAggregate<RowDecoder>) -> OrgPushSDK.AssociationAggregate<RowDecoder>
public func >= <RowDecoder>(lhs: OrgPushSDK.AssociationAggregate<RowDecoder>, rhs: OrgPushSDK.SQLExpressible) -> OrgPushSDK.AssociationAggregate<RowDecoder>
public func >= <RowDecoder>(lhs: OrgPushSDK.SQLExpressible, rhs: OrgPushSDK.AssociationAggregate<RowDecoder>) -> OrgPushSDK.AssociationAggregate<RowDecoder>
prefix public func - <RowDecoder>(aggregate: OrgPushSDK.AssociationAggregate<RowDecoder>) -> OrgPushSDK.AssociationAggregate<RowDecoder>
public func + <RowDecoder>(lhs: OrgPushSDK.AssociationAggregate<RowDecoder>, rhs: OrgPushSDK.AssociationAggregate<RowDecoder>) -> OrgPushSDK.AssociationAggregate<RowDecoder>
public func + <RowDecoder>(lhs: OrgPushSDK.AssociationAggregate<RowDecoder>, rhs: OrgPushSDK.SQLExpressible) -> OrgPushSDK.AssociationAggregate<RowDecoder>
public func + <RowDecoder>(lhs: OrgPushSDK.SQLExpressible, rhs: OrgPushSDK.AssociationAggregate<RowDecoder>) -> OrgPushSDK.AssociationAggregate<RowDecoder>
public func - <RowDecoder>(lhs: OrgPushSDK.AssociationAggregate<RowDecoder>, rhs: OrgPushSDK.AssociationAggregate<RowDecoder>) -> OrgPushSDK.AssociationAggregate<RowDecoder>
public func - <RowDecoder>(lhs: OrgPushSDK.AssociationAggregate<RowDecoder>, rhs: OrgPushSDK.SQLExpressible) -> OrgPushSDK.AssociationAggregate<RowDecoder>
public func - <RowDecoder>(lhs: OrgPushSDK.SQLExpressible, rhs: OrgPushSDK.AssociationAggregate<RowDecoder>) -> OrgPushSDK.AssociationAggregate<RowDecoder>
public func * <RowDecoder>(lhs: OrgPushSDK.AssociationAggregate<RowDecoder>, rhs: OrgPushSDK.AssociationAggregate<RowDecoder>) -> OrgPushSDK.AssociationAggregate<RowDecoder>
public func * <RowDecoder>(lhs: OrgPushSDK.AssociationAggregate<RowDecoder>, rhs: OrgPushSDK.SQLExpressible) -> OrgPushSDK.AssociationAggregate<RowDecoder>
public func * <RowDecoder>(lhs: OrgPushSDK.SQLExpressible, rhs: OrgPushSDK.AssociationAggregate<RowDecoder>) -> OrgPushSDK.AssociationAggregate<RowDecoder>
public func / <RowDecoder>(lhs: OrgPushSDK.AssociationAggregate<RowDecoder>, rhs: OrgPushSDK.AssociationAggregate<RowDecoder>) -> OrgPushSDK.AssociationAggregate<RowDecoder>
public func / <RowDecoder>(lhs: OrgPushSDK.AssociationAggregate<RowDecoder>, rhs: OrgPushSDK.SQLExpressible) -> OrgPushSDK.AssociationAggregate<RowDecoder>
public func / <RowDecoder>(lhs: OrgPushSDK.SQLExpressible, rhs: OrgPushSDK.AssociationAggregate<RowDecoder>) -> OrgPushSDK.AssociationAggregate<RowDecoder>
public func ?? <RowDecoder>(lhs: OrgPushSDK.AssociationAggregate<RowDecoder>, rhs: OrgPushSDK.SQLExpressible) -> OrgPushSDK.AssociationAggregate<RowDecoder>
public func abs<RowDecoder>(_ aggregate: OrgPushSDK.AssociationAggregate<RowDecoder>) -> OrgPushSDK.AssociationAggregate<RowDecoder>
public func length<RowDecoder>(_ aggregate: OrgPushSDK.AssociationAggregate<RowDecoder>) -> OrgPushSDK.AssociationAggregate<RowDecoder>
public typealias JSONData = Swift.String
@_hasMissingDesignatedInitializers @objc(LoggingUtils) open class LoggingUtils : ObjectiveC.NSObject {
  public class func removeFiles(at url: Foundation.URL)
  @objc deinit
}
final public class DatabaseCollation {
  final public let name: Swift.String
  public init(_ name: Swift.String, function: @escaping (Swift.String, Swift.String) -> Foundation.ComparisonResult)
  @objc deinit
}
extension OrgPushSDK.DatabaseCollation : Swift.Hashable {
  final public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: OrgPushSDK.DatabaseCollation, rhs: OrgPushSDK.DatabaseCollation) -> Swift.Bool
  final public var hashValue: Swift.Int {
    get
  }
}
open class Record : OrgPushSDK.FetchableRecord, OrgPushSDK.TableRecord, OrgPushSDK.PersistableRecord {
  public init()
  required public init(row: OrgPushSDK.Row)
  open class var databaseTableName: Swift.String {
    get
  }
  open class var persistenceConflictPolicy: OrgPushSDK.PersistenceConflictPolicy {
    get
  }
  open class var databaseSelection: [OrgPushSDK.SQLSelectable] {
    get
  }
  open func encode(to container: inout OrgPushSDK.PersistenceContainer)
  open func didInsert(with rowID: Swift.Int64, for column: Swift.String?)
  open func copy() -> Self
  public var hasDatabaseChanges: Swift.Bool {
    get
    set
  }
  public var databaseChanges: [Swift.String : OrgPushSDK.DatabaseValue?] {
    get
  }
  open func insert(_ db: OrgPushSDK.Database) throws
  open func update(_ db: OrgPushSDK.Database, columns: Swift.Set<Swift.String>) throws
  @discardableResult
  final public func updateChanges(_ db: OrgPushSDK.Database) throws -> Swift.Bool
  final public func save(_ db: OrgPushSDK.Database) throws
  @discardableResult
  open func delete(_ db: OrgPushSDK.Database) throws -> Swift.Bool
  @objc deinit
}
public struct DatabaseValue : Swift.Hashable, Swift.CustomStringConvertible, OrgPushSDK.DatabaseValueConvertible, OrgPushSDK.SQLSpecificExpressible {
  public let storage: OrgPushSDK.DatabaseValue.Storage
  public static let null: OrgPushSDK.DatabaseValue
  @frozen public enum Storage : Swift.Equatable {
    case null
    case int64(Swift.Int64)
    case double(Swift.Double)
    case string(Swift.String)
    case blob(Foundation.Data)
    public var value: OrgPushSDK.DatabaseValueConvertible? {
      get
    }
    public static func == (lhs: OrgPushSDK.DatabaseValue.Storage, rhs: OrgPushSDK.DatabaseValue.Storage) -> Swift.Bool
  }
  public init?(value: Any)
  public var isNull: Swift.Bool {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
extension OrgPushSDK.DatabaseValue : OrgPushSDK.StatementBinding {
  public func bind(to sqliteStatement: OrgPushSDK.SQLiteStatement, at index: Swift.CInt) -> Swift.CInt
}
extension OrgPushSDK.DatabaseValue : OrgPushSDK.GRDBSendable {
}
extension OrgPushSDK.DatabaseValue {
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: OrgPushSDK.DatabaseValue, rhs: OrgPushSDK.DatabaseValue) -> Swift.Bool
}
extension OrgPushSDK.DatabaseValue {
  public var databaseValue: OrgPushSDK.DatabaseValue {
    get
  }
  public static func fromDatabaseValue(_ dbValue: OrgPushSDK.DatabaseValue) -> OrgPushSDK.DatabaseValue?
}
extension OrgPushSDK.DatabaseValue {
  public var sqlExpression: OrgPushSDK.SQLExpression {
    get
  }
}
extension OrgPushSDK.DatabaseValue {
  public var description: Swift.String {
    get
  }
}
public protocol StatusProtocol {
  var name: Swift.String? { get }
}
@objc final public class Watchdog : ObjectiveC.NSObject {
  @objc public static let defaultThreshold: Swift.Double
  @objc convenience public init(threshold: Swift.Double = Watchdog.defaultThreshold, strictMode: Swift.Bool = false)
  @objc public init(threshold: Swift.Double = Watchdog.defaultThreshold, watchdogFiredCallback: @escaping () -> Swift.Void)
  @objc deinit
}
public struct Entry : Swift.Equatable {
  public enum EntryType : Swift.Int {
    case file
    case directory
    case symlink
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public static func == (lhs: OrgPushSDK.Entry, rhs: OrgPushSDK.Entry) -> Swift.Bool
}
extension OrgPushSDK.Database {
  @_disfavoredOverload final public func create(table name: Swift.String, temporary: Swift.Bool = false, ifNotExists: Swift.Bool = false, withoutRowID: Swift.Bool = false, body: (OrgPushSDK.TableDefinition) throws -> Swift.Void) throws
  final public func create(table name: Swift.String, options: OrgPushSDK.TableOptions = [], body: (OrgPushSDK.TableDefinition) throws -> Swift.Void) throws
  final public func rename(table name: Swift.String, to newName: Swift.String) throws
  final public func alter(table name: Swift.String, body: (OrgPushSDK.TableAlteration) -> Swift.Void) throws
  final public func drop(table name: Swift.String) throws
  @_disfavoredOverload final public func create(index name: Swift.String, on table: Swift.String, columns: [Swift.String], unique: Swift.Bool = false, ifNotExists: Swift.Bool = false, condition: OrgPushSDK.SQLExpressible? = nil) throws
  final public func create(index name: Swift.String, on table: Swift.String, columns: [Swift.String], options: OrgPushSDK.IndexOptions = [], condition: OrgPushSDK.SQLExpressible? = nil) throws
  final public func drop(index name: Swift.String) throws
  final public func reindex(collation: OrgPushSDK.Database.CollationName) throws
  final public func reindex(collation: OrgPushSDK.DatabaseCollation) throws
}
public struct TableOptions : Swift.OptionSet {
  public let rawValue: Swift.Int
  public init(rawValue: Swift.Int)
  public static let ifNotExists: OrgPushSDK.TableOptions
  public static let temporary: OrgPushSDK.TableOptions
  public static let withoutRowID: OrgPushSDK.TableOptions
  public typealias ArrayLiteralElement = OrgPushSDK.TableOptions
  public typealias Element = OrgPushSDK.TableOptions
  public typealias RawValue = Swift.Int
}
@_hasMissingDesignatedInitializers final public class TableDefinition {
  @discardableResult
  final public func autoIncrementedPrimaryKey(_ name: Swift.String, onConflict conflictResolution: OrgPushSDK.Database.ConflictResolution? = nil) -> OrgPushSDK.ColumnDefinition
  @discardableResult
  final public func column(_ name: Swift.String, _ type: OrgPushSDK.Database.ColumnType? = nil) -> OrgPushSDK.ColumnDefinition
  final public func column(sql: Swift.String)
  final public func column(literal: OrgPushSDK.SQL)
  final public func primaryKey(_ columns: [Swift.String], onConflict conflictResolution: OrgPushSDK.Database.ConflictResolution? = nil)
  final public func uniqueKey(_ columns: [Swift.String], onConflict conflictResolution: OrgPushSDK.Database.ConflictResolution? = nil)
  final public func foreignKey(_ columns: [Swift.String], references table: Swift.String, columns destinationColumns: [Swift.String]? = nil, onDelete deleteAction: OrgPushSDK.Database.ForeignKeyAction? = nil, onUpdate updateAction: OrgPushSDK.Database.ForeignKeyAction? = nil, deferred: Swift.Bool = false)
  final public func check(_ condition: OrgPushSDK.SQLExpressible)
  final public func check(sql: Swift.String)
  final public func constraint(sql: Swift.String)
  final public func constraint(literal: OrgPushSDK.SQL)
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class TableAlteration {
  @discardableResult
  final public func add(column name: Swift.String, _ type: OrgPushSDK.Database.ColumnType? = nil) -> OrgPushSDK.ColumnDefinition
  final public func addColumn(sql: Swift.String)
  final public func addColumn(literal: OrgPushSDK.SQL)
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  final public func rename(column name: Swift.String, to newName: Swift.String)
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  final public func drop(column name: Swift.String)
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class ColumnDefinition {
  public enum GeneratedColumnQualification {
    case virtual
    case stored
    public static func == (a: OrgPushSDK.ColumnDefinition.GeneratedColumnQualification, b: OrgPushSDK.ColumnDefinition.GeneratedColumnQualification) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @discardableResult
  final public func primaryKey(onConflict conflictResolution: OrgPushSDK.Database.ConflictResolution? = nil, autoincrement: Swift.Bool = false) -> Self
  @discardableResult
  final public func notNull(onConflict conflictResolution: OrgPushSDK.Database.ConflictResolution? = nil) -> Self
  @discardableResult
  final public func unique(onConflict conflictResolution: OrgPushSDK.Database.ConflictResolution? = nil) -> Self
  @discardableResult
  final public func indexed() -> Self
  @discardableResult
  final public func check(_ condition: (OrgPushSDK.Column) -> OrgPushSDK.SQLExpressible) -> Self
  @discardableResult
  final public func check(sql: Swift.String) -> Self
  @discardableResult
  final public func defaults(to value: OrgPushSDK.DatabaseValueConvertible) -> Self
  @discardableResult
  final public func defaults(sql: Swift.String) -> Self
  @discardableResult
  final public func collate(_ collation: OrgPushSDK.Database.CollationName) -> Self
  @discardableResult
  final public func collate(_ collation: OrgPushSDK.DatabaseCollation) -> Self
  @discardableResult
  final public func references(_ table: Swift.String, column: Swift.String? = nil, onDelete deleteAction: OrgPushSDK.Database.ForeignKeyAction? = nil, onUpdate updateAction: OrgPushSDK.Database.ForeignKeyAction? = nil, deferred: Swift.Bool = false) -> Self
  @objc deinit
}
public struct IndexOptions : Swift.OptionSet {
  public let rawValue: Swift.Int
  public init(rawValue: Swift.Int)
  public static let ifNotExists: OrgPushSDK.IndexOptions
  public static let unique: OrgPushSDK.IndexOptions
  public typealias ArrayLiteralElement = OrgPushSDK.IndexOptions
  public typealias Element = OrgPushSDK.IndexOptions
  public typealias RawValue = Swift.Int
}
public protocol MessageStatusProtocol {
  var statusName: Swift.String? { get set }
  var statusDate: Foundation.Date? { get set }
  var isSent: Swift.Bool { get set }
}
public protocol ChannelProtocol {
  var name: Swift.String? { get }
}
public struct Message : Swift.Codable, Swift.Hashable, OrgPushSDK.TableRecord, OrgPushSDK.FetchableRecord, OrgPushSDK.MutablePersistableRecord {
  public var id: Swift.String
  public var contentAvailable: Swift.Bool?
  public var body: Swift.String?
  public var title: Swift.String
  public var subtitle: Swift.String?
  public var messageDate: Foundation.Date
  public var messageStringDate: Swift.String?
  public var messageStatusLink: OrgPushSDK.MessageStatus?
  public var channelLink: OrgPushSDK.Channel?
  public var extraContentLink: OrgPushSDK.ExtraContent?
  public var iconLink: OrgPushSDK.Icon?
  public var messageAttributesLink: OrgPushSDK.MessageAttributes?
  public var customData: [Swift.String : Swift.String]?
  public var statusName: Swift.String? {
    get
  }
  public var channelName: Swift.String? {
    get
  }
  public var statusDate: Foundation.Date? {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: OrgPushSDK.Message, b: OrgPushSDK.Message) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
extension Swift.String {
  public var quotedDatabaseIdentifier: Swift.String {
    get
  }
}
public func databaseQuestionMarks(count: Swift.Int) -> Swift.String
public protocol _OptionalProtocol {
  associatedtype Wrapped
}
extension Swift.Optional : OrgPushSDK._OptionalProtocol {
}
public typealias GRDBSendable = Any
@inline(__always) @inlinable internal func GRDBPrecondition(_ condition: @autoclosure () -> Swift.Bool, _ message: @autoclosure () -> Swift.String = "", file: Swift.StaticString = #file, line: Swift.UInt = #line) {
    /// Custom precondition function which aims at solving
    /// <https://bugs.swift.org/browse/SR-905> and
    /// <https://github.com/groue/GRDB.swift/issues/37>
    if !condition() {
        fatalError(message(), file: file, line: line)
    }
}
extension OrgPushSDK.TableRecord {
  public static func all() -> OrgPushSDK.QueryInterfaceRequest<Self>
  public static func none() -> OrgPushSDK.QueryInterfaceRequest<Self>
  public static func select(_ selection: OrgPushSDK.SQLSelectable...) -> OrgPushSDK.QueryInterfaceRequest<Self>
  public static func select(_ selection: [OrgPushSDK.SQLSelectable]) -> OrgPushSDK.QueryInterfaceRequest<Self>
  public static func select(sql: Swift.String, arguments: OrgPushSDK.StatementArguments = StatementArguments()) -> OrgPushSDK.QueryInterfaceRequest<Self>
  public static func select(literal sqlLiteral: OrgPushSDK.SQL) -> OrgPushSDK.QueryInterfaceRequest<Self>
  public static func select<RowDecoder>(_ selection: [OrgPushSDK.SQLSelectable], as type: RowDecoder.Type = RowDecoder.self) -> OrgPushSDK.QueryInterfaceRequest<RowDecoder>
  public static func select<RowDecoder>(_ selection: OrgPushSDK.SQLSelectable..., as type: RowDecoder.Type = RowDecoder.self) -> OrgPushSDK.QueryInterfaceRequest<RowDecoder>
  public static func select<RowDecoder>(sql: Swift.String, arguments: OrgPushSDK.StatementArguments = StatementArguments(), as type: RowDecoder.Type = RowDecoder.self) -> OrgPushSDK.QueryInterfaceRequest<RowDecoder>
  public static func select<RowDecoder>(literal sqlLiteral: OrgPushSDK.SQL, as type: RowDecoder.Type = RowDecoder.self) -> OrgPushSDK.QueryInterfaceRequest<RowDecoder>
  public static func annotated(with selection: [OrgPushSDK.SQLSelectable]) -> OrgPushSDK.QueryInterfaceRequest<Self>
  public static func annotated(with selection: OrgPushSDK.SQLSelectable...) -> OrgPushSDK.QueryInterfaceRequest<Self>
  @available(*, deprecated, message: "Did you mean filter(id:) or filter(key:)? If not, prefer filter(value.databaseValue) instead. See also none().")
  public static func filter(_ predicate: OrgPushSDK.SQLExpressible) -> OrgPushSDK.QueryInterfaceRequest<Self>
  public static func filter(_ predicate: OrgPushSDK.SQLSpecificExpressible) -> OrgPushSDK.QueryInterfaceRequest<Self>
  public static func filter<PrimaryKeyType>(key: PrimaryKeyType?) -> OrgPushSDK.QueryInterfaceRequest<Self> where PrimaryKeyType : OrgPushSDK.DatabaseValueConvertible
  public static func filter<Sequence>(keys: Sequence) -> OrgPushSDK.QueryInterfaceRequest<Self> where Sequence : Swift.Sequence, Sequence.Element : OrgPushSDK.DatabaseValueConvertible
  public static func filter(key: [Swift.String : OrgPushSDK.DatabaseValueConvertible?]?) -> OrgPushSDK.QueryInterfaceRequest<Self>
  public static func filter(keys: [[Swift.String : OrgPushSDK.DatabaseValueConvertible?]]) -> OrgPushSDK.QueryInterfaceRequest<Self>
  public static func filter(sql: Swift.String, arguments: OrgPushSDK.StatementArguments = StatementArguments()) -> OrgPushSDK.QueryInterfaceRequest<Self>
  public static func filter(literal sqlLiteral: OrgPushSDK.SQL) -> OrgPushSDK.QueryInterfaceRequest<Self>
  public static func order(_ orderings: OrgPushSDK.SQLOrderingTerm...) -> OrgPushSDK.QueryInterfaceRequest<Self>
  public static func order(_ orderings: [OrgPushSDK.SQLOrderingTerm]) -> OrgPushSDK.QueryInterfaceRequest<Self>
  public static func orderByPrimaryKey() -> OrgPushSDK.QueryInterfaceRequest<Self>
  public static func order(sql: Swift.String, arguments: OrgPushSDK.StatementArguments = StatementArguments()) -> OrgPushSDK.QueryInterfaceRequest<Self>
  public static func order(literal sqlLiteral: OrgPushSDK.SQL) -> OrgPushSDK.QueryInterfaceRequest<Self>
  public static func limit(_ limit: Swift.Int, offset: Swift.Int? = nil) -> OrgPushSDK.QueryInterfaceRequest<Self>
  public static func aliased(_ alias: OrgPushSDK.TableAlias) -> OrgPushSDK.QueryInterfaceRequest<Self>
  public static func with<RowDecoder>(_ cte: OrgPushSDK.CommonTableExpression<RowDecoder>) -> OrgPushSDK.QueryInterfaceRequest<Self>
}
@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6, *)
extension OrgPushSDK.TableRecord where Self : Swift.Identifiable, Self.ID : OrgPushSDK.DatabaseValueConvertible {
  public static func filter(id: Self.ID) -> OrgPushSDK.QueryInterfaceRequest<Self>
  public static func filter<Collection>(ids: Collection) -> OrgPushSDK.QueryInterfaceRequest<Self> where Collection : Swift.Collection, Self.ID == Collection.Element
  public static func selectID() -> OrgPushSDK.QueryInterfaceRequest<Self.ID>
}
@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6, *)
extension OrgPushSDK.TableRecord where Self : Swift.Identifiable, Self.ID : OrgPushSDK._OptionalProtocol, Self.ID.Wrapped : OrgPushSDK.DatabaseValueConvertible {
  public static func filter(id: Self.ID.Wrapped) -> OrgPushSDK.QueryInterfaceRequest<Self>
  public static func filter<Collection>(ids: Collection) -> OrgPushSDK.QueryInterfaceRequest<Self> where Collection : Swift.Collection, Collection.Element : OrgPushSDK.DatabaseValueConvertible, Collection.Element == Self.ID.Wrapped
  public static func selectID() -> OrgPushSDK.QueryInterfaceRequest<Self.ID.Wrapped>
}
extension Foundation.NSNumber : OrgPushSDK.DatabaseValueConvertible {
  public var databaseValue: OrgPushSDK.DatabaseValue {
    get
  }
  public static func fromDatabaseValue(_ dbValue: OrgPushSDK.DatabaseValue) -> Self?
}
extension OrgPushSDK.TableRecord {
  public static func belongsTo<Destination>(_ destination: Destination.Type, key: Swift.String? = nil, using foreignKey: OrgPushSDK.ForeignKey? = nil) -> OrgPushSDK.BelongsToAssociation<Self, Destination> where Destination : OrgPushSDK.TableRecord
  public static func hasMany<Destination>(_ destination: Destination.Type, key: Swift.String? = nil, using foreignKey: OrgPushSDK.ForeignKey? = nil) -> OrgPushSDK.HasManyAssociation<Self, Destination> where Destination : OrgPushSDK.TableRecord
  public static func hasOne<Destination>(_ destination: Destination.Type, key: Swift.String? = nil, using foreignKey: OrgPushSDK.ForeignKey? = nil) -> OrgPushSDK.HasOneAssociation<Self, Destination> where Destination : OrgPushSDK.TableRecord
}
extension OrgPushSDK.TableRecord {
  public static func belongsTo<Destination>(_ destination: OrgPushSDK.Table<Destination>, key: Swift.String? = nil, using foreignKey: OrgPushSDK.ForeignKey? = nil) -> OrgPushSDK.BelongsToAssociation<Self, Destination>
  public static func hasMany<Destination>(_ destination: OrgPushSDK.Table<Destination>, key: Swift.String? = nil, using foreignKey: OrgPushSDK.ForeignKey? = nil) -> OrgPushSDK.HasManyAssociation<Self, Destination>
  public static func hasOne<Destination>(_ destination: OrgPushSDK.Table<Destination>, key: Swift.String? = nil, using foreignKey: OrgPushSDK.ForeignKey? = nil) -> OrgPushSDK.HasOneAssociation<Self, Destination>
}
extension OrgPushSDK.TableRecord {
  public static func association<Destination>(to cte: OrgPushSDK.CommonTableExpression<Destination>, on condition: @escaping (_ left: OrgPushSDK.TableAlias, _ right: OrgPushSDK.TableAlias) -> OrgPushSDK.SQLExpressible) -> OrgPushSDK.JoinAssociation<Self, Destination>
  public static func association<Destination>(to cte: OrgPushSDK.CommonTableExpression<Destination>) -> OrgPushSDK.JoinAssociation<Self, Destination>
}
extension OrgPushSDK.TableRecord {
  public static func hasMany<Pivot, Target>(_ destination: Target.RowDecoder.Type, through pivot: Pivot, using target: Target, key: Swift.String? = nil) -> OrgPushSDK.HasManyThroughAssociation<Self, Target.RowDecoder> where Self == Pivot.OriginRowDecoder, Pivot : OrgPushSDK.Association, Target : OrgPushSDK.Association, Pivot.RowDecoder == Target.OriginRowDecoder
  public static func hasOne<Pivot, Target>(_ destination: Target.RowDecoder.Type, through pivot: Pivot, using target: Target, key: Swift.String? = nil) -> OrgPushSDK.HasOneThroughAssociation<Self, Target.RowDecoder> where Self == Pivot.OriginRowDecoder, Pivot : OrgPushSDK.AssociationToOne, Target : OrgPushSDK.AssociationToOne, Pivot.RowDecoder == Target.OriginRowDecoder
}
extension OrgPushSDK.TableRecord where Self : OrgPushSDK.EncodableRecord {
  public func request<A>(for association: A) -> OrgPushSDK.QueryInterfaceRequest<A.RowDecoder> where Self == A.OriginRowDecoder, A : OrgPushSDK.Association
}
extension OrgPushSDK.TableRecord {
  public static func including<A>(all association: A) -> OrgPushSDK.QueryInterfaceRequest<Self> where Self == A.OriginRowDecoder, A : OrgPushSDK.AssociationToMany
  public static func including<A>(optional association: A) -> OrgPushSDK.QueryInterfaceRequest<Self> where Self == A.OriginRowDecoder, A : OrgPushSDK.Association
  public static func including<A>(required association: A) -> OrgPushSDK.QueryInterfaceRequest<Self> where Self == A.OriginRowDecoder, A : OrgPushSDK.Association
  public static func joining<A>(optional association: A) -> OrgPushSDK.QueryInterfaceRequest<Self> where Self == A.OriginRowDecoder, A : OrgPushSDK.Association
  public static func joining<A>(required association: A) -> OrgPushSDK.QueryInterfaceRequest<Self> where Self == A.OriginRowDecoder, A : OrgPushSDK.Association
  public static func annotated<A>(withOptional association: A) -> OrgPushSDK.QueryInterfaceRequest<Self> where Self == A.OriginRowDecoder, A : OrgPushSDK.Association
  public static func annotated<A>(withRequired association: A) -> OrgPushSDK.QueryInterfaceRequest<Self> where Self == A.OriginRowDecoder, A : OrgPushSDK.Association
}
extension OrgPushSDK.TableRecord {
  public static func annotated(with aggregates: OrgPushSDK.AssociationAggregate<Self>...) -> OrgPushSDK.QueryInterfaceRequest<Self>
  public static func annotated(with aggregates: [OrgPushSDK.AssociationAggregate<Self>]) -> OrgPushSDK.QueryInterfaceRequest<Self>
  public static func having(_ predicate: OrgPushSDK.AssociationAggregate<Self>) -> OrgPushSDK.QueryInterfaceRequest<Self>
}
public typealias SQLiteStatement = Swift.OpaquePointer
@_hasMissingDesignatedInitializers final public class Statement {
  final public let sqliteStatement: OrgPushSDK.SQLiteStatement
  final public var sql: Swift.String {
    get
  }
  final public var columnNames: [Swift.String] {
    get
    set
  }
  final public var databaseRegion: OrgPushSDK.DatabaseRegion {
    get
  }
  final public var isReadonly: Swift.Bool {
    get
  }
  @usableFromInline
  unowned final internal let database: OrgPushSDK.Database
  @objc deinit
  final public var arguments: OrgPushSDK.StatementArguments {
    get
    set
  }
  final public func validateArguments(_ arguments: OrgPushSDK.StatementArguments) throws
  final public func setUncheckedArguments(_ arguments: OrgPushSDK.StatementArguments)
  final public func setArguments(_ arguments: OrgPushSDK.StatementArguments) throws
  final public func execute(arguments: OrgPushSDK.StatementArguments? = nil) throws
  @usableFromInline
  final internal func forEachStep(_ body: (OrgPushSDK.SQLiteStatement) throws -> Swift.Void) throws
  @usableFromInline
  final internal func step<Element>(_ body: (OrgPushSDK.SQLiteStatement) throws -> Element) throws -> Element?
}
@available(*, deprecated, renamed: "Statement")
public typealias SelectStatement = OrgPushSDK.Statement
@available(*, deprecated, renamed: "Statement")
public typealias UpdateStatement = OrgPushSDK.Statement
extension OrgPushSDK.Statement : Swift.CustomStringConvertible {
  final public var description: Swift.String {
    get
  }
}
extension OrgPushSDK.Statement {
  final public var columnCount: Swift.Int {
    get
  }
  final public func index(ofColumn name: Swift.String) -> Swift.Int?
}
public protocol _DatabaseCursor : OrgPushSDK.Cursor {
  var _isDone: Swift.Bool { get set }
  func _element(sqliteStatement: OrgPushSDK.SQLiteStatement) throws -> Self.Element
}
public protocol DatabaseCursor : OrgPushSDK._DatabaseCursor {
  var statement: OrgPushSDK.Statement { get }
}
extension OrgPushSDK.DatabaseCursor {
  @inlinable public func next() throws -> Self.Element? {
        if _isDone {
            return nil
        }
        if let element = try statement.step(_element) {
            return element
        }
        _isDone = true
        return nil
    }
  @inlinable public func forEach(_ body: (Self.Element) throws -> Swift.Void) throws {
        if _isDone { return }
        try statement.forEachStep { try body(_element(sqliteStatement: $0)) }
        _isDone = true
    }
}
public protocol StatementBinding {
  func bind(to sqliteStatement: OrgPushSDK.SQLiteStatement, at index: Swift.CInt) -> Swift.CInt
}
public struct StatementArguments : Swift.CustomStringConvertible, Swift.Equatable, Swift.ExpressibleByArrayLiteral, Swift.ExpressibleByDictionaryLiteral {
  public var isEmpty: Swift.Bool {
    get
  }
  public init()
  public init<Sequence>(_ sequence: Sequence) where Sequence : Swift.Sequence, Sequence.Element == OrgPushSDK.DatabaseValueConvertible?
  public init<Sequence>(_ sequence: Sequence) where Sequence : Swift.Sequence, Sequence.Element : OrgPushSDK.DatabaseValueConvertible
  public init?(_ array: [Any])
  public init(_ dictionary: [Swift.String : OrgPushSDK.DatabaseValueConvertible?])
  public init<Sequence>(_ sequence: Sequence) where Sequence : Swift.Sequence, Sequence.Element == (Swift.String, OrgPushSDK.DatabaseValueConvertible?)
  public init?(_ dictionary: [Swift.AnyHashable : Any])
  public mutating func append(contentsOf arguments: OrgPushSDK.StatementArguments) -> [Swift.String : OrgPushSDK.DatabaseValue]
  public static func + (lhs: OrgPushSDK.StatementArguments, rhs: OrgPushSDK.StatementArguments) -> OrgPushSDK.StatementArguments
  public static func &+ (lhs: OrgPushSDK.StatementArguments, rhs: OrgPushSDK.StatementArguments) -> OrgPushSDK.StatementArguments
  public static func += (lhs: inout OrgPushSDK.StatementArguments, rhs: OrgPushSDK.StatementArguments)
  public static func == (a: OrgPushSDK.StatementArguments, b: OrgPushSDK.StatementArguments) -> Swift.Bool
  public typealias ArrayLiteralElement = OrgPushSDK.DatabaseValueConvertible?
  public typealias Key = Swift.String
  public typealias Value = OrgPushSDK.DatabaseValueConvertible?
}
extension OrgPushSDK.StatementArguments {
  public init(arrayLiteral elements: OrgPushSDK.DatabaseValueConvertible?...)
}
extension OrgPushSDK.StatementArguments {
  public init(dictionaryLiteral elements: (Swift.String, OrgPushSDK.DatabaseValueConvertible?)...)
}
extension OrgPushSDK.StatementArguments {
  public var description: Swift.String {
    get
  }
}
extension OrgPushSDK.StatementArguments : OrgPushSDK.GRDBSendable {
}
@usableFromInline
internal struct SQLiteDateParser {
  @usableFromInline
  internal init()
  @usableFromInline
  internal func components(cString: Swift.UnsafePointer<Swift.CChar>, length: Swift.Int) -> OrgPushSDK.DatabaseDateComponents?
}
extension OrgPushSDK.Database {
  final public func add(transactionObserver: OrgPushSDK.TransactionObserver, extent: OrgPushSDK.Database.TransactionObservationExtent = .observerLifetime)
  final public func remove(transactionObserver: OrgPushSDK.TransactionObserver)
  final public func afterNextTransactionCommit(_ closure: @escaping (OrgPushSDK.Database) -> Swift.Void)
  public enum TransactionObservationExtent {
    case observerLifetime
    case nextTransaction
    case databaseLifetime
    public static func == (a: OrgPushSDK.Database.TransactionObservationExtent, b: OrgPushSDK.Database.TransactionObservationExtent) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public protocol TransactionObserver : AnyObject {
  func observes(eventsOfKind eventKind: OrgPushSDK.DatabaseEventKind) -> Swift.Bool
  func databaseDidChange(with event: OrgPushSDK.DatabaseEvent)
  func databaseWillCommit() throws
  func databaseDidCommit(_ db: OrgPushSDK.Database)
  func databaseDidRollback(_ db: OrgPushSDK.Database)
}
extension OrgPushSDK.TransactionObserver {
  public func databaseWillCommit() throws
  public func stopObservingDatabaseChangesUntilNextTransaction()
}
@frozen public enum DatabaseEventKind {
  case insert(tableName: Swift.String)
  case delete(tableName: Swift.String)
  case update(tableName: Swift.String, columnNames: Swift.Set<Swift.String>)
}
extension OrgPushSDK.DatabaseEventKind {
  public var tableName: Swift.String {
    get
  }
}
public struct DatabaseEvent {
  public enum Kind : Swift.Int32 {
    case insert
    case delete
    case update
    public init?(rawValue: Swift.Int32)
    public typealias RawValue = Swift.Int32
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public let kind: OrgPushSDK.DatabaseEvent.Kind
  public var databaseName: Swift.String {
    get
  }
  public var tableName: Swift.String {
    get
  }
  public let rowID: Swift.Int64
  public func copy() -> OrgPushSDK.DatabaseEvent
}
@_hasMissingDesignatedInitializers final public class Row : Swift.Equatable, Swift.Hashable, Swift.RandomAccessCollection, Swift.ExpressibleByDictionaryLiteral, Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible {
  @usableFromInline
  final internal let sqliteStatement: OrgPushSDK.SQLiteStatement?
  final public let count: Swift.Int
  final public var prefetchedRows: OrgPushSDK.Row.PrefetchedRowsView {
    get
  }
  convenience public init()
  convenience public init(_ dictionary: [Swift.String : OrgPushSDK.DatabaseValueConvertible?])
  convenience public init?(_ dictionary: [Swift.AnyHashable : Any])
  convenience public init(dictionaryLiteral elements: (Swift.String, OrgPushSDK.DatabaseValueConvertible?)...)
  final public func copy() -> OrgPushSDK.Row
  public typealias Element = (Swift.String, OrgPushSDK.DatabaseValue)
  public typealias Index = OrgPushSDK.RowIndex
  public typealias Indices = Swift.Range<OrgPushSDK.RowIndex>
  public typealias Iterator = Swift.IndexingIterator<OrgPushSDK.Row>
  public typealias Key = Swift.String
  public typealias SubSequence = Swift.Slice<OrgPushSDK.Row>
  public typealias Value = OrgPushSDK.DatabaseValueConvertible?
  @objc deinit
  final public var hashValue: Swift.Int {
    get
  }
}
extension OrgPushSDK.Row {
  final public var columnNames: Swift.LazyMapCollection<OrgPushSDK.Row, Swift.String> {
    get
  }
  final public func hasColumn(_ columnName: Swift.String) -> Swift.Bool
  @usableFromInline
  final internal func index(forColumn name: Swift.String) -> Swift.Int?
}
extension OrgPushSDK.Row {
  @usableFromInline
  @inline(__always) final internal func _checkIndex(_ index: Swift.Int, file: Swift.StaticString = #file, line: Swift.UInt = #line)
  final public var containsNonNullValue: Swift.Bool {
    get
  }
  final public func hasNull(atIndex index: Swift.Int) -> Swift.Bool
  final public subscript(index: Swift.Int) -> OrgPushSDK.DatabaseValueConvertible? {
    get
  }
  @inlinable final public subscript<Value>(index: Swift.Int) -> Value? where Value : OrgPushSDK.DatabaseValueConvertible {
    get {
        try! decodeIfPresent(Value.self, atIndex: index)
    }
  }
  @inline(__always) @inlinable final public subscript<Value>(index: Swift.Int) -> Value? where Value : OrgPushSDK.DatabaseValueConvertible, Value : OrgPushSDK.StatementColumnConvertible {
    get {
        try! decodeIfPresent(Value.self, atIndex: index)
    }
  }
  @inlinable final public subscript<Value>(index: Swift.Int) -> Value where Value : OrgPushSDK.DatabaseValueConvertible {
    get {
        try! decode(Value.self, atIndex: index)
    }
  }
  @inline(__always) @inlinable final public subscript<Value>(index: Swift.Int) -> Value where Value : OrgPushSDK.DatabaseValueConvertible, Value : OrgPushSDK.StatementColumnConvertible {
    get {
        try! decode(Value.self, atIndex: index)
    }
  }
  final public subscript(columnName: Swift.String) -> OrgPushSDK.DatabaseValueConvertible? {
    get
  }
  @inlinable final public subscript<Value>(columnName: Swift.String) -> Value? where Value : OrgPushSDK.DatabaseValueConvertible {
    get {
        try! decodeIfPresent(Value.self, forKey: columnName)
    }
  }
  @inlinable final public subscript<Value>(columnName: Swift.String) -> Value? where Value : OrgPushSDK.DatabaseValueConvertible, Value : OrgPushSDK.StatementColumnConvertible {
    get {
        try! decodeIfPresent(Value.self, forKey: columnName)
    }
  }
  @inlinable final public subscript<Value>(columnName: Swift.String) -> Value where Value : OrgPushSDK.DatabaseValueConvertible {
    get {
        try! decode(Value.self, forKey: columnName)
    }
  }
  @inlinable final public subscript<Value>(columnName: Swift.String) -> Value where Value : OrgPushSDK.DatabaseValueConvertible, Value : OrgPushSDK.StatementColumnConvertible {
    get {
        try! decode(Value.self, forKey: columnName)
    }
  }
  final public subscript<Column>(column: Column) -> OrgPushSDK.DatabaseValueConvertible? where Column : OrgPushSDK.ColumnExpression {
    get
  }
  @inlinable final public subscript<Value, Column>(column: Column) -> Value? where Value : OrgPushSDK.DatabaseValueConvertible, Column : OrgPushSDK.ColumnExpression {
    get {
        try! decodeIfPresent(Value.self, forKey: column.name)
    }
  }
  @inlinable final public subscript<Value, Column>(column: Column) -> Value? where Value : OrgPushSDK.DatabaseValueConvertible, Value : OrgPushSDK.StatementColumnConvertible, Column : OrgPushSDK.ColumnExpression {
    get {
        try! decodeIfPresent(Value.self, forKey: column.name)
    }
  }
  @inlinable final public subscript<Value, Column>(column: Column) -> Value where Value : OrgPushSDK.DatabaseValueConvertible, Column : OrgPushSDK.ColumnExpression {
    get {
        try! decode(Value.self, forKey: column.name)
    }
  }
  @inlinable final public subscript<Value, Column>(column: Column) -> Value where Value : OrgPushSDK.DatabaseValueConvertible, Value : OrgPushSDK.StatementColumnConvertible, Column : OrgPushSDK.ColumnExpression {
    get {
        try! decode(Value.self, forKey: column.name)
    }
  }
  final public func dataNoCopy(atIndex index: Swift.Int) -> Foundation.Data?
  final public func dataNoCopy(named columnName: Swift.String) -> Foundation.Data?
  final public func dataNoCopy<Column>(_ column: Column) -> Foundation.Data? where Column : OrgPushSDK.ColumnExpression
}
extension OrgPushSDK.Row {
  final public var databaseValues: Swift.LazyMapCollection<OrgPushSDK.Row, OrgPushSDK.DatabaseValue> {
    get
  }
}
extension OrgPushSDK.Row {
  final public subscript<Record>(scope: Swift.String) -> Record where Record : OrgPushSDK.FetchableRecord {
    get
  }
  final public subscript<Record>(scope: Swift.String) -> Record? where Record : OrgPushSDK.FetchableRecord {
    get
  }
  final public subscript<Collection>(key: Swift.String) -> Collection where Collection : Swift.RangeReplaceableCollection, Collection.Element : OrgPushSDK.FetchableRecord {
    get
  }
  final public subscript<Record>(key: Swift.String) -> Swift.Set<Record> where Record : OrgPushSDK.FetchableRecord, Record : Swift.Hashable {
    get
  }
}
extension OrgPushSDK.Row {
  final public var scopes: OrgPushSDK.Row.ScopesView {
    get
  }
  final public var scopesTree: OrgPushSDK.Row.ScopesTreeView {
    get
  }
  final public var unscoped: OrgPushSDK.Row {
    get
  }
  final public var unadapted: OrgPushSDK.Row {
    get
  }
}
extension OrgPushSDK.Row {
  @inlinable final internal func decodeIfPresent<Value>(_ type: Value.Type = Value.self, atIndex index: Swift.Int) throws -> Value? where Value : OrgPushSDK.DatabaseValueConvertible {
        _checkIndex(index)
        return try Value.decodeIfPresent(fromRow: self, atUncheckedIndex: index)
    }
  @inlinable final internal func decode<Value>(_ type: Value.Type = Value.self, atIndex index: Swift.Int) throws -> Value where Value : OrgPushSDK.DatabaseValueConvertible {
        _checkIndex(index)
        return try Value.decode(fromRow: self, atUncheckedIndex: index)
    }
  @inlinable final internal func decodeIfPresent<Value>(_ type: Value.Type = Value.self, forKey columnName: Swift.String) throws -> Value? where Value : OrgPushSDK.DatabaseValueConvertible {
        guard let index = index(forColumn: columnName) else {
            return nil
        }
        return try Value.decodeIfPresent(fromRow: self, atUncheckedIndex: index)
    }
  @inlinable final internal func decode<Value>(_ type: Value.Type = Value.self, forKey columnName: Swift.String) throws -> Value where Value : OrgPushSDK.DatabaseValueConvertible {
        guard let index = index(forColumn: columnName) else {
            throw RowDecodingError.columnNotFound(columnName, context: RowDecodingContext(row: self))
        }
        return try Value.decode(fromRow: self, atUncheckedIndex: index)
    }
}
extension OrgPushSDK.Row {
  @inline(__always) @inlinable final internal func decodeIfPresent<Value>(_ type: Value.Type = Value.self, atIndex index: Swift.Int) throws -> Value? where Value : OrgPushSDK.DatabaseValueConvertible, Value : OrgPushSDK.StatementColumnConvertible {
        _checkIndex(index)
        return try Value.fastDecodeIfPresent(fromRow: self, atUncheckedIndex: index)
    }
  @inline(__always) @inlinable final internal func decode<Value>(_ type: Value.Type = Value.self, atIndex index: Swift.Int) throws -> Value where Value : OrgPushSDK.DatabaseValueConvertible, Value : OrgPushSDK.StatementColumnConvertible {
        _checkIndex(index)
        return try Value.fastDecode(fromRow: self, atUncheckedIndex: index)
    }
  @inline(__always) @inlinable final internal func decodeIfPresent<Value>(_ type: Value.Type = Value.self, forKey columnName: Swift.String) throws -> Value? where Value : OrgPushSDK.DatabaseValueConvertible, Value : OrgPushSDK.StatementColumnConvertible {
        guard let index = index(forColumn: columnName) else {
            return nil
        }
        return try Value.fastDecodeIfPresent(fromRow: self, atUncheckedIndex: index)
    }
  @inlinable final internal func decode<Value>(_ type: Value.Type = Value.self, forKey columnName: Swift.String) throws -> Value where Value : OrgPushSDK.DatabaseValueConvertible, Value : OrgPushSDK.StatementColumnConvertible {
        guard let index = index(forColumn: columnName) else {
            throw RowDecodingError.columnNotFound(columnName, context: RowDecodingContext(row: self))
        }
        return try Value.fastDecode(fromRow: self, atUncheckedIndex: index)
    }
  @usableFromInline
  final internal func fastDecode<Value>(_ type: Value.Type, atUncheckedIndex index: Swift.Int) throws -> Value where Value : OrgPushSDK.DatabaseValueConvertible, Value : OrgPushSDK.StatementColumnConvertible
  @usableFromInline
  final internal func fastDecodeIfPresent<Value>(_ type: Value.Type, atUncheckedIndex index: Swift.Int) throws -> Value? where Value : OrgPushSDK.DatabaseValueConvertible, Value : OrgPushSDK.StatementColumnConvertible
}
@_hasMissingDesignatedInitializers final public class RowCursor : OrgPushSDK.DatabaseCursor {
  public typealias Element = OrgPushSDK.Row
  final public let statement: OrgPushSDK.Statement
  final public var _isDone: Swift.Bool
  @usableFromInline
  final internal let _row: OrgPushSDK.Row
  @objc deinit
  @inlinable final public func _element(sqliteStatement: OrgPushSDK.SQLiteStatement) -> OrgPushSDK.Row { _row }
}
extension OrgPushSDK.Row {
  public static func fetchCursor(_ statement: OrgPushSDK.Statement, arguments: OrgPushSDK.StatementArguments? = nil, adapter: OrgPushSDK.RowAdapter? = nil) throws -> OrgPushSDK.RowCursor
  public static func fetchAll(_ statement: OrgPushSDK.Statement, arguments: OrgPushSDK.StatementArguments? = nil, adapter: OrgPushSDK.RowAdapter? = nil) throws -> [OrgPushSDK.Row]
  public static func fetchSet(_ statement: OrgPushSDK.Statement, arguments: OrgPushSDK.StatementArguments? = nil, adapter: OrgPushSDK.RowAdapter? = nil) throws -> Swift.Set<OrgPushSDK.Row>
  public static func fetchOne(_ statement: OrgPushSDK.Statement, arguments: OrgPushSDK.StatementArguments? = nil, adapter: OrgPushSDK.RowAdapter? = nil) throws -> OrgPushSDK.Row?
}
extension OrgPushSDK.Row {
  public static func fetchCursor(_ db: OrgPushSDK.Database, sql: Swift.String, arguments: OrgPushSDK.StatementArguments = StatementArguments(), adapter: OrgPushSDK.RowAdapter? = nil) throws -> OrgPushSDK.RowCursor
  public static func fetchAll(_ db: OrgPushSDK.Database, sql: Swift.String, arguments: OrgPushSDK.StatementArguments = StatementArguments(), adapter: OrgPushSDK.RowAdapter? = nil) throws -> [OrgPushSDK.Row]
  public static func fetchSet(_ db: OrgPushSDK.Database, sql: Swift.String, arguments: OrgPushSDK.StatementArguments = StatementArguments(), adapter: OrgPushSDK.RowAdapter? = nil) throws -> Swift.Set<OrgPushSDK.Row>
  public static func fetchOne(_ db: OrgPushSDK.Database, sql: Swift.String, arguments: OrgPushSDK.StatementArguments = StatementArguments(), adapter: OrgPushSDK.RowAdapter? = nil) throws -> OrgPushSDK.Row?
}
extension OrgPushSDK.Row {
  public static func fetchCursor<R>(_ db: OrgPushSDK.Database, _ request: R) throws -> OrgPushSDK.RowCursor where R : OrgPushSDK.FetchRequest
  public static func fetchAll<R>(_ db: OrgPushSDK.Database, _ request: R) throws -> [OrgPushSDK.Row] where R : OrgPushSDK.FetchRequest
  public static func fetchSet<R>(_ db: OrgPushSDK.Database, _ request: R) throws -> Swift.Set<OrgPushSDK.Row> where R : OrgPushSDK.FetchRequest
  public static func fetchOne<R>(_ db: OrgPushSDK.Database, _ request: R) throws -> OrgPushSDK.Row? where R : OrgPushSDK.FetchRequest
}
extension OrgPushSDK.FetchRequest where Self.RowDecoder == OrgPushSDK.Row {
  public func fetchCursor(_ db: OrgPushSDK.Database) throws -> OrgPushSDK.RowCursor
  public func fetchAll(_ db: OrgPushSDK.Database) throws -> [OrgPushSDK.Row]
  public func fetchSet(_ db: OrgPushSDK.Database) throws -> Swift.Set<OrgPushSDK.Row>
  public func fetchOne(_ db: OrgPushSDK.Database) throws -> OrgPushSDK.Row?
}
extension OrgPushSDK.Row {
  final public var startIndex: OrgPushSDK.RowIndex {
    get
  }
  final public var endIndex: OrgPushSDK.RowIndex {
    get
  }
  final public subscript(position: OrgPushSDK.RowIndex) -> (Swift.String, OrgPushSDK.DatabaseValue) {
    get
  }
}
extension OrgPushSDK.Row {
  public static func == (lhs: OrgPushSDK.Row, rhs: OrgPushSDK.Row) -> Swift.Bool
}
extension OrgPushSDK.Row {
  final public func hash(into hasher: inout Swift.Hasher)
}
extension OrgPushSDK.Row {
  final public var description: Swift.String {
    get
  }
  final public var debugDescription: Swift.String {
    get
  }
}
public struct RowIndex : Swift.Comparable, Swift.Strideable {
  public typealias Stride = Swift.Int
}
extension OrgPushSDK.RowIndex {
  public static func == (lhs: OrgPushSDK.RowIndex, rhs: OrgPushSDK.RowIndex) -> Swift.Bool
  public static func < (lhs: OrgPushSDK.RowIndex, rhs: OrgPushSDK.RowIndex) -> Swift.Bool
}
extension OrgPushSDK.RowIndex {
  public func distance(to other: OrgPushSDK.RowIndex) -> Swift.Int
  public func advanced(by n: Swift.Int) -> OrgPushSDK.RowIndex
}
extension OrgPushSDK.Row {
  public struct ScopesView : Swift.Collection {
    public typealias Index = Swift.Dictionary<Swift.String, OrgPushSDK._LayoutedRowAdapter>.Index
    public var names: Swift.Dictionary<Swift.String, OrgPushSDK._LayoutedRowAdapter>.Keys {
      get
    }
    public var startIndex: OrgPushSDK.Row.ScopesView.Index {
      get
    }
    public var endIndex: OrgPushSDK.Row.ScopesView.Index {
      get
    }
    public func index(after i: OrgPushSDK.Row.ScopesView.Index) -> OrgPushSDK.Row.ScopesView.Index
    public subscript(position: OrgPushSDK.Row.ScopesView.Index) -> (name: Swift.String, row: OrgPushSDK.Row) {
      get
    }
    public subscript(name: Swift.String) -> OrgPushSDK.Row? {
      get
    }
    public typealias Element = (name: Swift.String, row: OrgPushSDK.Row)
    public typealias Indices = Swift.DefaultIndices<OrgPushSDK.Row.ScopesView>
    public typealias Iterator = Swift.IndexingIterator<OrgPushSDK.Row.ScopesView>
    public typealias SubSequence = Swift.Slice<OrgPushSDK.Row.ScopesView>
  }
}
extension OrgPushSDK.Row {
  public struct ScopesTreeView {
    public var names: Swift.Set<Swift.String> {
      get
    }
    public subscript(name: Swift.String) -> OrgPushSDK.Row? {
      get
    }
  }
}
extension OrgPushSDK.Row {
  public struct PrefetchedRowsView : Swift.Equatable {
    public var isEmpty: Swift.Bool {
      get
    }
    public var keys: Swift.Set<Swift.String> {
      get
    }
    public subscript(key: Swift.String) -> [OrgPushSDK.Row]? {
      get
    }
    public static func == (a: OrgPushSDK.Row.PrefetchedRowsView, b: OrgPushSDK.Row.PrefetchedRowsView) -> Swift.Bool
  }
}
public struct Channel : Swift.Codable, Swift.Hashable, OrgPushSDK.TableRecord, OrgPushSDK.FetchableRecord, OrgPushSDK.MutablePersistableRecord {
  public var name: Swift.String?
  public var messageId: Swift.String
  #if compiler(>=5.3) && $EffectfulProp
  public var messageLink: OrgPushSDK.Message? {
    get throws
  }
  #endif
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: OrgPushSDK.Channel, b: OrgPushSDK.Channel) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
public struct FTS3Pattern {
  public let rawPattern: Swift.String
  public init(rawPattern: Swift.String) throws
  public init?(matchingAnyTokenIn string: Swift.String)
  public init?(matchingAllTokensIn string: Swift.String)
  public init?(matchingAllPrefixesIn string: Swift.String)
  public init?(matchingPhrase string: Swift.String)
}
extension OrgPushSDK.FTS3Pattern : OrgPushSDK.DatabaseValueConvertible {
  public var databaseValue: OrgPushSDK.DatabaseValue {
    get
  }
  public static func fromDatabaseValue(_ dbValue: OrgPushSDK.DatabaseValue) -> OrgPushSDK.FTS3Pattern?
}
public protocol DatabaseValueConvertible : OrgPushSDK.SQLExpressible, OrgPushSDK.StatementBinding {
  var databaseValue: OrgPushSDK.DatabaseValue { get }
  static func fromDatabaseValue(_ dbValue: OrgPushSDK.DatabaseValue) -> Self?
}
extension OrgPushSDK.DatabaseValueConvertible {
  public var sqlExpression: OrgPushSDK.SQLExpression {
    get
  }
  public func bind(to sqliteStatement: OrgPushSDK.SQLiteStatement, at index: Swift.CInt) -> Swift.CInt
}
extension OrgPushSDK.DatabaseValueConvertible {
  @usableFromInline
  internal static func decode(fromRow row: OrgPushSDK.Row, atUncheckedIndex index: Swift.Int) throws -> Self
  @usableFromInline
  internal static func decodeIfPresent(fromRow row: OrgPushSDK.Row, atUncheckedIndex index: Swift.Int) throws -> Self?
}
@_hasMissingDesignatedInitializers final public class DatabaseValueCursor<Value> : OrgPushSDK.DatabaseCursor where Value : OrgPushSDK.DatabaseValueConvertible {
  public typealias Element = Value
  final public let statement: OrgPushSDK.Statement
  final public var _isDone: Swift.Bool
  @objc deinit
  final public func _element(sqliteStatement: OrgPushSDK.SQLiteStatement) -> Value
}
@_hasMissingDesignatedInitializers final public class NullableDatabaseValueCursor<Value> : OrgPushSDK.DatabaseCursor where Value : OrgPushSDK.DatabaseValueConvertible {
  public typealias Element = Value?
  final public let statement: OrgPushSDK.Statement
  final public var _isDone: Swift.Bool
  @objc deinit
  final public func _element(sqliteStatement: OrgPushSDK.SQLiteStatement) -> Value?
}
extension OrgPushSDK.DatabaseValueConvertible {
  public static func fetchCursor(_ statement: OrgPushSDK.Statement, arguments: OrgPushSDK.StatementArguments? = nil, adapter: OrgPushSDK.RowAdapter? = nil) throws -> OrgPushSDK.DatabaseValueCursor<Self>
  public static func fetchAll(_ statement: OrgPushSDK.Statement, arguments: OrgPushSDK.StatementArguments? = nil, adapter: OrgPushSDK.RowAdapter? = nil) throws -> [Self]
  public static func fetchOne(_ statement: OrgPushSDK.Statement, arguments: OrgPushSDK.StatementArguments? = nil, adapter: OrgPushSDK.RowAdapter? = nil) throws -> Self?
}
extension OrgPushSDK.DatabaseValueConvertible where Self : Swift.Hashable {
  public static func fetchSet(_ statement: OrgPushSDK.Statement, arguments: OrgPushSDK.StatementArguments? = nil, adapter: OrgPushSDK.RowAdapter? = nil) throws -> Swift.Set<Self>
}
extension OrgPushSDK.DatabaseValueConvertible {
  public static func fetchCursor(_ db: OrgPushSDK.Database, sql: Swift.String, arguments: OrgPushSDK.StatementArguments = StatementArguments(), adapter: OrgPushSDK.RowAdapter? = nil) throws -> OrgPushSDK.DatabaseValueCursor<Self>
  public static func fetchAll(_ db: OrgPushSDK.Database, sql: Swift.String, arguments: OrgPushSDK.StatementArguments = StatementArguments(), adapter: OrgPushSDK.RowAdapter? = nil) throws -> [Self]
  public static func fetchOne(_ db: OrgPushSDK.Database, sql: Swift.String, arguments: OrgPushSDK.StatementArguments = StatementArguments(), adapter: OrgPushSDK.RowAdapter? = nil) throws -> Self?
}
extension OrgPushSDK.DatabaseValueConvertible where Self : Swift.Hashable {
  public static func fetchSet(_ db: OrgPushSDK.Database, sql: Swift.String, arguments: OrgPushSDK.StatementArguments = StatementArguments(), adapter: OrgPushSDK.RowAdapter? = nil) throws -> Swift.Set<Self>
}
extension OrgPushSDK.DatabaseValueConvertible {
  public static func fetchCursor<R>(_ db: OrgPushSDK.Database, _ request: R) throws -> OrgPushSDK.DatabaseValueCursor<Self> where R : OrgPushSDK.FetchRequest
  public static func fetchAll<R>(_ db: OrgPushSDK.Database, _ request: R) throws -> [Self] where R : OrgPushSDK.FetchRequest
  public static func fetchOne<R>(_ db: OrgPushSDK.Database, _ request: R) throws -> Self? where R : OrgPushSDK.FetchRequest
}
extension OrgPushSDK.DatabaseValueConvertible where Self : Swift.Hashable {
  public static func fetchSet<R>(_ db: OrgPushSDK.Database, _ request: R) throws -> Swift.Set<Self> where R : OrgPushSDK.FetchRequest
}
extension OrgPushSDK.FetchRequest where Self.RowDecoder : OrgPushSDK.DatabaseValueConvertible {
  public func fetchCursor(_ db: OrgPushSDK.Database) throws -> OrgPushSDK.DatabaseValueCursor<Self.RowDecoder>
  public func fetchAll(_ db: OrgPushSDK.Database) throws -> [Self.RowDecoder]
  public func fetchOne(_ db: OrgPushSDK.Database) throws -> Self.RowDecoder?
}
extension OrgPushSDK.FetchRequest where Self.RowDecoder : OrgPushSDK.DatabaseValueConvertible, Self.RowDecoder : Swift.Hashable {
  public func fetchSet(_ db: OrgPushSDK.Database) throws -> Swift.Set<Self.RowDecoder>
}
extension Swift.Optional where Wrapped : OrgPushSDK.DatabaseValueConvertible {
  public static func fetchCursor(_ statement: OrgPushSDK.Statement, arguments: OrgPushSDK.StatementArguments? = nil, adapter: OrgPushSDK.RowAdapter? = nil) throws -> OrgPushSDK.NullableDatabaseValueCursor<Wrapped>
  public static func fetchAll(_ statement: OrgPushSDK.Statement, arguments: OrgPushSDK.StatementArguments? = nil, adapter: OrgPushSDK.RowAdapter? = nil) throws -> [Wrapped?]
}
extension Swift.Optional where Wrapped : OrgPushSDK.DatabaseValueConvertible, Wrapped : Swift.Hashable {
  public static func fetchSet(_ statement: OrgPushSDK.Statement, arguments: OrgPushSDK.StatementArguments? = nil, adapter: OrgPushSDK.RowAdapter? = nil) throws -> Swift.Set<Wrapped?>
}
extension Swift.Optional where Wrapped : OrgPushSDK.DatabaseValueConvertible {
  public static func fetchCursor(_ db: OrgPushSDK.Database, sql: Swift.String, arguments: OrgPushSDK.StatementArguments = StatementArguments(), adapter: OrgPushSDK.RowAdapter? = nil) throws -> OrgPushSDK.NullableDatabaseValueCursor<Wrapped>
  public static func fetchAll(_ db: OrgPushSDK.Database, sql: Swift.String, arguments: OrgPushSDK.StatementArguments = StatementArguments(), adapter: OrgPushSDK.RowAdapter? = nil) throws -> [Wrapped?]
}
extension Swift.Optional where Wrapped : OrgPushSDK.DatabaseValueConvertible, Wrapped : Swift.Hashable {
  public static func fetchSet(_ db: OrgPushSDK.Database, sql: Swift.String, arguments: OrgPushSDK.StatementArguments = StatementArguments(), adapter: OrgPushSDK.RowAdapter? = nil) throws -> Swift.Set<Wrapped?>
}
extension Swift.Optional where Wrapped : OrgPushSDK.DatabaseValueConvertible {
  public static func fetchCursor<R>(_ db: OrgPushSDK.Database, _ request: R) throws -> OrgPushSDK.NullableDatabaseValueCursor<Wrapped> where R : OrgPushSDK.FetchRequest
  public static func fetchAll<R>(_ db: OrgPushSDK.Database, _ request: R) throws -> [Wrapped?] where R : OrgPushSDK.FetchRequest
}
extension Swift.Optional where Wrapped : OrgPushSDK.DatabaseValueConvertible, Wrapped : Swift.Hashable {
  public static func fetchSet<R>(_ db: OrgPushSDK.Database, _ request: R) throws -> Swift.Set<Wrapped?> where R : OrgPushSDK.FetchRequest
}
extension OrgPushSDK.FetchRequest where Self.RowDecoder : OrgPushSDK._OptionalProtocol, Self.RowDecoder.Wrapped : OrgPushSDK.DatabaseValueConvertible {
  public func fetchCursor(_ db: OrgPushSDK.Database) throws -> OrgPushSDK.NullableDatabaseValueCursor<Self.RowDecoder.Wrapped>
  public func fetchAll(_ db: OrgPushSDK.Database) throws -> [Self.RowDecoder.Wrapped?]
  public func fetchOne(_ db: OrgPushSDK.Database) throws -> Self.RowDecoder.Wrapped?
}
extension OrgPushSDK.FetchRequest where Self.RowDecoder : OrgPushSDK._OptionalProtocol, Self.RowDecoder.Wrapped : OrgPushSDK.DatabaseValueConvertible, Self.RowDecoder.Wrapped : Swift.Hashable {
  public func fetchSet(_ db: OrgPushSDK.Database) throws -> Swift.Set<Self.RowDecoder.Wrapped?>
}
public enum ResultKind : Swift.String {
  case success
  case error
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers @objc public class BaseApiResult : ObjectiveC.NSObject, Swift.Decodable {
  required public init(from decoder: Swift.Decoder) throws
  public func getResultKind() -> OrgPushSDK.ResultKind
  public func getErrorCode() -> Swift.Int
  public func getErrorDescription() -> Swift.String?
  @objc deinit
}
extension OrgPushSDK.ValueReducers {
  public struct Trace<Base> : OrgPushSDK.ValueReducer where Base : OrgPushSDK.ValueReducer {
    public func _fetch(_ db: OrgPushSDK.Database) throws -> Base.Fetched
    public mutating func _value(_ fetched: Base.Fetched) -> Base.Value?
    public typealias Fetched = Base.Fetched
    public typealias Value = Base.Value
  }
}
extension OrgPushSDK.EncodableRecord where Self : Swift.Encodable {
  public func encode(to container: inout OrgPushSDK.PersistenceContainer)
}
public struct BasicResponse : Swift.Codable {
  public func getResult() -> Swift.String
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct ErrorResponse : Swift.Codable {
  public init(errorCode: Swift.Int, errorDescription: Swift.String)
  public func getResult() -> Swift.String
  public func getErrorCode() -> Swift.Int
  public func getErrorDescription() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct LogsSuccessResponse : Swift.Codable {
  public func getStatus() -> Swift.String
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct LogsErrorResponse : Swift.Codable {
  public func getStatus() -> Swift.String
  public func getDescription() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Table<RowDecoder> {
  public var tableName: Swift.String
  public init(_ tableName: Swift.String)
}
extension OrgPushSDK.Table where RowDecoder == OrgPushSDK.Row {
  public init(_ tableName: Swift.String)
}
extension OrgPushSDK.Table : OrgPushSDK.DatabaseRegionConvertible {
  public func databaseRegion(_ db: OrgPushSDK.Database) throws -> OrgPushSDK.DatabaseRegion
}
extension OrgPushSDK.Table {
  public func all() -> OrgPushSDK.QueryInterfaceRequest<RowDecoder>
  public func none() -> OrgPushSDK.QueryInterfaceRequest<RowDecoder>
  public func select(_ selection: OrgPushSDK.SQLSelectable...) -> OrgPushSDK.QueryInterfaceRequest<RowDecoder>
  public func select(_ selection: [OrgPushSDK.SQLSelectable]) -> OrgPushSDK.QueryInterfaceRequest<RowDecoder>
  public func select(sql: Swift.String, arguments: OrgPushSDK.StatementArguments = StatementArguments()) -> OrgPushSDK.QueryInterfaceRequest<RowDecoder>
  public func select(literal sqlLiteral: OrgPushSDK.SQL) -> OrgPushSDK.QueryInterfaceRequest<RowDecoder>
  public func select<RowDecoder>(_ selection: [OrgPushSDK.SQLSelectable], as type: RowDecoder.Type = RowDecoder.self) -> OrgPushSDK.QueryInterfaceRequest<RowDecoder>
  public func select<RowDecoder>(_ selection: OrgPushSDK.SQLSelectable..., as type: RowDecoder.Type = RowDecoder.self) -> OrgPushSDK.QueryInterfaceRequest<RowDecoder>
  public func select<RowDecoder>(sql: Swift.String, arguments: OrgPushSDK.StatementArguments = StatementArguments(), as type: RowDecoder.Type = RowDecoder.self) -> OrgPushSDK.QueryInterfaceRequest<RowDecoder>
  public func select<RowDecoder>(literal sqlLiteral: OrgPushSDK.SQL, as type: RowDecoder.Type = RowDecoder.self) -> OrgPushSDK.QueryInterfaceRequest<RowDecoder>
  public func annotated(with selection: [OrgPushSDK.SQLSelectable]) -> OrgPushSDK.QueryInterfaceRequest<RowDecoder>
  public func annotated(with selection: OrgPushSDK.SQLSelectable...) -> OrgPushSDK.QueryInterfaceRequest<RowDecoder>
  public func filter(_ predicate: OrgPushSDK.SQLSpecificExpressible) -> OrgPushSDK.QueryInterfaceRequest<RowDecoder>
  public func filter<PrimaryKeyType>(key: PrimaryKeyType?) -> OrgPushSDK.QueryInterfaceRequest<RowDecoder> where PrimaryKeyType : OrgPushSDK.DatabaseValueConvertible
  public func filter<Sequence>(keys: Sequence) -> OrgPushSDK.QueryInterfaceRequest<RowDecoder> where Sequence : Swift.Sequence, Sequence.Element : OrgPushSDK.DatabaseValueConvertible
  public func filter(key: [Swift.String : OrgPushSDK.DatabaseValueConvertible?]?) -> OrgPushSDK.QueryInterfaceRequest<RowDecoder>
  public func filter(keys: [[Swift.String : OrgPushSDK.DatabaseValueConvertible?]]) -> OrgPushSDK.QueryInterfaceRequest<RowDecoder>
  public func filter(sql: Swift.String, arguments: OrgPushSDK.StatementArguments = StatementArguments()) -> OrgPushSDK.QueryInterfaceRequest<RowDecoder>
  public func filter(literal sqlLiteral: OrgPushSDK.SQL) -> OrgPushSDK.QueryInterfaceRequest<RowDecoder>
  public func order(_ orderings: OrgPushSDK.SQLOrderingTerm...) -> OrgPushSDK.QueryInterfaceRequest<RowDecoder>
  public func order(_ orderings: [OrgPushSDK.SQLOrderingTerm]) -> OrgPushSDK.QueryInterfaceRequest<RowDecoder>
  public func orderByPrimaryKey() -> OrgPushSDK.QueryInterfaceRequest<RowDecoder>
  public func order(sql: Swift.String, arguments: OrgPushSDK.StatementArguments = StatementArguments()) -> OrgPushSDK.QueryInterfaceRequest<RowDecoder>
  public func order(literal sqlLiteral: OrgPushSDK.SQL) -> OrgPushSDK.QueryInterfaceRequest<RowDecoder>
  public func limit(_ limit: Swift.Int, offset: Swift.Int? = nil) -> OrgPushSDK.QueryInterfaceRequest<RowDecoder>
  public func aliased(_ alias: OrgPushSDK.TableAlias) -> OrgPushSDK.QueryInterfaceRequest<RowDecoder>
  public func with<T>(_ cte: OrgPushSDK.CommonTableExpression<T>) -> OrgPushSDK.QueryInterfaceRequest<RowDecoder>
}
@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6, *)
extension OrgPushSDK.Table where RowDecoder : Swift.Identifiable, RowDecoder.ID : OrgPushSDK.DatabaseValueConvertible {
  public func filter(id: RowDecoder.ID) -> OrgPushSDK.QueryInterfaceRequest<RowDecoder>
  public func filter<Collection>(ids: Collection) -> OrgPushSDK.QueryInterfaceRequest<RowDecoder> where Collection : Swift.Collection, RowDecoder.ID == Collection.Element
  public func selectID() -> OrgPushSDK.QueryInterfaceRequest<RowDecoder.ID>
}
@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6, *)
extension OrgPushSDK.Table where RowDecoder : Swift.Identifiable, RowDecoder.ID : OrgPushSDK._OptionalProtocol, RowDecoder.ID.Wrapped : OrgPushSDK.DatabaseValueConvertible {
  public func filter(id: RowDecoder.ID.Wrapped) -> OrgPushSDK.QueryInterfaceRequest<RowDecoder>
  public func filter<Collection>(ids: Collection) -> OrgPushSDK.QueryInterfaceRequest<RowDecoder> where Collection : Swift.Collection, Collection.Element : OrgPushSDK.DatabaseValueConvertible, Collection.Element == RowDecoder.ID.Wrapped
  public func selectID() -> OrgPushSDK.QueryInterfaceRequest<RowDecoder.ID.Wrapped>
}
extension OrgPushSDK.Table {
  public func fetchCount(_ db: OrgPushSDK.Database) throws -> Swift.Int
}
extension OrgPushSDK.Table where RowDecoder : OrgPushSDK.FetchableRecord {
  public func fetchCursor(_ db: OrgPushSDK.Database) throws -> OrgPushSDK.RecordCursor<RowDecoder>
  public func fetchAll(_ db: OrgPushSDK.Database) throws -> [RowDecoder]
  public func fetchOne(_ db: OrgPushSDK.Database) throws -> RowDecoder?
}
extension OrgPushSDK.Table where RowDecoder : OrgPushSDK.FetchableRecord, RowDecoder : Swift.Hashable {
  public func fetchSet(_ db: OrgPushSDK.Database) throws -> Swift.Set<RowDecoder>
}
extension OrgPushSDK.Table where RowDecoder == OrgPushSDK.Row {
  public func fetchCursor(_ db: OrgPushSDK.Database) throws -> OrgPushSDK.RowCursor
  public func fetchAll(_ db: OrgPushSDK.Database) throws -> [OrgPushSDK.Row]
  public func fetchOne(_ db: OrgPushSDK.Database) throws -> OrgPushSDK.Row?
  public func fetchSet(_ db: OrgPushSDK.Database) throws -> Swift.Set<OrgPushSDK.Row>
}
extension OrgPushSDK.Table where RowDecoder : OrgPushSDK.DatabaseValueConvertible {
  public func fetchCursor(_ db: OrgPushSDK.Database) throws -> OrgPushSDK.DatabaseValueCursor<RowDecoder>
  public func fetchAll(_ db: OrgPushSDK.Database) throws -> [RowDecoder]
  public func fetchOne(_ db: OrgPushSDK.Database) throws -> RowDecoder?
}
extension OrgPushSDK.Table where RowDecoder : OrgPushSDK.DatabaseValueConvertible, RowDecoder : Swift.Hashable {
  public func fetchSet(_ db: OrgPushSDK.Database) throws -> Swift.Set<RowDecoder>
}
extension OrgPushSDK.Table where RowDecoder : OrgPushSDK._OptionalProtocol, RowDecoder.Wrapped : OrgPushSDK.DatabaseValueConvertible {
  public func fetchCursor(_ db: OrgPushSDK.Database) throws -> OrgPushSDK.NullableDatabaseValueCursor<RowDecoder.Wrapped>
  public func fetchAll(_ db: OrgPushSDK.Database) throws -> [RowDecoder.Wrapped?]
  public func fetchOne(_ db: OrgPushSDK.Database) throws -> RowDecoder.Wrapped?
}
extension OrgPushSDK.Table where RowDecoder : OrgPushSDK._OptionalProtocol, RowDecoder.Wrapped : OrgPushSDK.DatabaseValueConvertible, RowDecoder.Wrapped : Swift.Hashable {
  public func fetchSet(_ db: OrgPushSDK.Database) throws -> Swift.Set<RowDecoder.Wrapped?>
}
extension OrgPushSDK.Table where RowDecoder : OrgPushSDK.DatabaseValueConvertible, RowDecoder : OrgPushSDK.StatementColumnConvertible {
  public func fetchCursor(_ db: OrgPushSDK.Database) throws -> OrgPushSDK.FastDatabaseValueCursor<RowDecoder>
  public func fetchAll(_ db: OrgPushSDK.Database) throws -> [RowDecoder]
  public func fetchOne(_ db: OrgPushSDK.Database) throws -> RowDecoder?
}
extension OrgPushSDK.Table where RowDecoder : OrgPushSDK.DatabaseValueConvertible, RowDecoder : OrgPushSDK.StatementColumnConvertible, RowDecoder : Swift.Hashable {
  public func fetchSet(_ db: OrgPushSDK.Database) throws -> Swift.Set<RowDecoder>
}
extension OrgPushSDK.Table where RowDecoder : OrgPushSDK._OptionalProtocol, RowDecoder.Wrapped : OrgPushSDK.DatabaseValueConvertible, RowDecoder.Wrapped : OrgPushSDK.StatementColumnConvertible {
  public func fetchCursor(_ db: OrgPushSDK.Database) throws -> OrgPushSDK.FastNullableDatabaseValueCursor<RowDecoder.Wrapped>
  public func fetchAll(_ db: OrgPushSDK.Database) throws -> [RowDecoder.Wrapped?]
  public func fetchOne(_ db: OrgPushSDK.Database) throws -> RowDecoder.Wrapped?
}
extension OrgPushSDK.Table where RowDecoder : OrgPushSDK._OptionalProtocol, RowDecoder.Wrapped : OrgPushSDK.DatabaseValueConvertible, RowDecoder.Wrapped : OrgPushSDK.StatementColumnConvertible, RowDecoder.Wrapped : Swift.Hashable {
  public func fetchSet(_ db: OrgPushSDK.Database) throws -> Swift.Set<RowDecoder.Wrapped?>
}
extension OrgPushSDK.Table {
  public func belongsTo<Destination>(_ destination: Destination.Type, key: Swift.String? = nil, using foreignKey: OrgPushSDK.ForeignKey? = nil) -> OrgPushSDK.BelongsToAssociation<RowDecoder, Destination> where Destination : OrgPushSDK.TableRecord
  public func hasMany<Destination>(_ destination: Destination.Type, key: Swift.String? = nil, using foreignKey: OrgPushSDK.ForeignKey? = nil) -> OrgPushSDK.HasManyAssociation<RowDecoder, Destination> where Destination : OrgPushSDK.TableRecord
  public func hasOne<Destination>(_ destination: Destination.Type, key: Swift.String? = nil, using foreignKey: OrgPushSDK.ForeignKey? = nil) -> OrgPushSDK.HasOneAssociation<RowDecoder, Destination> where Destination : OrgPushSDK.TableRecord
}
extension OrgPushSDK.Table {
  public func belongsTo<Destination>(_ destination: OrgPushSDK.Table<Destination>, key: Swift.String? = nil, using foreignKey: OrgPushSDK.ForeignKey? = nil) -> OrgPushSDK.BelongsToAssociation<RowDecoder, Destination>
  public func hasMany<Destination>(_ destination: OrgPushSDK.Table<Destination>, key: Swift.String? = nil, using foreignKey: OrgPushSDK.ForeignKey? = nil) -> OrgPushSDK.HasManyAssociation<RowDecoder, Destination>
  public func hasOne<Destination>(_ destination: OrgPushSDK.Table<Destination>, key: Swift.String? = nil, using foreignKey: OrgPushSDK.ForeignKey? = nil) -> OrgPushSDK.HasOneAssociation<RowDecoder, Destination>
}
extension OrgPushSDK.Table {
  public func association<Destination>(to cte: OrgPushSDK.CommonTableExpression<Destination>, on condition: @escaping (_ left: OrgPushSDK.TableAlias, _ right: OrgPushSDK.TableAlias) -> OrgPushSDK.SQLExpressible) -> OrgPushSDK.JoinAssociation<RowDecoder, Destination>
  public func association<Destination>(to cte: OrgPushSDK.CommonTableExpression<Destination>) -> OrgPushSDK.JoinAssociation<RowDecoder, Destination>
}
extension OrgPushSDK.Table {
  public func hasMany<Pivot, Target>(_ destination: Target.RowDecoder.Type, through pivot: Pivot, using target: Target, key: Swift.String? = nil) -> OrgPushSDK.HasManyThroughAssociation<RowDecoder, Target.RowDecoder> where RowDecoder == Pivot.OriginRowDecoder, Pivot : OrgPushSDK.Association, Target : OrgPushSDK.Association, Pivot.RowDecoder == Target.OriginRowDecoder
  public func hasOne<Pivot, Target>(_ destination: Target.RowDecoder.Type, through pivot: Pivot, using target: Target, key: Swift.String? = nil) -> OrgPushSDK.HasOneThroughAssociation<RowDecoder, Target.RowDecoder> where RowDecoder == Pivot.OriginRowDecoder, Pivot : OrgPushSDK.AssociationToOne, Target : OrgPushSDK.AssociationToOne, Pivot.RowDecoder == Target.OriginRowDecoder
}
extension OrgPushSDK.Table {
  public func including<A>(all association: A) -> OrgPushSDK.QueryInterfaceRequest<RowDecoder> where RowDecoder == A.OriginRowDecoder, A : OrgPushSDK.AssociationToMany
  public func including<A>(optional association: A) -> OrgPushSDK.QueryInterfaceRequest<RowDecoder> where RowDecoder == A.OriginRowDecoder, A : OrgPushSDK.Association
  public func including<A>(required association: A) -> OrgPushSDK.QueryInterfaceRequest<RowDecoder> where RowDecoder == A.OriginRowDecoder, A : OrgPushSDK.Association
  public func joining<A>(optional association: A) -> OrgPushSDK.QueryInterfaceRequest<RowDecoder> where RowDecoder == A.OriginRowDecoder, A : OrgPushSDK.Association
  public func joining<A>(required association: A) -> OrgPushSDK.QueryInterfaceRequest<RowDecoder> where RowDecoder == A.OriginRowDecoder, A : OrgPushSDK.Association
  public func annotated<A>(withOptional association: A) -> OrgPushSDK.QueryInterfaceRequest<RowDecoder> where RowDecoder == A.OriginRowDecoder, A : OrgPushSDK.Association
  public func annotated<A>(withRequired association: A) -> OrgPushSDK.QueryInterfaceRequest<RowDecoder> where RowDecoder == A.OriginRowDecoder, A : OrgPushSDK.Association
}
extension OrgPushSDK.Table {
  public func annotated(with aggregates: OrgPushSDK.AssociationAggregate<RowDecoder>...) -> OrgPushSDK.QueryInterfaceRequest<RowDecoder>
  public func annotated(with aggregates: [OrgPushSDK.AssociationAggregate<RowDecoder>]) -> OrgPushSDK.QueryInterfaceRequest<RowDecoder>
  public func having(_ predicate: OrgPushSDK.AssociationAggregate<RowDecoder>) -> OrgPushSDK.QueryInterfaceRequest<RowDecoder>
}
extension OrgPushSDK.Table {
  @discardableResult
  public func deleteAll(_ db: OrgPushSDK.Database) throws -> Swift.Int
}
extension OrgPushSDK.Table {
  public func exists<PrimaryKeyType>(_ db: OrgPushSDK.Database, key: PrimaryKeyType) throws -> Swift.Bool where PrimaryKeyType : OrgPushSDK.DatabaseValueConvertible
}
@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6, *)
extension OrgPushSDK.Table where RowDecoder : Swift.Identifiable, RowDecoder.ID : OrgPushSDK.DatabaseValueConvertible {
  public func exists(_ db: OrgPushSDK.Database, id: RowDecoder.ID) throws -> Swift.Bool
}
@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6, *)
extension OrgPushSDK.Table where RowDecoder : Swift.Identifiable, RowDecoder.ID : OrgPushSDK._OptionalProtocol, RowDecoder.ID.Wrapped : OrgPushSDK.DatabaseValueConvertible {
  public func exists(_ db: OrgPushSDK.Database, id: RowDecoder.ID.Wrapped) throws -> Swift.Bool
}
extension OrgPushSDK.Table {
  public func exists(_ db: OrgPushSDK.Database, key: [Swift.String : OrgPushSDK.DatabaseValueConvertible?]) throws -> Swift.Bool
}
extension OrgPushSDK.Table {
  @discardableResult
  public func deleteAll<Sequence>(_ db: OrgPushSDK.Database, keys: Sequence) throws -> Swift.Int where Sequence : Swift.Sequence, Sequence.Element : OrgPushSDK.DatabaseValueConvertible
  @discardableResult
  public func deleteOne<PrimaryKeyType>(_ db: OrgPushSDK.Database, key: PrimaryKeyType?) throws -> Swift.Bool where PrimaryKeyType : OrgPushSDK.DatabaseValueConvertible
}
@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6, *)
extension OrgPushSDK.Table where RowDecoder : Swift.Identifiable, RowDecoder.ID : OrgPushSDK.DatabaseValueConvertible {
  @discardableResult
  public func deleteAll<Collection>(_ db: OrgPushSDK.Database, ids: Collection) throws -> Swift.Int where Collection : Swift.Collection, RowDecoder.ID == Collection.Element
  @discardableResult
  public func deleteOne(_ db: OrgPushSDK.Database, id: RowDecoder.ID) throws -> Swift.Bool
}
@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6, *)
extension OrgPushSDK.Table where RowDecoder : Swift.Identifiable, RowDecoder.ID : OrgPushSDK._OptionalProtocol, RowDecoder.ID.Wrapped : OrgPushSDK.DatabaseValueConvertible {
  @discardableResult
  public func deleteAll<Collection>(_ db: OrgPushSDK.Database, ids: Collection) throws -> Swift.Int where Collection : Swift.Collection, Collection.Element : OrgPushSDK.DatabaseValueConvertible, Collection.Element == RowDecoder.ID.Wrapped
  @discardableResult
  public func deleteOne(_ db: OrgPushSDK.Database, id: RowDecoder.ID.Wrapped) throws -> Swift.Bool
}
extension OrgPushSDK.Table {
  @discardableResult
  public func deleteAll(_ db: OrgPushSDK.Database, keys: [[Swift.String : OrgPushSDK.DatabaseValueConvertible?]]) throws -> Swift.Int
  @discardableResult
  public func deleteOne(_ db: OrgPushSDK.Database, key: [Swift.String : OrgPushSDK.DatabaseValueConvertible?]) throws -> Swift.Bool
}
extension OrgPushSDK.Table {
  @discardableResult
  public func updateAll(_ db: OrgPushSDK.Database, onConflict conflictResolution: OrgPushSDK.Database.ConflictResolution? = nil, _ assignments: [OrgPushSDK.ColumnAssignment]) throws -> Swift.Int
  @discardableResult
  public func updateAll(_ db: OrgPushSDK.Database, onConflict conflictResolution: OrgPushSDK.Database.ConflictResolution? = nil, _ assignment: OrgPushSDK.ColumnAssignment, _ otherAssignments: OrgPushSDK.ColumnAssignment...) throws -> Swift.Int
}
public struct Inflections {
  public init()
  public mutating func plural(_ pattern: Swift.String, options: Foundation.NSRegularExpression.Options = [.caseInsensitive], _ template: Swift.String)
  public mutating func singular(_ pattern: Swift.String, options: Foundation.NSRegularExpression.Options = [.caseInsensitive], _ template: Swift.String)
  public mutating func uncountableWords(_ words: [Swift.String])
  public mutating func irregularSuffix(_ singular: Swift.String, _ plural: Swift.String)
  public func pluralize(_ string: Swift.String) -> Swift.String
  public func singularize(_ string: Swift.String) -> Swift.String
}
@objc public class SubscriberGetResult : ObjectiveC.NSObject, Swift.Decodable {
  required public init(from decoder: Swift.Decoder) throws
  public init(resultKind: OrgPushSDK.ResultKind, errorCode: Swift.Int, errorDescription: Swift.String?, elements: [OrgPushSDK.SubscriberDataElement]?)
  public func getResultKind() -> OrgPushSDK.ResultKind
  public func getErrorCode() -> Swift.Int
  public func getErrorDescription() -> Swift.String?
  public func getElements() -> [OrgPushSDK.SubscriberDataElement]?
  @objc deinit
}
public struct SubscriberDataElement : Swift.Decodable {
  public func getAddress() -> Swift.String
  public func getOsType() -> Swift.String?
  public func getOsVersion() -> Swift.String?
  public func getVendorInfo() -> Swift.String?
  public func getAttributes() -> [Swift.String : Swift.String?]?
  public init(from decoder: Swift.Decoder) throws
}
extension OrgPushSDK.AnyFetchRequest {
  @available(*, unavailable, message: "Use AnyFetchRequest(request).asRequest(of: SomeType.self) instead.")
  public init<Request>(_ request: Request) where Request : OrgPushSDK.FetchRequest
  @available(*, unavailable, message: "Define your own FetchRequest type instead.")
  public init(_ prepare: @escaping (OrgPushSDK.Database, _ singleResult: Swift.Bool) throws -> (OrgPushSDK.Statement, OrgPushSDK.RowAdapter?))
}
@available(*, unavailable, message: "Custom reducers are no longer supported. See the \"Migrating From GRDB 4 to GRDB 5\" guide.")
public struct AnyValueReducer<Fetched, Value> : OrgPushSDK.ValueReducer {
  public init(fetch: @escaping (OrgPushSDK.Database) throws -> Fetched, value: @escaping (Fetched) -> Value?)
  public init<Base>(_ reducer: Base) where Fetched == Base.Fetched, Value == Base.Value, Base : OrgPushSDK._ValueReducer
  public func _fetch(_ db: OrgPushSDK.Database) throws -> Fetched
  public func _value(_ fetched: Fetched) -> Value?
}
extension OrgPushSDK.AssociationAggregate {
  @available(*, unavailable, renamed: "forKey(_:)")
  public func aliased(_ name: Swift.String) -> OrgPushSDK.AssociationAggregate<RowDecoder>
  @available(*, unavailable, renamed: "forKey(_:)")
  public func aliased(_ key: Swift.CodingKey) -> OrgPushSDK.AssociationAggregate<RowDecoder>
}
extension OrgPushSDK.Configuration {
  @available(*, unavailable, message: "Replace the assignment with a method call: prepareDatabase { db in ... }")
  public var prepareDatabase: ((OrgPushSDK.Database) throws -> Swift.Void)? {
    get
    set
  }
  @available(*, unavailable, message: "Use Database.trace(options:_:) in Configuration.prepareDatabase instead.")
  public var trace: OrgPushSDK.TraceFunction? {
    get
    set
  }
}
extension OrgPushSDK.DatabaseFunction {
  @available(*, unavailable, renamed: "callAsFunction(_:)")
  final public func apply(_ arguments: OrgPushSDK.SQLExpressible...) -> OrgPushSDK.SQLExpression
}
extension OrgPushSDK.DatabaseMigrator {
  @available(*, unavailable, renamed: "registerMigration(_:migrate:)")
  public mutating func registerMigrationWithDeferredForeignKeyCheck(_ identifier: Swift.String, migrate: @escaping (OrgPushSDK.Database) throws -> Swift.Void)
  @available(*, unavailable, message: "Wrap this method: reader.read(migrator.appliedMigrations) }")
  public func appliedMigrations(in reader: OrgPushSDK.DatabaseReader) throws -> Swift.Set<Swift.String>
  @available(*, unavailable, message: "Wrap this method: reader.read(migrator.hasCompletedMigrations) }")
  public func hasCompletedMigrations(in reader: OrgPushSDK.DatabaseReader) throws -> Swift.Bool
  @available(*, unavailable, message: "Prefer reader.read(migrator.completedMigrations).contains(targetIdentifier)")
  public func hasCompletedMigrations(in reader: OrgPushSDK.DatabaseReader, through targetIdentifier: Swift.String) throws -> Swift.Bool
  @available(*, unavailable, message: "Prefer reader.read(migrator.completedMigrations).last")
  public func lastCompletedMigration(in reader: OrgPushSDK.DatabaseReader) throws -> Swift.String?
}
extension OrgPushSDK.DatabasePool {
  @available(*, unavailable, message: "Use pool.writeWithoutTransaction { $0.checkpoint() } instead")
  final public func checkpoint(_ kind: OrgPushSDK.Database.CheckpointMode = .passive) throws
  @available(*, unavailable, message: "Memory management is now enabled by default. This method does nothing.")
  final public func setupMemoryManagement(in application: UIKit.UIApplication)
}
extension OrgPushSDK.DatabaseQueue {
  @available(*, unavailable, message: "Memory management is now enabled by default. This method does nothing.")
  final public func setupMemoryManagement(in application: UIKit.UIApplication)
}
extension OrgPushSDK.DatabaseReader {
  @available(*, unavailable, message: "Use Database.add(collation:) in Configuration.prepareDatabase instead.")
  public func add(collation: OrgPushSDK.DatabaseCollation)
  @available(*, unavailable)
  public func remove(collation: OrgPushSDK.DatabaseCollation)
  @available(*, unavailable, message: "Use Database.add(function:) in Configuration.prepareDatabase instead.")
  public func add(function: OrgPushSDK.DatabaseFunction)
  @available(*, unavailable)
  public func remove(function: OrgPushSDK.DatabaseFunction)
}
extension OrgPushSDK.FetchRequest {
  @available(*, unavailable, message: "Use ValueObservation.tracking(request.fetchCount) instead")
  public func observationForCount() -> OrgPushSDK.ValueObservation<OrgPushSDK.ValueReducers.Unavailable<Swift.Int>>
}
extension OrgPushSDK.FetchRequest where Self.RowDecoder : OrgPushSDK.DatabaseValueConvertible {
  @available(*, unavailable, message: "Use ValueObservation.tracking(request.fetchAll) instead")
  public func observationForAll() -> OrgPushSDK.ValueObservation<OrgPushSDK.ValueReducers.Unavailable<[Self.RowDecoder]>>
  @available(*, unavailable, message: "Use ValueObservation.tracking(request.fetchOne) instead")
  public func observationForFirst() -> OrgPushSDK.ValueObservation<OrgPushSDK.ValueReducers.Unavailable<Self.RowDecoder?>>
}
extension OrgPushSDK.FetchRequest where Self.RowDecoder : OrgPushSDK.FetchableRecord {
  @available(*, unavailable, message: "Use ValueObservation.tracking(request.fetchAll) instead")
  public func observationForAll() -> OrgPushSDK.ValueObservation<OrgPushSDK.ValueReducers.Unavailable<[Self.RowDecoder]>>
  @available(*, unavailable, message: "Use ValueObservation.tracking(request.fetchOne) instead")
  public func observationForFirst() -> OrgPushSDK.ValueObservation<OrgPushSDK.ValueReducers.Unavailable<Self.RowDecoder?>>
}
extension OrgPushSDK.FetchRequest where Self.RowDecoder : OrgPushSDK._OptionalProtocol, Self.RowDecoder.Wrapped : OrgPushSDK.DatabaseValueConvertible {
  @available(*, unavailable, message: "Use ValueObservation.tracking(request.fetchAll) instead")
  public func observationForAll() -> OrgPushSDK.ValueObservation<OrgPushSDK.ValueReducers.Unavailable<[Self.RowDecoder.Wrapped?]>>
  @available(*, unavailable, message: "Use ValueObservation.tracking(request.fetchOne) instead")
  public func observationForFirst() -> OrgPushSDK.ValueObservation<OrgPushSDK.ValueReducers.Unavailable<Self.RowDecoder.Wrapped?>>
}
extension OrgPushSDK.FetchRequest where Self.RowDecoder == OrgPushSDK.Row {
  @available(*, unavailable, message: "Use ValueObservation.tracking(request.fetchAll) instead")
  public func observationForAll() -> OrgPushSDK.ValueObservation<OrgPushSDK.ValueReducers.Unavailable<[OrgPushSDK.Row]>>
  @available(*, unavailable, message: "Use ValueObservation.tracking(request.fetchOne) instead")
  public func observationForFirst() -> OrgPushSDK.ValueObservation<OrgPushSDK.ValueReducers.Unavailable<OrgPushSDK.Row?>>
}
extension OrgPushSDK.SQLExpression {
  @available(*, unavailable, message: "Use SQL initializer instead")
  public var sqlLiteral: OrgPushSDK.SQL {
    get
  }
}
@available(*, deprecated, renamed: "SQL")
public typealias SQLLiteral = OrgPushSDK.SQL
@available(*, deprecated, renamed: "SQL")
public typealias SQLiteral = OrgPushSDK.SQL
extension OrgPushSDK.SQL {
  @available(*, unavailable, message: "Use SQL interpolation instead.")
  public func mapSQL(_ transform: @escaping (Swift.String) -> Swift.String) -> OrgPushSDK.SQL
  @available(*, unavailable, message: "Use the build(_:) method instead.")
  public var sql: Swift.String {
    get
  }
  @available(*, unavailable, message: "Use the build(_:) method instead.")
  public var arguments: OrgPushSDK.StatementArguments {
    get
  }
}
extension OrgPushSDK.SQLRequest {
  @available(*, unavailable, message: "Turning a request into SQLRequest is no longer supported.")
  public init<Request>(_ db: OrgPushSDK.Database, request: Request, cached: Swift.Bool = false) throws where RowDecoder == Request.RowDecoder, Request : OrgPushSDK.FetchRequest
  @available(*, unavailable, message: "Use makePreparedRequest(db).statement.sql instead")
  public var sql: Swift.String {
    get
  }
  @available(*, unavailable, message: "Use makePreparedRequest(db).statement.arguments instead")
  public var arguments: OrgPushSDK.StatementArguments {
    get
  }
}
extension OrgPushSDK.SQLSpecificExpressible {
  @available(*, unavailable, renamed: "forKey(_:)")
  public func aliased(_ name: Swift.String) -> OrgPushSDK.SQLSelectable
  @available(*, unavailable, renamed: "forKey(_:)")
  public func aliased(_ key: Swift.CodingKey) -> OrgPushSDK.SQLSelectable
}
extension OrgPushSDK.Statement {
  @available(*, unavailable, renamed: "setUncheckedArguments(_:)")
  final public func unsafeSetArguments(_ arguments: OrgPushSDK.StatementArguments)
  @available(*, unavailable, renamed: "validateArguments(_:)")
  final public func validate(arguments: OrgPushSDK.StatementArguments) throws
}
extension OrgPushSDK.TableRecord {
  @available(*, unavailable, message: "Use ValueObservation.tracking(MyRecord.fetchCount) instead")
  public static func observationForCount() -> OrgPushSDK.ValueObservation<OrgPushSDK.ValueReducers.Unavailable<Swift.Int>>
  @available(*, unavailable, message: "Use SQL interpolation instead")
  public static func selectionSQL(alias: Swift.String? = nil) -> Swift.String
}
extension OrgPushSDK.TableRecord where Self : OrgPushSDK.FetchableRecord {
  @available(*, unavailable, message: "Use ValueObservation.tracking(MyRecord.fetchAll) instead")
  public static func observationForAll() -> OrgPushSDK.ValueObservation<OrgPushSDK.ValueReducers.Unavailable<[Self]>>
  @available(*, unavailable, message: "Use ValueObservation.tracking(MyRecord.fetchOne) instead")
  public static func observationForFirst() -> OrgPushSDK.ValueObservation<OrgPushSDK.ValueReducers.Unavailable<Self?>>
}
@available(*, unavailable)
public typealias TraceFunction = (Swift.String) -> Swift.Void
extension OrgPushSDK.ValueObservation {
  @available(*, unavailable, message: "Custom reducers are no longer supported. See the \"Migrating From GRDB 4 to GRDB 5\" guide.")
  public static func tracking(_ regions: OrgPushSDK.DatabaseRegionConvertible..., reducer: @escaping (OrgPushSDK.Database) throws -> Reducer) -> OrgPushSDK.ValueObservation<Reducer>
  @available(*, unavailable, message: "Custom reducers are no longer supported. See the \"Migrating From GRDB 4 to GRDB 5\" guide.")
  public static func tracking(_ regions: [OrgPushSDK.DatabaseRegionConvertible], reducer: @escaping (OrgPushSDK.Database) throws -> Reducer) -> OrgPushSDK.ValueObservation<Reducer>
  @available(*, unavailable, message: "combine is no longer available. See the \"Migrating From GRDB 4 to GRDB 5\" guide.")
  public func combine<R1, Combined>(_ other: OrgPushSDK.ValueObservation<R1>, _ transform: @escaping (Reducer.Value, R1.Value) -> Combined) -> OrgPushSDK.ValueObservation<OrgPushSDK.ValueReducers.Unavailable<Combined>> where R1 : OrgPushSDK.ValueReducer
  @available(*, unavailable, message: "combine is no longer available. See the \"Migrating From GRDB 4 to GRDB 5\" guide.")
  public func combine<R1, R2, Combined>(_ observation1: OrgPushSDK.ValueObservation<R1>, _ observation2: OrgPushSDK.ValueObservation<R2>, _ transform: @escaping (Reducer.Value, R1.Value, R2.Value) -> Combined) -> OrgPushSDK.ValueObservation<OrgPushSDK.ValueReducers.Unavailable<Combined>> where R1 : OrgPushSDK.ValueReducer, R2 : OrgPushSDK.ValueReducer
  @available(*, unavailable, message: "combine is no longer available. See the \"Migrating From GRDB 4 to GRDB 5\" guide.")
  public func combine<R1, R2, R3, Combined>(_ observation1: OrgPushSDK.ValueObservation<R1>, _ observation2: OrgPushSDK.ValueObservation<R2>, _ observation3: OrgPushSDK.ValueObservation<R3>, _ transform: @escaping (Reducer.Value, R1.Value, R2.Value, R3.Value) -> Combined) -> OrgPushSDK.ValueObservation<OrgPushSDK.ValueReducers.Unavailable<Combined>> where R1 : OrgPushSDK.ValueReducer, R2 : OrgPushSDK.ValueReducer, R3 : OrgPushSDK.ValueReducer
  @available(*, unavailable, message: "combine is no longer available. See the \"Migrating From GRDB 4 to GRDB 5\" guide.")
  public func combine<R1, R2, R3, R4, Combined>(_ observation1: OrgPushSDK.ValueObservation<R1>, _ observation2: OrgPushSDK.ValueObservation<R2>, _ observation3: OrgPushSDK.ValueObservation<R3>, _ observation4: OrgPushSDK.ValueObservation<R4>, _ transform: @escaping (Reducer.Value, R1.Value, R2.Value, R3.Value, R4.Value) -> Combined) -> OrgPushSDK.ValueObservation<OrgPushSDK.ValueReducers.Unavailable<Combined>> where R1 : OrgPushSDK.ValueReducer, R2 : OrgPushSDK.ValueReducer, R3 : OrgPushSDK.ValueReducer, R4 : OrgPushSDK.ValueReducer
  @available(*, unavailable, message: "compactMap is no longer available. See the \"Migrating From GRDB 4 to GRDB 5\" guide.")
  public func compactMap<T>(_ transform: @escaping (Reducer.Value) -> T?) -> OrgPushSDK.ValueObservation<OrgPushSDK.ValueReducers.Unavailable<T>>
  @available(*, unavailable, message: "Use start(in:onError:onChange:) instead.")
  public func start(in reader: OrgPushSDK.DatabaseReader, onChange: @escaping (Reducer.Value) -> Swift.Void) throws -> OrgPushSDK.TransactionObserver
}
extension OrgPushSDK.ValueObservation where Reducer == OrgPushSDK.ValueReducers.Auto {
  @available(*, unavailable, message: "combine is no longer available. See the \"Migrating From GRDB 4 to GRDB 5\" guide.")
  public static func combine<R1, R2>(_ o1: OrgPushSDK.ValueObservation<R1>, _ o2: OrgPushSDK.ValueObservation<R2>) -> OrgPushSDK.ValueObservation<OrgPushSDK.ValueReducers.Unavailable<(R1.Value, R2.Value)>> where R1 : OrgPushSDK.ValueReducer, R2 : OrgPushSDK.ValueReducer
  @available(*, unavailable, message: "combine is no longer available. See the \"Migrating From GRDB 4 to GRDB 5\" guide.")
  public static func combine<R1, R2, R3>(_ o1: OrgPushSDK.ValueObservation<R1>, _ o2: OrgPushSDK.ValueObservation<R2>, _ o3: OrgPushSDK.ValueObservation<R3>) -> OrgPushSDK.ValueObservation<OrgPushSDK.ValueReducers.Unavailable<(R1.Value, R2.Value, R3.Value)>> where R1 : OrgPushSDK.ValueReducer, R2 : OrgPushSDK.ValueReducer, R3 : OrgPushSDK.ValueReducer
  @available(*, unavailable, message: "combine is no longer available. See the \"Migrating From GRDB 4 to GRDB 5\" guide.")
  public static func combine<R1, R2, R3, R4>(_ o1: OrgPushSDK.ValueObservation<R1>, _ o2: OrgPushSDK.ValueObservation<R2>, _ o3: OrgPushSDK.ValueObservation<R3>, _ o4: OrgPushSDK.ValueObservation<R4>) -> OrgPushSDK.ValueObservation<OrgPushSDK.ValueReducers.Unavailable<(R1.Value, R2.Value, R3.Value, R4.Value)>> where R1 : OrgPushSDK.ValueReducer, R2 : OrgPushSDK.ValueReducer, R3 : OrgPushSDK.ValueReducer, R4 : OrgPushSDK.ValueReducer
  @available(*, unavailable, message: "combine is no longer available. See the \"Migrating From GRDB 4 to GRDB 5\" guide.")
  public static func combine<R1, R2, R3, R4, R5>(_ o1: OrgPushSDK.ValueObservation<R1>, _ o2: OrgPushSDK.ValueObservation<R2>, _ o3: OrgPushSDK.ValueObservation<R3>, _ o4: OrgPushSDK.ValueObservation<R4>, _ o5: OrgPushSDK.ValueObservation<R5>) -> OrgPushSDK.ValueObservation<OrgPushSDK.ValueReducers.Unavailable<(R1.Value, R2.Value, R3.Value, R4.Value, R5.Value)>> where R1 : OrgPushSDK.ValueReducer, R2 : OrgPushSDK.ValueReducer, R3 : OrgPushSDK.ValueReducer, R4 : OrgPushSDK.ValueReducer, R5 : OrgPushSDK.ValueReducer
  @available(*, unavailable, message: "combine is no longer available. See the \"Migrating From GRDB 4 to GRDB 5\" guide.")
  public static func combine<R1, R2, R3, R4, R5, R6>(_ o1: OrgPushSDK.ValueObservation<R1>, _ o2: OrgPushSDK.ValueObservation<R2>, _ o3: OrgPushSDK.ValueObservation<R3>, _ o4: OrgPushSDK.ValueObservation<R4>, _ o5: OrgPushSDK.ValueObservation<R5>, _ o6: OrgPushSDK.ValueObservation<R6>) -> OrgPushSDK.ValueObservation<OrgPushSDK.ValueReducers.Unavailable<(R1.Value, R2.Value, R3.Value, R4.Value, R5.Value, R6.Value)>> where R1 : OrgPushSDK.ValueReducer, R2 : OrgPushSDK.ValueReducer, R3 : OrgPushSDK.ValueReducer, R4 : OrgPushSDK.ValueReducer, R5 : OrgPushSDK.ValueReducer, R6 : OrgPushSDK.ValueReducer
  @available(*, unavailable, message: "combine is no longer available. See the \"Migrating From GRDB 4 to GRDB 5\" guide.")
  public static func combine<R1, R2, R3, R4, R5, R6, R7>(_ o1: OrgPushSDK.ValueObservation<R1>, _ o2: OrgPushSDK.ValueObservation<R2>, _ o3: OrgPushSDK.ValueObservation<R3>, _ o4: OrgPushSDK.ValueObservation<R4>, _ o5: OrgPushSDK.ValueObservation<R5>, _ o6: OrgPushSDK.ValueObservation<R6>, _ o7: OrgPushSDK.ValueObservation<R7>) -> OrgPushSDK.ValueObservation<OrgPushSDK.ValueReducers.Unavailable<(R1.Value, R2.Value, R3.Value, R4.Value, R5.Value, R6.Value, R7.Value)>> where R1 : OrgPushSDK.ValueReducer, R2 : OrgPushSDK.ValueReducer, R3 : OrgPushSDK.ValueReducer, R4 : OrgPushSDK.ValueReducer, R5 : OrgPushSDK.ValueReducer, R6 : OrgPushSDK.ValueReducer, R7 : OrgPushSDK.ValueReducer
  @available(*, unavailable, message: "combine is no longer available. See the \"Migrating From GRDB 4 to GRDB 5\" guide.")
  public static func combine<R1, R2, R3, R4, R5, R6, R7, R8>(_ o1: OrgPushSDK.ValueObservation<R1>, _ o2: OrgPushSDK.ValueObservation<R2>, _ o3: OrgPushSDK.ValueObservation<R3>, _ o4: OrgPushSDK.ValueObservation<R4>, _ o5: OrgPushSDK.ValueObservation<R5>, _ o6: OrgPushSDK.ValueObservation<R6>, _ o7: OrgPushSDK.ValueObservation<R7>, _ o8: OrgPushSDK.ValueObservation<R8>) -> OrgPushSDK.ValueObservation<OrgPushSDK.ValueReducers.Unavailable<(R1.Value, R2.Value, R3.Value, R4.Value, R5.Value, R6.Value, R7.Value, R8.Value)>> where R1 : OrgPushSDK.ValueReducer, R2 : OrgPushSDK.ValueReducer, R3 : OrgPushSDK.ValueReducer, R4 : OrgPushSDK.ValueReducer, R5 : OrgPushSDK.ValueReducer, R6 : OrgPushSDK.ValueReducer, R7 : OrgPushSDK.ValueReducer, R8 : OrgPushSDK.ValueReducer
  @available(*, unavailable, message: "Use ValueObservation.tracking(_:) instead")
  public static func trackingCount<Request>(_ request: Request) -> OrgPushSDK.ValueObservation<OrgPushSDK.ValueReducers.Unavailable<Swift.Int>> where Request : OrgPushSDK.FetchRequest
  @available(*, unavailable, message: "Use ValueObservation.tracking(_:) instead")
  public static func trackingAll<Request>(_ request: Request) -> OrgPushSDK.ValueObservation<OrgPushSDK.ValueReducers.Unavailable<[Request.RowDecoder]>> where Request : OrgPushSDK.FetchRequest, Request.RowDecoder : OrgPushSDK.DatabaseValueConvertible
  @available(*, unavailable, message: "Use ValueObservation.tracking(_:) instead")
  public static func trackingOne<Request>(_ request: Request) -> OrgPushSDK.ValueObservation<OrgPushSDK.ValueReducers.Unavailable<Request.RowDecoder?>> where Request : OrgPushSDK.FetchRequest, Request.RowDecoder : OrgPushSDK.DatabaseValueConvertible
  @available(*, unavailable, message: "Use ValueObservation.tracking(_:) instead")
  public static func trackingAll<Request>(_ request: Request) -> OrgPushSDK.ValueObservation<OrgPushSDK.ValueReducers.Unavailable<[Request.RowDecoder.Wrapped?]>> where Request : OrgPushSDK.FetchRequest, Request.RowDecoder : OrgPushSDK._OptionalProtocol, Request.RowDecoder.Wrapped : OrgPushSDK.DatabaseValueConvertible
  @available(*, unavailable, message: "Use ValueObservation.tracking(_:) instead")
  public static func trackingAll<Request>(_ request: Request) -> OrgPushSDK.ValueObservation<OrgPushSDK.ValueReducers.Unavailable<[Request.RowDecoder]>> where Request : OrgPushSDK.FetchRequest, Request.RowDecoder : OrgPushSDK.FetchableRecord
  @available(*, unavailable, message: "Use ValueObservation.tracking(_:) instead")
  public static func trackingOne<Request>(_ request: Request) -> OrgPushSDK.ValueObservation<OrgPushSDK.ValueReducers.Unavailable<Request.RowDecoder?>> where Request : OrgPushSDK.FetchRequest, Request.RowDecoder : OrgPushSDK.FetchableRecord
  @available(*, unavailable, message: "Use ValueObservation.tracking(_:) instead")
  public static func trackingAll<Request>(_ request: Request) -> OrgPushSDK.ValueObservation<OrgPushSDK.ValueReducers.Unavailable<[OrgPushSDK.Row]>> where Request : OrgPushSDK.FetchRequest, Request.RowDecoder == OrgPushSDK.Row
  @available(*, unavailable, message: "Use ValueObservation.tracking(_:) instead")
  public static func trackingOne<Request>(_ request: Request) -> OrgPushSDK.ValueObservation<OrgPushSDK.ValueReducers.Unavailable<OrgPushSDK.Row?>> where Request : OrgPushSDK.FetchRequest, Request.RowDecoder == OrgPushSDK.Row
  @available(*, unavailable, message: "Use ValueObservation.tracking(_:) instead")
  public static func tracking<Value>(_ regions: OrgPushSDK.DatabaseRegionConvertible..., fetch: @escaping (OrgPushSDK.Database) throws -> Value) -> OrgPushSDK.ValueObservation<OrgPushSDK.ValueReducers.Unavailable<Value>>
  @available(*, unavailable, message: "Use ValueObservation.tracking(_:) instead")
  public static func tracking<Value>(_ regions: [OrgPushSDK.DatabaseRegionConvertible], fetch: @escaping (OrgPushSDK.Database) throws -> Value) -> OrgPushSDK.ValueObservation<OrgPushSDK.ValueReducers.Unavailable<Value>>
  @available(*, unavailable, renamed: "tracking(_:)")
  public static func tracking<Value>(value: @escaping (OrgPushSDK.Database) throws -> Value) -> OrgPushSDK.ValueObservation<OrgPushSDK.ValueReducers.Unavailable<Value>>
}
extension OrgPushSDK.ValueObservation where Reducer.Value : Swift.Equatable {
  @available(*, unavailable, renamed: "removeDuplicates")
  public func distinctUntilChanged() -> OrgPushSDK.ValueObservation<OrgPushSDK.ValueReducers.Unavailable<Reducer.Value>>
}
extension OrgPushSDK.ValueReducers {
  @available(*, unavailable)
  public enum Unavailable<T> : OrgPushSDK.ValueReducer {
    public func _fetch(_ db: OrgPushSDK.Database) throws -> Swift.Never
    public mutating func _value(_ fetched: Swift.Never) -> T?
    public typealias Fetched = Swift.Never
    public typealias Value = T
  }
}
extension OrgPushSDK.TableRequest where Self : OrgPushSDK.FilteredRequest {
  public func matching(_ pattern: OrgPushSDK.FTS3Pattern?) -> Self
}
extension OrgPushSDK.TableRecord {
  public static func matching(_ pattern: OrgPushSDK.FTS3Pattern?) -> OrgPushSDK.QueryInterfaceRequest<Self>
}
extension OrgPushSDK.ColumnExpression {
  public func match(_ pattern: OrgPushSDK.FTS3Pattern?) -> OrgPushSDK.SQLExpression
}
public protocol ColumnExpression : OrgPushSDK.SQLSpecificExpressible {
  var name: Swift.String { get }
}
extension OrgPushSDK.ColumnExpression {
  public var sqlExpression: OrgPushSDK.SQLExpression {
    get
  }
  public var detached: OrgPushSDK.SQLExpression {
    get
  }
}
extension OrgPushSDK.ColumnExpression where Self == OrgPushSDK.Column {
  public static var rowID: OrgPushSDK.Column {
    get
  }
}
public struct Column : OrgPushSDK.ColumnExpression, Swift.Equatable {
  public static let rowID: OrgPushSDK.Column
  public var name: Swift.String
  public init(_ name: Swift.String)
  public init(_ codingKey: Swift.CodingKey)
  @_disfavoredOverload public static func == (lhs: OrgPushSDK.Column, rhs: OrgPushSDK.Column) -> Swift.Bool
}
extension OrgPushSDK.ColumnExpression where Self : Swift.RawRepresentable, Self.RawValue == Swift.String {
  public var name: Swift.String {
    get
  }
}
extension Foundation.FileManager {
  public func zipItem(at sourceURL: Foundation.URL, to destinationURL: Foundation.URL, shouldKeepParent: Swift.Bool = true, compressionMethod: OrgPushSDK.CompressionMethod = .none, progress: Foundation.Progress? = nil) throws
  public func unzipItem(at sourceURL: Foundation.URL, to destinationURL: Foundation.URL, skipCRC32: Swift.Bool = false, progress: Foundation.Progress? = nil, preferredEncoding: Swift.String.Encoding? = nil) throws
}
extension Foundation.URL {
  public func isContained(in parentDirectoryURL: Foundation.URL) -> Swift.Bool
}
public struct CommonTableExpression<RowDecoder> {
  public var tableName: Swift.String
}
extension OrgPushSDK.CommonTableExpression {
  public init<Request>(recursive: Swift.Bool = false, named tableName: Swift.String, columns: [Swift.String]? = nil, request: Request) where Request : OrgPushSDK.SQLSubqueryable
  public init(recursive: Swift.Bool = false, named tableName: Swift.String, columns: [Swift.String]? = nil, sql: Swift.String, arguments: OrgPushSDK.StatementArguments = StatementArguments())
  public init(recursive: Swift.Bool = false, named tableName: Swift.String, columns: [Swift.String]? = nil, literal sqlLiteral: OrgPushSDK.SQL)
}
extension OrgPushSDK.CommonTableExpression where RowDecoder == OrgPushSDK.Row {
  public init<Request>(recursive: Swift.Bool = false, named tableName: Swift.String, columns: [Swift.String]? = nil, request: Request) where Request : OrgPushSDK.SQLSubqueryable
  public init(recursive: Swift.Bool = false, named tableName: Swift.String, columns: [Swift.String]? = nil, sql: Swift.String, arguments: OrgPushSDK.StatementArguments = StatementArguments())
  public init(recursive: Swift.Bool = false, named tableName: Swift.String, columns: [Swift.String]? = nil, literal sqlLiteral: OrgPushSDK.SQL)
}
extension OrgPushSDK.CommonTableExpression {
  public func all() -> OrgPushSDK.QueryInterfaceRequest<RowDecoder>
  public func contains(_ element: OrgPushSDK.SQLExpressible) -> OrgPushSDK.SQLExpression
}
extension OrgPushSDK.CommonTableExpression {
  public func association<Destination>(to cte: OrgPushSDK.CommonTableExpression<Destination>, on condition: @escaping (_ left: OrgPushSDK.TableAlias, _ right: OrgPushSDK.TableAlias) -> OrgPushSDK.SQLExpressible) -> OrgPushSDK.JoinAssociation<RowDecoder, Destination>
  public func association<Destination>(to cte: OrgPushSDK.CommonTableExpression<Destination>) -> OrgPushSDK.JoinAssociation<RowDecoder, Destination>
  public func association<Destination>(to destination: Destination.Type, on condition: @escaping (_ left: OrgPushSDK.TableAlias, _ right: OrgPushSDK.TableAlias) -> OrgPushSDK.SQLExpressible) -> OrgPushSDK.JoinAssociation<RowDecoder, Destination> where Destination : OrgPushSDK.TableRecord
  public func association<Destination>(to destination: Destination.Type) -> OrgPushSDK.JoinAssociation<RowDecoder, Destination> where Destination : OrgPushSDK.TableRecord
  public func association<Destination>(to destination: OrgPushSDK.Table<Destination>, on condition: @escaping (_ left: OrgPushSDK.TableAlias, _ right: OrgPushSDK.TableAlias) -> OrgPushSDK.SQLExpressible) -> OrgPushSDK.JoinAssociation<RowDecoder, Destination>
  public func association<Destination>(to destination: OrgPushSDK.Table<Destination>) -> OrgPushSDK.JoinAssociation<RowDecoder, Destination>
}
public enum SharedValueObservationExtent {
  case observationLifetime
  case whileObserved
  public static func == (a: OrgPushSDK.SharedValueObservationExtent, b: OrgPushSDK.SharedValueObservationExtent) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension OrgPushSDK.ValueObservation {
  public func shared(in reader: OrgPushSDK.DatabaseReader, scheduling scheduler: OrgPushSDK.ValueObservationScheduler = .async(onQueue: .main), extent: OrgPushSDK.SharedValueObservationExtent = .whileObserved) -> OrgPushSDK.SharedValueObservation<Reducer.Value>
}
@_hasMissingDesignatedInitializers final public class SharedValueObservation<Element> {
  final public func start(onError: @escaping (Swift.Error) -> Swift.Void, onChange: @escaping (Element) -> Swift.Void) -> OrgPushSDK.DatabaseCancellable
  @available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
  final public func publisher() -> OrgPushSDK.DatabasePublishers.Value<Element>
  @objc deinit
}
public protocol StatementColumnConvertible {
  init?(sqliteStatement: OrgPushSDK.SQLiteStatement, index: Swift.Int32)
}
extension OrgPushSDK.DatabaseValueConvertible where Self : OrgPushSDK.StatementColumnConvertible {
  @usableFromInline
  internal static func _valueMismatch(fromStatement sqliteStatement: OrgPushSDK.SQLiteStatement, atUncheckedIndex index: Swift.Int32, context: @autoclosure () -> OrgPushSDK.RowDecodingContext) throws -> Swift.Never
  @inline(__always) @inlinable internal static func fastDecode(fromStatement sqliteStatement: OrgPushSDK.SQLiteStatement, atUncheckedIndex index: Swift.Int32, context: @autoclosure () -> OrgPushSDK.RowDecodingContext) throws -> Self {
        guard sqlite3_column_type(sqliteStatement, index) != SQLITE_NULL,
              let value = self.init(sqliteStatement: sqliteStatement, index: index)
        else {
            try _valueMismatch(fromStatement: sqliteStatement, atUncheckedIndex: index, context: context())
        }
        return value
    }
  @inline(__always) @inlinable internal static func fastDecode(fromRow row: OrgPushSDK.Row, atUncheckedIndex index: Swift.Int) throws -> Self {
        if let sqliteStatement = row.sqliteStatement {
            return try fastDecode(
                fromStatement: sqliteStatement,
                atUncheckedIndex: Int32(index),
                context: RowDecodingContext(row: row, key: .columnIndex(index)))
        }
        // Support for fast decoding from adapted rows
        return try row.fastDecode(Self.self, atUncheckedIndex: index)
    }
  @inline(__always) @inlinable internal static func fastDecodeIfPresent(fromStatement sqliteStatement: OrgPushSDK.SQLiteStatement, atUncheckedIndex index: Swift.Int32, context: @autoclosure () -> OrgPushSDK.RowDecodingContext) throws -> Self? {
        if sqlite3_column_type(sqliteStatement, index) == SQLITE_NULL {
            return nil
        }
        guard let value = self.init(sqliteStatement: sqliteStatement, index: index) else {
            try _valueMismatch(fromStatement: sqliteStatement, atUncheckedIndex: index, context: context())
        }
        return value
    }
  @inline(__always) @inlinable internal static func fastDecodeIfPresent(fromRow row: OrgPushSDK.Row, atUncheckedIndex index: Swift.Int) throws -> Self? {
        if let sqliteStatement = row.sqliteStatement {
            return try fastDecodeIfPresent(
                fromStatement: sqliteStatement,
                atUncheckedIndex: Int32(index),
                context: RowDecodingContext(row: row, key: .columnIndex(index)))
        }
        // Support for fast decoding from adapted rows
        return try row.fastDecodeIfPresent(Self.self, atUncheckedIndex: index)
    }
}
@_hasMissingDesignatedInitializers final public class FastDatabaseValueCursor<Value> : OrgPushSDK.DatabaseCursor where Value : OrgPushSDK.DatabaseValueConvertible, Value : OrgPushSDK.StatementColumnConvertible {
  public typealias Element = Value
  final public let statement: OrgPushSDK.Statement
  final public var _isDone: Swift.Bool
  @usableFromInline
  final internal let columnIndex: Swift.Int32
  @objc deinit
  @inlinable final public func _element(sqliteStatement: OrgPushSDK.SQLiteStatement) -> Value {
        // TODO GRDB6: don't crash on decoding errors
        try! Value.fastDecode(
            fromStatement: sqliteStatement,
            atUncheckedIndex: columnIndex,
            context: RowDecodingContext(statement: statement, index: Int(columnIndex)))
    }
}
@_hasMissingDesignatedInitializers final public class FastNullableDatabaseValueCursor<Value> : OrgPushSDK.DatabaseCursor where Value : OrgPushSDK.DatabaseValueConvertible, Value : OrgPushSDK.StatementColumnConvertible {
  public typealias Element = Value?
  final public let statement: OrgPushSDK.Statement
  final public var _isDone: Swift.Bool
  @usableFromInline
  final internal let columnIndex: Swift.Int32
  @objc deinit
  @inlinable final public func _element(sqliteStatement: OrgPushSDK.SQLiteStatement) -> Value? {
        // TODO GRDB6: don't crash on decoding errors
        try! Value.fastDecodeIfPresent(
            fromStatement: sqliteStatement,
            atUncheckedIndex: columnIndex,
            context: RowDecodingContext(statement: statement, index: Int(columnIndex)))
    }
}
extension OrgPushSDK.DatabaseValueConvertible where Self : OrgPushSDK.StatementColumnConvertible {
  public static func fetchCursor(_ statement: OrgPushSDK.Statement, arguments: OrgPushSDK.StatementArguments? = nil, adapter: OrgPushSDK.RowAdapter? = nil) throws -> OrgPushSDK.FastDatabaseValueCursor<Self>
  public static func fetchAll(_ statement: OrgPushSDK.Statement, arguments: OrgPushSDK.StatementArguments? = nil, adapter: OrgPushSDK.RowAdapter? = nil) throws -> [Self]
  public static func fetchOne(_ statement: OrgPushSDK.Statement, arguments: OrgPushSDK.StatementArguments? = nil, adapter: OrgPushSDK.RowAdapter? = nil) throws -> Self?
}
extension OrgPushSDK.DatabaseValueConvertible where Self : OrgPushSDK.StatementColumnConvertible, Self : Swift.Hashable {
  public static func fetchSet(_ statement: OrgPushSDK.Statement, arguments: OrgPushSDK.StatementArguments? = nil, adapter: OrgPushSDK.RowAdapter? = nil) throws -> Swift.Set<Self>
}
extension OrgPushSDK.DatabaseValueConvertible where Self : OrgPushSDK.StatementColumnConvertible {
  public static func fetchCursor(_ db: OrgPushSDK.Database, sql: Swift.String, arguments: OrgPushSDK.StatementArguments = StatementArguments(), adapter: OrgPushSDK.RowAdapter? = nil) throws -> OrgPushSDK.FastDatabaseValueCursor<Self>
  public static func fetchAll(_ db: OrgPushSDK.Database, sql: Swift.String, arguments: OrgPushSDK.StatementArguments = StatementArguments(), adapter: OrgPushSDK.RowAdapter? = nil) throws -> [Self]
  public static func fetchOne(_ db: OrgPushSDK.Database, sql: Swift.String, arguments: OrgPushSDK.StatementArguments = StatementArguments(), adapter: OrgPushSDK.RowAdapter? = nil) throws -> Self?
}
extension OrgPushSDK.DatabaseValueConvertible where Self : OrgPushSDK.StatementColumnConvertible, Self : Swift.Hashable {
  public static func fetchSet(_ db: OrgPushSDK.Database, sql: Swift.String, arguments: OrgPushSDK.StatementArguments = StatementArguments(), adapter: OrgPushSDK.RowAdapter? = nil) throws -> Swift.Set<Self>
}
extension OrgPushSDK.DatabaseValueConvertible where Self : OrgPushSDK.StatementColumnConvertible {
  public static func fetchCursor<R>(_ db: OrgPushSDK.Database, _ request: R) throws -> OrgPushSDK.FastDatabaseValueCursor<Self> where R : OrgPushSDK.FetchRequest
  public static func fetchAll<R>(_ db: OrgPushSDK.Database, _ request: R) throws -> [Self] where R : OrgPushSDK.FetchRequest
  public static func fetchOne<R>(_ db: OrgPushSDK.Database, _ request: R) throws -> Self? where R : OrgPushSDK.FetchRequest
}
extension OrgPushSDK.DatabaseValueConvertible where Self : OrgPushSDK.StatementColumnConvertible, Self : Swift.Hashable {
  public static func fetchSet<R>(_ db: OrgPushSDK.Database, _ request: R) throws -> Swift.Set<Self> where R : OrgPushSDK.FetchRequest
}
extension OrgPushSDK.FetchRequest where Self.RowDecoder : OrgPushSDK.DatabaseValueConvertible, Self.RowDecoder : OrgPushSDK.StatementColumnConvertible {
  public func fetchCursor(_ db: OrgPushSDK.Database) throws -> OrgPushSDK.FastDatabaseValueCursor<Self.RowDecoder>
  public func fetchAll(_ db: OrgPushSDK.Database) throws -> [Self.RowDecoder]
  public func fetchOne(_ db: OrgPushSDK.Database) throws -> Self.RowDecoder?
}
extension OrgPushSDK.FetchRequest where Self.RowDecoder : OrgPushSDK.DatabaseValueConvertible, Self.RowDecoder : OrgPushSDK.StatementColumnConvertible, Self.RowDecoder : Swift.Hashable {
  public func fetchSet(_ db: OrgPushSDK.Database) throws -> Swift.Set<Self.RowDecoder>
}
extension Swift.Optional where Wrapped : OrgPushSDK.DatabaseValueConvertible, Wrapped : OrgPushSDK.StatementColumnConvertible {
  public static func fetchCursor(_ statement: OrgPushSDK.Statement, arguments: OrgPushSDK.StatementArguments? = nil, adapter: OrgPushSDK.RowAdapter? = nil) throws -> OrgPushSDK.FastNullableDatabaseValueCursor<Wrapped>
  public static func fetchAll(_ statement: OrgPushSDK.Statement, arguments: OrgPushSDK.StatementArguments? = nil, adapter: OrgPushSDK.RowAdapter? = nil) throws -> [Wrapped?]
}
extension Swift.Optional where Wrapped : OrgPushSDK.DatabaseValueConvertible, Wrapped : OrgPushSDK.StatementColumnConvertible, Wrapped : Swift.Hashable {
  public static func fetchSet(_ statement: OrgPushSDK.Statement, arguments: OrgPushSDK.StatementArguments? = nil, adapter: OrgPushSDK.RowAdapter? = nil) throws -> Swift.Set<Wrapped?>
}
extension Swift.Optional where Wrapped : OrgPushSDK.DatabaseValueConvertible, Wrapped : OrgPushSDK.StatementColumnConvertible {
  public static func fetchCursor(_ db: OrgPushSDK.Database, sql: Swift.String, arguments: OrgPushSDK.StatementArguments = StatementArguments(), adapter: OrgPushSDK.RowAdapter? = nil) throws -> OrgPushSDK.FastNullableDatabaseValueCursor<Wrapped>
  public static func fetchAll(_ db: OrgPushSDK.Database, sql: Swift.String, arguments: OrgPushSDK.StatementArguments = StatementArguments(), adapter: OrgPushSDK.RowAdapter? = nil) throws -> [Wrapped?]
}
extension Swift.Optional where Wrapped : OrgPushSDK.DatabaseValueConvertible, Wrapped : OrgPushSDK.StatementColumnConvertible, Wrapped : Swift.Hashable {
  public static func fetchSet(_ db: OrgPushSDK.Database, sql: Swift.String, arguments: OrgPushSDK.StatementArguments = StatementArguments(), adapter: OrgPushSDK.RowAdapter? = nil) throws -> Swift.Set<Wrapped?>
}
extension Swift.Optional where Wrapped : OrgPushSDK.DatabaseValueConvertible, Wrapped : OrgPushSDK.StatementColumnConvertible {
  public static func fetchCursor<R>(_ db: OrgPushSDK.Database, _ request: R) throws -> OrgPushSDK.FastNullableDatabaseValueCursor<Wrapped> where R : OrgPushSDK.FetchRequest
  public static func fetchAll<R>(_ db: OrgPushSDK.Database, _ request: R) throws -> [Wrapped?] where R : OrgPushSDK.FetchRequest
}
extension Swift.Optional where Wrapped : OrgPushSDK.DatabaseValueConvertible, Wrapped : OrgPushSDK.StatementColumnConvertible, Wrapped : Swift.Hashable {
  public static func fetchSet<R>(_ db: OrgPushSDK.Database, _ request: R) throws -> Swift.Set<Wrapped?> where R : OrgPushSDK.FetchRequest
}
extension OrgPushSDK.FetchRequest where Self.RowDecoder : OrgPushSDK._OptionalProtocol, Self.RowDecoder.Wrapped : OrgPushSDK.DatabaseValueConvertible, Self.RowDecoder.Wrapped : OrgPushSDK.StatementColumnConvertible {
  public func fetchCursor(_ db: OrgPushSDK.Database) throws -> OrgPushSDK.FastNullableDatabaseValueCursor<Self.RowDecoder.Wrapped>
  public func fetchAll(_ db: OrgPushSDK.Database) throws -> [Self.RowDecoder.Wrapped?]
  public func fetchOne(_ db: OrgPushSDK.Database) throws -> Self.RowDecoder.Wrapped?
}
extension OrgPushSDK.FetchRequest where Self.RowDecoder : OrgPushSDK._OptionalProtocol, Self.RowDecoder.Wrapped : OrgPushSDK.DatabaseValueConvertible, Self.RowDecoder.Wrapped : OrgPushSDK.StatementColumnConvertible, Self.RowDecoder.Wrapped : Swift.Hashable {
  public func fetchSet(_ db: OrgPushSDK.Database) throws -> Swift.Set<Self.RowDecoder.Wrapped?>
}
extension OrgPushSDK.DatabaseValueConvertible where Self : Foundation.ReferenceConvertible, Self.ReferenceType : OrgPushSDK.DatabaseValueConvertible {
  public var databaseValue: OrgPushSDK.DatabaseValue {
    get
  }
  public static func fromDatabaseValue(_ dbValue: OrgPushSDK.DatabaseValue) -> Self?
}
extension OrgPushSDK.DatabaseValueConvertible where Self : Foundation.ReferenceConvertible, Self : Swift.Decodable, Self.ReferenceType : OrgPushSDK.DatabaseValueConvertible {
  public static func fromDatabaseValue(_ databaseValue: OrgPushSDK.DatabaseValue) -> Self?
}
extension OrgPushSDK.DatabaseValueConvertible where Self : Foundation.ReferenceConvertible, Self : Swift.Encodable, Self.ReferenceType : OrgPushSDK.DatabaseValueConvertible {
  public var databaseValue: OrgPushSDK.DatabaseValue {
    get
  }
}
extension OrgPushSDK.DatabaseValueConvertible where Self : Swift.Decodable {
  public static func fromDatabaseValue(_ databaseValue: OrgPushSDK.DatabaseValue) -> Self?
}
extension OrgPushSDK.DatabaseValueConvertible where Self : Swift.Decodable, Self : Swift.RawRepresentable, Self.RawValue : OrgPushSDK.DatabaseValueConvertible {
  public static func fromDatabaseValue(_ databaseValue: OrgPushSDK.DatabaseValue) -> Self?
}
extension OrgPushSDK.ValueObservation {
  public func map<T>(_ transform: @escaping (Reducer.Value) -> T) -> OrgPushSDK.ValueObservation<OrgPushSDK.ValueReducers.Map<Reducer, T>>
}
extension OrgPushSDK.ValueReducers {
  public struct Map<Base, Value> : OrgPushSDK.ValueReducer where Base : OrgPushSDK.ValueReducer {
    public func _fetch(_ db: OrgPushSDK.Database) throws -> Base.Fetched
    public mutating func _value(_ fetched: Base.Fetched) -> Value?
    public typealias Fetched = Base.Fetched
  }
}
@objc public protocol HttpRequestAdditionalHeaderManager {
  @objc func getAdditionalHeaders(requestUri: Swift.String) -> [Swift.String : Swift.String]
}
public struct SQLRequest<RowDecoder> {
  public var adapter: OrgPushSDK.RowAdapter?
}
extension OrgPushSDK.SQLRequest {
  public init(sql: Swift.String, arguments: OrgPushSDK.StatementArguments = StatementArguments(), adapter: OrgPushSDK.RowAdapter? = nil, cached: Swift.Bool = false)
  public init(literal sqlLiteral: OrgPushSDK.SQL, adapter: OrgPushSDK.RowAdapter? = nil, cached: Swift.Bool = false)
}
extension OrgPushSDK.SQLRequest where RowDecoder == OrgPushSDK.Row {
  public init(sql: Swift.String, arguments: OrgPushSDK.StatementArguments = StatementArguments(), adapter: OrgPushSDK.RowAdapter? = nil, cached: Swift.Bool = false)
  public init(literal sqlLiteral: OrgPushSDK.SQL, adapter: OrgPushSDK.RowAdapter? = nil, cached: Swift.Bool = false)
}
extension OrgPushSDK.SQLRequest : OrgPushSDK.FetchRequest {
  public var sqlSubquery: OrgPushSDK.SQLSubquery {
    get
  }
  public func fetchCount(_ db: OrgPushSDK.Database) throws -> Swift.Int
  public func makePreparedRequest(_ db: OrgPushSDK.Database, forSingleResult singleResult: Swift.Bool = false) throws -> OrgPushSDK.PreparedRequest
}
extension OrgPushSDK.SQLRequest : Swift.ExpressibleByStringInterpolation {
  public init(unicodeScalarLiteral: Swift.String)
  public init(extendedGraphemeClusterLiteral: Swift.String)
  public init(stringLiteral: Swift.String)
  public init(stringInterpolation sqlInterpolation: OrgPushSDK.SQLInterpolation)
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringInterpolation = OrgPushSDK.SQLInterpolation
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
@objc public class MessagesV2Result : ObjectiveC.NSObject, Swift.Codable {
  public init(resultKind: OrgPushSDK.ResultKind, errorCode: Swift.Int, errorDescription: Swift.String?, moreMessagesForSent: Swift.Bool, messages: [OrgPushSDK.MessageItem])
  required public init(from decoder: Swift.Decoder) throws
  public func getResultKind() -> OrgPushSDK.ResultKind
  public func getErrorCode() -> Swift.Int
  public func getErrorDescription() -> Swift.String?
  public func getMessages() -> [OrgPushSDK.MessageItem]
  public func isMoreMessagesForSent() -> Swift.Bool
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
}
public struct MessageV2Item : Swift.Codable {
  public var messageId: Swift.String
  public var messageStringDate: Swift.String
  public var title: Swift.String
  public var message: Swift.String
  public var status: Swift.String
  public var customData: [Swift.String : Swift.String]?
  public var externalId: Swift.String?
  public var content: Swift.String?
  public var sentDate: Foundation.Date {
    get
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension Foundation.NSNull : OrgPushSDK.DatabaseValueConvertible {
  public var databaseValue: OrgPushSDK.DatabaseValue {
    get
  }
  public static func fromDatabaseValue(_ dbValue: OrgPushSDK.DatabaseValue) -> Self?
}
extension OrgPushSDK.Archive {
  final public var data: Foundation.Data? {
    get
  }
}
public struct HasOneThroughAssociation<Origin, Destination> : OrgPushSDK.AssociationToOne {
  public typealias OriginRowDecoder = Origin
  public typealias RowDecoder = Destination
  public var _sqlAssociation: OrgPushSDK._SQLAssociation
}
extension Foundation.NSData : OrgPushSDK.DatabaseValueConvertible {
  public var databaseValue: OrgPushSDK.DatabaseValue {
    get
  }
  public static func fromDatabaseValue(_ dbValue: OrgPushSDK.DatabaseValue) -> Self?
}
public protocol FetchRequest : OrgPushSDK.DatabaseRegionConvertible, OrgPushSDK.SQLSubqueryable {
  associatedtype RowDecoder
  func makePreparedRequest(_ db: OrgPushSDK.Database, forSingleResult singleResult: Swift.Bool) throws -> OrgPushSDK.PreparedRequest
  func fetchCount(_ db: OrgPushSDK.Database) throws -> Swift.Int
}
extension OrgPushSDK.FetchRequest {
  public func databaseRegion(_ db: OrgPushSDK.Database) throws -> OrgPushSDK.DatabaseRegion
}
public struct PreparedRequest {
  public var statement: OrgPushSDK.Statement
  public var adapter: OrgPushSDK.RowAdapter?
}
extension OrgPushSDK.FetchRequest {
  public func adapted(_ adapter: @escaping (OrgPushSDK.Database) throws -> OrgPushSDK.RowAdapter) -> OrgPushSDK.AdaptedFetchRequest<Self>
}
public struct AdaptedFetchRequest<Base> : OrgPushSDK.FetchRequest where Base : OrgPushSDK.FetchRequest {
  public typealias RowDecoder = Base.RowDecoder
  public var sqlSubquery: OrgPushSDK.SQLSubquery {
    get
  }
  public func fetchCount(_ db: OrgPushSDK.Database) throws -> Swift.Int
  public func makePreparedRequest(_ db: OrgPushSDK.Database, forSingleResult singleResult: Swift.Bool = false) throws -> OrgPushSDK.PreparedRequest
}
public struct AnyFetchRequest<RowDecoder> : OrgPushSDK.FetchRequest {
  public func asRequest<RowDecoder>(of type: RowDecoder.Type) -> OrgPushSDK.AnyFetchRequest<RowDecoder>
  public var sqlSubquery: OrgPushSDK.SQLSubquery {
    get
  }
  public func fetchCount(_ db: OrgPushSDK.Database) throws -> Swift.Int
  public func makePreparedRequest(_ db: OrgPushSDK.Database, forSingleResult singleResult: Swift.Bool = false) throws -> OrgPushSDK.PreparedRequest
}
extension OrgPushSDK.AnyFetchRequest {
  public init<Request>(_ request: Request) where RowDecoder == Request.RowDecoder, Request : OrgPushSDK.FetchRequest
}
public enum AppTarget : Swift.String, Swift.CaseIterable {
  case application
  case `extension`
  public init?(rawValue: Swift.String)
  public typealias AllCases = [OrgPushSDK.AppTarget]
  public typealias RawValue = Swift.String
  public static var allCases: [OrgPushSDK.AppTarget] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public protocol DatabaseWriter : OrgPushSDK.DatabaseReader {
  @_disfavoredOverload func write<T>(_ updates: (OrgPushSDK.Database) throws -> T) throws -> T
  @_disfavoredOverload func writeWithoutTransaction<T>(_ updates: (OrgPushSDK.Database) throws -> T) rethrows -> T
  @_disfavoredOverload func barrierWriteWithoutTransaction<T>(_ updates: (OrgPushSDK.Database) throws -> T) rethrows -> T
  func asyncBarrierWriteWithoutTransaction(_ updates: @escaping (OrgPushSDK.Database) -> Swift.Void)
  func asyncWrite<T>(_ updates: @escaping (OrgPushSDK.Database) throws -> T, completion: @escaping (OrgPushSDK.Database, Swift.Result<T, Swift.Error>) -> Swift.Void)
  func asyncWriteWithoutTransaction(_ updates: @escaping (OrgPushSDK.Database) -> Swift.Void)
  func _weakAsyncWriteWithoutTransaction(_ updates: @escaping (OrgPushSDK.Database?) -> Swift.Void)
  func unsafeReentrantWrite<T>(_ updates: (OrgPushSDK.Database) throws -> T) rethrows -> T
  func concurrentRead<T>(_ value: @escaping (OrgPushSDK.Database) throws -> T) -> OrgPushSDK.DatabaseFuture<T>
  func spawnConcurrentRead(_ value: @escaping (Swift.Result<OrgPushSDK.Database, Swift.Error>) -> Swift.Void)
}
extension OrgPushSDK.DatabaseWriter {
  public func write<T>(_ updates: (OrgPushSDK.Database) throws -> T) throws -> T
  public func asyncWrite<T>(_ updates: @escaping (OrgPushSDK.Database) throws -> T, completion: @escaping (OrgPushSDK.Database, Swift.Result<T, Swift.Error>) -> Swift.Void)
  public func add(transactionObserver: OrgPushSDK.TransactionObserver, extent: OrgPushSDK.Database.TransactionObservationExtent = .observerLifetime)
  public func remove(transactionObserver: OrgPushSDK.TransactionObserver)
  @_disfavoredOverload public func erase() throws
  @_disfavoredOverload public func vacuum() throws
  @available(macOS 11.0, iOS 14, tvOS 14, watchOS 7, *)
  @_disfavoredOverload public func vacuum(into filePath: Swift.String) throws
}
extension OrgPushSDK.DatabaseWriter {
  @available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
  public func writePublisher<Output>(updates: @escaping (OrgPushSDK.Database) throws -> Output) -> OrgPushSDK.DatabasePublishers.Write<Output>
  @available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
  public func writePublisher<S, Output>(receiveOn scheduler: S, updates: @escaping (OrgPushSDK.Database) throws -> Output) -> OrgPushSDK.DatabasePublishers.Write<Output> where S : Combine.Scheduler
  @available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
  public func writePublisher<T, Output>(updates: @escaping (OrgPushSDK.Database) throws -> T, thenRead value: @escaping (OrgPushSDK.Database, T) throws -> Output) -> OrgPushSDK.DatabasePublishers.Write<Output>
  @available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
  public func writePublisher<S, T, Output>(receiveOn scheduler: S, updates: @escaping (OrgPushSDK.Database) throws -> T, thenRead value: @escaping (OrgPushSDK.Database, T) throws -> Output) -> OrgPushSDK.DatabasePublishers.Write<Output> where S : Combine.Scheduler
}
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension OrgPushSDK.DatabasePublishers {
  public struct Write<Output> : Combine.Publisher {
    public typealias Output = Output
    public typealias Failure = Swift.Error
    public func receive<S>(subscriber: S) where Output == S.Input, S : Combine.Subscriber, S.Failure == Swift.Error
  }
}
@_hasMissingDesignatedInitializers public class DatabaseFuture<Value> {
  public func wait() throws -> Value
  @objc deinit
}
final public class AnyDatabaseWriter : OrgPushSDK.DatabaseWriter {
  public init(_ base: OrgPushSDK.DatabaseWriter)
  final public var configuration: OrgPushSDK.Configuration {
    get
  }
  final public func close() throws
  final public func interrupt()
  @_disfavoredOverload final public func read<T>(_ value: (OrgPushSDK.Database) throws -> T) throws -> T
  final public func asyncRead(_ value: @escaping (Swift.Result<OrgPushSDK.Database, Swift.Error>) -> Swift.Void)
  final public func _weakAsyncRead(_ value: @escaping (Swift.Result<OrgPushSDK.Database, Swift.Error>?) -> Swift.Void)
  @_disfavoredOverload final public func unsafeRead<T>(_ value: (OrgPushSDK.Database) throws -> T) throws -> T
  final public func asyncUnsafeRead(_ value: @escaping (Swift.Result<OrgPushSDK.Database, Swift.Error>) -> Swift.Void)
  final public func unsafeReentrantRead<T>(_ value: (OrgPushSDK.Database) throws -> T) throws -> T
  final public func concurrentRead<T>(_ value: @escaping (OrgPushSDK.Database) throws -> T) -> OrgPushSDK.DatabaseFuture<T>
  final public func spawnConcurrentRead(_ value: @escaping (Swift.Result<OrgPushSDK.Database, Swift.Error>) -> Swift.Void)
  @_disfavoredOverload final public func write<T>(_ updates: (OrgPushSDK.Database) throws -> T) throws -> T
  @_disfavoredOverload final public func writeWithoutTransaction<T>(_ updates: (OrgPushSDK.Database) throws -> T) rethrows -> T
  @_disfavoredOverload final public func barrierWriteWithoutTransaction<T>(_ updates: (OrgPushSDK.Database) throws -> T) rethrows -> T
  final public func asyncBarrierWriteWithoutTransaction(_ updates: @escaping (OrgPushSDK.Database) -> Swift.Void)
  final public func asyncWrite<T>(_ updates: @escaping (OrgPushSDK.Database) throws -> T, completion: @escaping (OrgPushSDK.Database, Swift.Result<T, Swift.Error>) -> Swift.Void)
  final public func asyncWriteWithoutTransaction(_ updates: @escaping (OrgPushSDK.Database) -> Swift.Void)
  final public func _weakAsyncWriteWithoutTransaction(_ updates: @escaping (OrgPushSDK.Database?) -> Swift.Void)
  final public func unsafeReentrantWrite<T>(_ updates: (OrgPushSDK.Database) throws -> T) rethrows -> T
  final public func _add<Reducer>(observation: OrgPushSDK.ValueObservation<Reducer>, scheduling scheduler: OrgPushSDK.ValueObservationScheduler, onChange: @escaping (Reducer.Value) -> Swift.Void) -> OrgPushSDK.DatabaseCancellable where Reducer : OrgPushSDK.ValueReducer
  @objc deinit
}
extension OrgPushSDK.ValueReducers {
  public struct Fetch<Value> : OrgPushSDK.ValueReducer {
    public func _fetch(_ db: OrgPushSDK.Database) throws -> Value
    public func _value(_ fetched: Value) -> Value?
    public typealias Fetched = Value
  }
}
public struct BelongsToAssociation<Origin, Destination> : OrgPushSDK.AssociationToOne {
  public typealias OriginRowDecoder = Origin
  public typealias RowDecoder = Destination
  public var _sqlAssociation: OrgPushSDK._SQLAssociation
}
extension OrgPushSDK.FetchableRecord where Self : OrgPushSDK.TableRecord {
  public static func fetchCursor(_ db: OrgPushSDK.Database) throws -> OrgPushSDK.RecordCursor<Self>
  public static func fetchAll(_ db: OrgPushSDK.Database) throws -> [Self]
  public static func fetchOne(_ db: OrgPushSDK.Database) throws -> Self?
}
extension OrgPushSDK.FetchableRecord where Self : OrgPushSDK.TableRecord, Self : Swift.Hashable {
  public static func fetchSet(_ db: OrgPushSDK.Database) throws -> Swift.Set<Self>
}
extension OrgPushSDK.FetchableRecord where Self : OrgPushSDK.TableRecord {
  public static func fetchCursor<Sequence>(_ db: OrgPushSDK.Database, keys: Sequence) throws -> OrgPushSDK.RecordCursor<Self> where Sequence : Swift.Sequence, Sequence.Element : OrgPushSDK.DatabaseValueConvertible
  public static func fetchAll<Sequence>(_ db: OrgPushSDK.Database, keys: Sequence) throws -> [Self] where Sequence : Swift.Sequence, Sequence.Element : OrgPushSDK.DatabaseValueConvertible
  public static func fetchOne<PrimaryKeyType>(_ db: OrgPushSDK.Database, key: PrimaryKeyType?) throws -> Self? where PrimaryKeyType : OrgPushSDK.DatabaseValueConvertible
}
@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6, *)
extension OrgPushSDK.FetchableRecord where Self : OrgPushSDK.TableRecord, Self : Swift.Identifiable, Self.ID : OrgPushSDK.DatabaseValueConvertible {
  public static func fetchCursor<Collection>(_ db: OrgPushSDK.Database, ids: Collection) throws -> OrgPushSDK.RecordCursor<Self> where Collection : Swift.Collection, Self.ID == Collection.Element
  public static func fetchAll<Collection>(_ db: OrgPushSDK.Database, ids: Collection) throws -> [Self] where Collection : Swift.Collection, Self.ID == Collection.Element
  public static func fetchOne(_ db: OrgPushSDK.Database, id: Self.ID) throws -> Self?
}
@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6, *)
extension OrgPushSDK.FetchableRecord where Self : OrgPushSDK.TableRecord, Self : Swift.Identifiable, Self.ID : OrgPushSDK._OptionalProtocol, Self.ID.Wrapped : OrgPushSDK.DatabaseValueConvertible {
  public static func fetchCursor<Collection>(_ db: OrgPushSDK.Database, ids: Collection) throws -> OrgPushSDK.RecordCursor<Self> where Collection : Swift.Collection, Collection.Element : OrgPushSDK.DatabaseValueConvertible, Collection.Element == Self.ID.Wrapped
  public static func fetchAll<Collection>(_ db: OrgPushSDK.Database, ids: Collection) throws -> [Self] where Collection : Swift.Collection, Collection.Element : OrgPushSDK.DatabaseValueConvertible, Collection.Element == Self.ID.Wrapped
  public static func fetchOne(_ db: OrgPushSDK.Database, id: Self.ID.Wrapped) throws -> Self?
}
extension OrgPushSDK.FetchableRecord where Self : OrgPushSDK.TableRecord, Self : Swift.Hashable {
  public static func fetchSet<Sequence>(_ db: OrgPushSDK.Database, keys: Sequence) throws -> Swift.Set<Self> where Sequence : Swift.Sequence, Sequence.Element : OrgPushSDK.DatabaseValueConvertible
}
@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6, *)
extension OrgPushSDK.FetchableRecord where Self : OrgPushSDK.TableRecord, Self : Swift.Hashable, Self : Swift.Identifiable, Self.ID : OrgPushSDK.DatabaseValueConvertible {
  public static func fetchSet<Collection>(_ db: OrgPushSDK.Database, ids: Collection) throws -> Swift.Set<Self> where Collection : Swift.Collection, Self.ID == Collection.Element
}
@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6, *)
extension OrgPushSDK.FetchableRecord where Self : OrgPushSDK.TableRecord, Self : Swift.Hashable, Self : Swift.Identifiable, Self.ID : OrgPushSDK._OptionalProtocol, Self.ID.Wrapped : OrgPushSDK.DatabaseValueConvertible {
  public static func fetchSet<Collection>(_ db: OrgPushSDK.Database, ids: Collection) throws -> Swift.Set<Self> where Collection : Swift.Collection, Collection.Element : OrgPushSDK.DatabaseValueConvertible, Collection.Element == Self.ID.Wrapped
}
extension OrgPushSDK.FetchableRecord where Self : OrgPushSDK.TableRecord {
  public static func fetchCursor(_ db: OrgPushSDK.Database, keys: [[Swift.String : OrgPushSDK.DatabaseValueConvertible?]]) throws -> OrgPushSDK.RecordCursor<Self>
  public static func fetchAll(_ db: OrgPushSDK.Database, keys: [[Swift.String : OrgPushSDK.DatabaseValueConvertible?]]) throws -> [Self]
  public static func fetchOne(_ db: OrgPushSDK.Database, key: [Swift.String : OrgPushSDK.DatabaseValueConvertible?]?) throws -> Self?
}
extension OrgPushSDK.FetchableRecord where Self : OrgPushSDK.TableRecord, Self : Swift.Hashable {
  public static func fetchSet(_ db: OrgPushSDK.Database, keys: [[Swift.String : OrgPushSDK.DatabaseValueConvertible?]]) throws -> Swift.Set<Self>
}
public struct SQLOrdering {
}
public protocol SQLOrderingTerm {
  var sqlOrdering: OrgPushSDK.SQLOrdering { get }
}
extension OrgPushSDK.SQLOrdering : OrgPushSDK.SQLOrderingTerm {
  @available(*, deprecated, message: "Already QLOrdering:")
  public var sqlOrdering: OrgPushSDK.SQLOrdering {
    get
  }
}
extension Swift.Optional where Wrapped == Swift.String {
  public func containsIgnoringCase(_ find: Swift.String) -> Swift.Bool
  public func toBool() -> Swift.Bool
  public func toInt16() -> Swift.Int16?
  public func toInt() -> Swift.Int?
  public func toDate() -> Foundation.Date?
}
public protocol VirtualTableModule {
  associatedtype TableDefinition
  var moduleName: Swift.String { get }
  func makeTableDefinition() -> Self.TableDefinition
  func makeTableDefinition(configuration: OrgPushSDK.VirtualTableConfiguration) -> Self.TableDefinition
  func moduleArguments(for definition: Self.TableDefinition, in db: OrgPushSDK.Database) throws -> [Swift.String]
  func database(_ db: OrgPushSDK.Database, didCreate tableName: Swift.String, using definition: Self.TableDefinition) throws
}
extension OrgPushSDK.VirtualTableModule {
  public func makeTableDefinition(configuration: OrgPushSDK.VirtualTableConfiguration) -> Self.TableDefinition
}
public struct VirtualTableConfiguration {
}
extension OrgPushSDK.Database {
  final public func create(virtualTable name: Swift.String, ifNotExists: Swift.Bool = false, using module: Swift.String) throws
  final public func create<Module>(virtualTable tableName: Swift.String, ifNotExists: Swift.Bool = false, using module: Module, _ body: ((Module.TableDefinition) throws -> Swift.Void)? = nil) throws where Module : OrgPushSDK.VirtualTableModule
}
public protocol MessageStatusExternalProtocol {
  var statusName: Swift.String? { get set }
  var statusDate: Foundation.Date? { get set }
  var isSent: Swift.Bool { get set }
  var messageId: Swift.String? { get set }
}
public struct MessageAttributes : Swift.Codable, Swift.Hashable, OrgPushSDK.TableRecord, OrgPushSDK.FetchableRecord, OrgPushSDK.MutablePersistableRecord {
  public var classifierdId: Swift.Int?
  public var classifierName: Swift.String?
  public var isImportant: Swift.Int?
  public var messageDate: Foundation.Date?
  public var messageId: Swift.String
  #if compiler(>=5.3) && $EffectfulProp
  public var messageLink: OrgPushSDK.Message? {
    get throws
  }
  #endif
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: OrgPushSDK.MessageAttributes, b: OrgPushSDK.MessageAttributes) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
public protocol IconProtocol {
  var url: Swift.String? { get }
  var value: Swift.String? { get }
}
extension Foundation.Decimal : OrgPushSDK.DatabaseValueConvertible {
  public var databaseValue: OrgPushSDK.DatabaseValue {
    get
  }
  public static func fromDatabaseValue(_ dbValue: OrgPushSDK.DatabaseValue) -> Foundation.Decimal?
}
extension Foundation.Decimal : OrgPushSDK.StatementColumnConvertible {
  @inline(__always) @inlinable public init?(sqliteStatement: OrgPushSDK.SQLiteStatement, index: Swift.Int32) {
        switch sqlite3_column_type(sqliteStatement, index) {
        case SQLITE_INTEGER:
            self.init(sqlite3_column_int64(sqliteStatement, index))
        case SQLITE_FLOAT:
            self.init(sqlite3_column_double(sqliteStatement, index))
        case SQLITE_TEXT:
            self.init(
                string: String(cString: sqlite3_column_text(sqliteStatement, index)!),
                locale: _posixLocale)
        default:
            return nil
        }
    }
}
@usableFromInline
internal let _posixLocale: Foundation.Locale
public protocol TableRecord {
  static var databaseTableName: Swift.String { get }
  static var databaseSelection: [OrgPushSDK.SQLSelectable] { get }
}
extension OrgPushSDK.TableRecord {
  public static var defaultDatabaseTableName: Swift.String {
    get
  }
  public static var databaseTableName: Swift.String {
    get
  }
  public static var databaseSelection: [OrgPushSDK.SQLSelectable] {
    get
  }
}
extension OrgPushSDK.TableRecord {
  public static func fetchCount(_ db: OrgPushSDK.Database) throws -> Swift.Int
}
extension OrgPushSDK.TableRecord {
  public static func numberOfSelectedColumns(_ db: OrgPushSDK.Database) throws -> Swift.Int
}
extension OrgPushSDK.TableRecord {
  @discardableResult
  public static func deleteAll(_ db: OrgPushSDK.Database) throws -> Swift.Int
}
extension OrgPushSDK.TableRecord {
  public static func exists<PrimaryKeyType>(_ db: OrgPushSDK.Database, key: PrimaryKeyType) throws -> Swift.Bool where PrimaryKeyType : OrgPushSDK.DatabaseValueConvertible
}
@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6, *)
extension OrgPushSDK.TableRecord where Self : Swift.Identifiable, Self.ID : OrgPushSDK.DatabaseValueConvertible {
  public static func exists(_ db: OrgPushSDK.Database, id: Self.ID) throws -> Swift.Bool
}
@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6, *)
extension OrgPushSDK.TableRecord where Self : Swift.Identifiable, Self.ID : OrgPushSDK._OptionalProtocol, Self.ID.Wrapped : OrgPushSDK.DatabaseValueConvertible {
  public static func exists(_ db: OrgPushSDK.Database, id: Self.ID.Wrapped) throws -> Swift.Bool
}
extension OrgPushSDK.TableRecord {
  public static func exists(_ db: OrgPushSDK.Database, key: [Swift.String : OrgPushSDK.DatabaseValueConvertible?]) throws -> Swift.Bool
}
extension OrgPushSDK.TableRecord {
  @discardableResult
  public static func deleteAll<Sequence>(_ db: OrgPushSDK.Database, keys: Sequence) throws -> Swift.Int where Sequence : Swift.Sequence, Sequence.Element : OrgPushSDK.DatabaseValueConvertible
  @discardableResult
  public static func deleteOne<PrimaryKeyType>(_ db: OrgPushSDK.Database, key: PrimaryKeyType?) throws -> Swift.Bool where PrimaryKeyType : OrgPushSDK.DatabaseValueConvertible
}
@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6, *)
extension OrgPushSDK.TableRecord where Self : Swift.Identifiable, Self.ID : OrgPushSDK.DatabaseValueConvertible {
  @discardableResult
  public static func deleteAll<Collection>(_ db: OrgPushSDK.Database, ids: Collection) throws -> Swift.Int where Collection : Swift.Collection, Self.ID == Collection.Element
  @discardableResult
  public static func deleteOne(_ db: OrgPushSDK.Database, id: Self.ID) throws -> Swift.Bool
}
@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6, *)
extension OrgPushSDK.TableRecord where Self : Swift.Identifiable, Self.ID : OrgPushSDK._OptionalProtocol, Self.ID.Wrapped : OrgPushSDK.DatabaseValueConvertible {
  @discardableResult
  public static func deleteAll<Collection>(_ db: OrgPushSDK.Database, ids: Collection) throws -> Swift.Int where Collection : Swift.Collection, Collection.Element : OrgPushSDK.DatabaseValueConvertible, Collection.Element == Self.ID.Wrapped
  @discardableResult
  public static func deleteOne(_ db: OrgPushSDK.Database, id: Self.ID.Wrapped) throws -> Swift.Bool
}
extension OrgPushSDK.TableRecord {
  @discardableResult
  public static func deleteAll(_ db: OrgPushSDK.Database, keys: [[Swift.String : OrgPushSDK.DatabaseValueConvertible?]]) throws -> Swift.Int
  @discardableResult
  public static func deleteOne(_ db: OrgPushSDK.Database, key: [Swift.String : OrgPushSDK.DatabaseValueConvertible?]) throws -> Swift.Bool
}
extension OrgPushSDK.TableRecord {
  @discardableResult
  public static func updateAll(_ db: OrgPushSDK.Database, onConflict conflictResolution: OrgPushSDK.Database.ConflictResolution? = nil, _ assignments: [OrgPushSDK.ColumnAssignment]) throws -> Swift.Int
  @discardableResult
  public static func updateAll(_ db: OrgPushSDK.Database, onConflict conflictResolution: OrgPushSDK.Database.ConflictResolution? = nil, _ assignment: OrgPushSDK.ColumnAssignment, _ otherAssignments: OrgPushSDK.ColumnAssignment...) throws -> Swift.Int
}
public struct DatabaseMigrator {
  public enum ForeignKeyChecks {
    case deferred
    case immediate
    public static func == (a: OrgPushSDK.DatabaseMigrator.ForeignKeyChecks, b: OrgPushSDK.DatabaseMigrator.ForeignKeyChecks) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var eraseDatabaseOnSchemaChange: Swift.Bool
  public init()
  public func disablingDeferredForeignKeyChecks() -> OrgPushSDK.DatabaseMigrator
  public mutating func registerMigration(_ identifier: Swift.String, foreignKeyChecks: OrgPushSDK.DatabaseMigrator.ForeignKeyChecks = .deferred, migrate: @escaping (OrgPushSDK.Database) throws -> Swift.Void)
  public func migrate(_ writer: OrgPushSDK.DatabaseWriter) throws
  public func migrate(_ writer: OrgPushSDK.DatabaseWriter, upTo targetIdentifier: Swift.String) throws
  public func asyncMigrate(_ writer: OrgPushSDK.DatabaseWriter, completion: @escaping (OrgPushSDK.Database, Swift.Error?) -> Swift.Void)
  public var migrations: [Swift.String] {
    get
  }
  public func appliedMigrations(_ db: OrgPushSDK.Database) throws -> [Swift.String]
  public func appliedIdentifiers(_ db: OrgPushSDK.Database) throws -> Swift.Set<Swift.String>
  public func completedMigrations(_ db: OrgPushSDK.Database) throws -> [Swift.String]
  public func hasCompletedMigrations(_ db: OrgPushSDK.Database) throws -> Swift.Bool
  public func hasBeenSuperseded(_ db: OrgPushSDK.Database) throws -> Swift.Bool
}
extension OrgPushSDK.DatabaseMigrator {
  @available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
  public func migratePublisher(_ writer: OrgPushSDK.DatabaseWriter) -> OrgPushSDK.DatabasePublishers.Migrate
  @available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
  public func migratePublisher<S>(_ writer: OrgPushSDK.DatabaseWriter, receiveOn scheduler: S) -> OrgPushSDK.DatabasePublishers.Migrate where S : Combine.Scheduler
}
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension OrgPushSDK.DatabasePublishers {
  public struct Migrate : Combine.Publisher {
    public typealias Output = Swift.Void
    public typealias Failure = Swift.Error
    public func receive<S>(subscriber: S) where S : Combine.Subscriber, S.Failure == Swift.Error, S.Input == ()
  }
}
@_hasMissingDesignatedInitializers public class PushSDKObserver : OrgPushSDK.TransactionObserver {
  weak public var delegate: OrgPushSDK.NSSQLiteDatabaseChangeDelegate?
  public func observes(eventsOfKind eventKind: OrgPushSDK.DatabaseEventKind) -> Swift.Bool
  public func databaseDidChange(with event: OrgPushSDK.DatabaseEvent)
  public func databaseDidCommit(_ db: OrgPushSDK.Database)
  public func databaseDidRollback(_ db: OrgPushSDK.Database)
  @objc deinit
}
@objc public class MessagesResult : ObjectiveC.NSObject, Swift.Codable {
  public init(resultKind: OrgPushSDK.ResultKind, errorCode: Swift.Int, errorDescription: Swift.String?, moreMessagesForSent: Swift.Bool, messages: [OrgPushSDK.MessageItem])
  required public init(from decoder: Swift.Decoder) throws
  public func getResultKind() -> OrgPushSDK.ResultKind
  public func getErrorCode() -> Swift.Int
  public func getErrorDescription() -> Swift.String?
  public func getMessages() -> [OrgPushSDK.MessageItem]
  public func isMoreMessagesForSent() -> Swift.Bool
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
}
public struct MessageItem : Swift.Codable {
  public var messageId: Swift.String
  public var messageStringDate: Swift.String
  public var title: Swift.String
  public var message: Swift.String
  public var status: Swift.String
  public var customData: [Swift.String : Swift.String]?
  public var externalId: Swift.String?
  public var content: Swift.String?
  public var sentDate: Foundation.Date {
    get
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct SQLInterpolation : Swift.StringInterpolationProtocol {
  public init(literalCapacity: Swift.Int, interpolationCount: Swift.Int)
  public mutating func appendLiteral(_ sql: Swift.String)
  public mutating func appendInterpolation(sql: Swift.String, arguments: OrgPushSDK.StatementArguments = StatementArguments())
  public mutating func appendInterpolation(_ sqlLiteral: OrgPushSDK.SQL)
  public mutating func appendInterpolation<S>(_ string: S) where S : Swift.StringProtocol
  public mutating func appendInterpolation(literal sqlLiteral: OrgPushSDK.SQL)
  public typealias StringLiteralType = Swift.String
}
extension Swift.RangeReplaceableCollection {
  public init<C>(_ cursor: C) throws where C : OrgPushSDK.Cursor, Self.Element == C.Element
  public init<C>(_ cursor: C, minimumCapacity: Swift.Int) throws where C : OrgPushSDK.Cursor, Self.Element == C.Element
}
extension Swift.Dictionary {
  public init<C>(grouping cursor: C, by keyForValue: (C.Element) throws -> Key) throws where Value == [C.Element], C : OrgPushSDK.Cursor
  public init<C>(minimumCapacity: Swift.Int, grouping cursor: C, by keyForValue: (C.Element) throws -> Key) throws where Value == [C.Element], C : OrgPushSDK.Cursor
  public init<C>(uniqueKeysWithValues keysAndValues: C) throws where C : OrgPushSDK.Cursor, C.Element == (Key, Value)
  public init<C>(minimumCapacity: Swift.Int, uniqueKeysWithValues keysAndValues: C) throws where C : OrgPushSDK.Cursor, C.Element == (Key, Value)
}
extension Swift.Set {
  public init<C>(_ cursor: C) throws where Element == C.Element, C : OrgPushSDK.Cursor
  public init<C>(_ cursor: C, minimumCapacity: Swift.Int) throws where Element == C.Element, C : OrgPushSDK.Cursor
}
extension Swift.Sequence {
  public func flatMap<SegmentOfResult>(_ transform: @escaping (Self.Iterator.Element) throws -> SegmentOfResult) -> OrgPushSDK.FlattenCursor<OrgPushSDK.MapCursor<OrgPushSDK.AnyCursor<Self.Iterator.Element>, SegmentOfResult>> where SegmentOfResult : OrgPushSDK.Cursor
}
public protocol Cursor : AnyObject {
  associatedtype Element
  func next() throws -> Self.Element?
  func forEach(_ body: (Self.Element) throws -> Swift.Void) throws
}
extension OrgPushSDK.Cursor {
  public func isEmpty() throws -> Swift.Bool
  public func contains(where predicate: (Self.Element) throws -> Swift.Bool) throws -> Swift.Bool
  public func enumerated() -> OrgPushSDK.EnumeratedCursor<Self>
  public func filter(_ isIncluded: @escaping (Self.Element) throws -> Swift.Bool) -> OrgPushSDK.FilterCursor<Self>
  public func first(where predicate: (Self.Element) throws -> Swift.Bool) throws -> Self.Element?
  public func compactMap<ElementOfResult>(_ transform: @escaping (Self.Element) throws -> ElementOfResult?) -> OrgPushSDK.MapCursor<OrgPushSDK.FilterCursor<OrgPushSDK.MapCursor<Self, ElementOfResult?>>, ElementOfResult>
  public func drop(while predicate: @escaping (Self.Element) throws -> Swift.Bool) -> OrgPushSDK.DropWhileCursor<Self>
  public func dropFirst(_ n: Swift.Int) -> OrgPushSDK.DropFirstCursor<Self>
  public func dropFirst() -> OrgPushSDK.DropFirstCursor<Self>
  public func dropLast(_ n: Swift.Int) throws -> [Self.Element]
  public func dropLast() throws -> [Self.Element]
  public func flatMap<SegmentOfResult>(_ transform: @escaping (Self.Element) throws -> SegmentOfResult) -> OrgPushSDK.FlattenCursor<OrgPushSDK.MapCursor<Self, OrgPushSDK.AnyCursor<SegmentOfResult.Element>>> where SegmentOfResult : Swift.Sequence
  public func flatMap<SegmentOfResult>(_ transform: @escaping (Self.Element) throws -> SegmentOfResult) -> OrgPushSDK.FlattenCursor<OrgPushSDK.MapCursor<Self, SegmentOfResult>> where SegmentOfResult : OrgPushSDK.Cursor
  public func forEach(_ body: (Self.Element) throws -> Swift.Void) throws
  public func map<T>(_ transform: @escaping (Self.Element) throws -> T) -> OrgPushSDK.MapCursor<Self, T>
  public func max(by areInIncreasingOrder: (Self.Element, Self.Element) throws -> Swift.Bool) throws -> Self.Element?
  public func min(by areInIncreasingOrder: (Self.Element, Self.Element) throws -> Swift.Bool) throws -> Self.Element?
  public func prefix(_ maxLength: Swift.Int) -> OrgPushSDK.PrefixCursor<Self>
  public func prefix(while predicate: @escaping (Self.Element) throws -> Swift.Bool) -> OrgPushSDK.PrefixWhileCursor<Self>
  public func reduce<Result>(_ initialResult: Result, _ nextPartialResult: (Result, Self.Element) throws -> Result) throws -> Result
  public func reduce<Result>(into initialResult: Result, _ updateAccumulatingResult: (inout Result, Self.Element) throws -> Swift.Void) throws -> Result
  public func suffix(_ maxLength: Swift.Int) throws -> [Self.Element]
}
extension OrgPushSDK.Cursor where Self.Element : Swift.Equatable {
  public func contains(_ element: Self.Element) throws -> Swift.Bool
}
extension OrgPushSDK.Cursor where Self.Element : Swift.Comparable {
  public func max() throws -> Self.Element?
  public func min() throws -> Self.Element?
}
extension OrgPushSDK.Cursor where Self.Element : OrgPushSDK.Cursor {
  public func joined() -> OrgPushSDK.FlattenCursor<Self>
}
extension OrgPushSDK.Cursor where Self.Element : Swift.Sequence {
  public func joined() -> OrgPushSDK.FlattenCursor<OrgPushSDK.MapCursor<Self, OrgPushSDK.AnyCursor<Self.Element.Element>>>
}
extension OrgPushSDK.Cursor where Self.Element : Swift.StringProtocol {
  public func joined(separator: Swift.String = "") throws -> Swift.String
}
final public class AnyCursor<Element> : OrgPushSDK.Cursor {
  public init<C>(_ base: C) where Element == C.Element, C : OrgPushSDK.Cursor
  convenience public init<I>(iterator: I) where Element == I.Element, I : Swift.IteratorProtocol
  convenience public init<S>(_ s: S) where Element == S.Element, S : Swift.Sequence
  public init(_ next: @escaping () throws -> Element?)
  final public func next() throws -> Element?
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class DropFirstCursor<Base> : OrgPushSDK.Cursor where Base : OrgPushSDK.Cursor {
  final public func next() throws -> Base.Element?
  public typealias Element = Base.Element
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class DropWhileCursor<Base> : OrgPushSDK.Cursor where Base : OrgPushSDK.Cursor {
  final public func next() throws -> Base.Element?
  public typealias Element = Base.Element
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class EnumeratedCursor<Base> : OrgPushSDK.Cursor where Base : OrgPushSDK.Cursor {
  final public func next() throws -> (Swift.Int, Base.Element)?
  final public func forEach(_ body: ((Swift.Int, Base.Element)) throws -> Swift.Void) throws
  public typealias Element = (Swift.Int, Base.Element)
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class FilterCursor<Base> : OrgPushSDK.Cursor where Base : OrgPushSDK.Cursor {
  final public func next() throws -> Base.Element?
  final public func forEach(_ body: (Base.Element) throws -> Swift.Void) throws
  public typealias Element = Base.Element
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class FlattenCursor<Base> : OrgPushSDK.Cursor where Base : OrgPushSDK.Cursor, Base.Element : OrgPushSDK.Cursor {
  final public func next() throws -> Base.Element.Element?
  public typealias Element = Base.Element.Element
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class MapCursor<Base, Element> : OrgPushSDK.Cursor where Base : OrgPushSDK.Cursor {
  final public func next() throws -> Element?
  final public func forEach(_ body: (Element) throws -> Swift.Void) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class PrefixCursor<Base> : OrgPushSDK.Cursor where Base : OrgPushSDK.Cursor {
  final public func next() throws -> Base.Element?
  public typealias Element = Base.Element
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class PrefixWhileCursor<Base> : OrgPushSDK.Cursor where Base : OrgPushSDK.Cursor {
  final public func next() throws -> Base.Element?
  public typealias Element = Base.Element
  @objc deinit
}
public struct FTS3 : OrgPushSDK.VirtualTableModule {
  public enum Diacritics {
    case keep
    case removeLegacy
    @available(macOS 11.0, iOS 14, tvOS 14, watchOS 7, *)
    case remove
    public static func == (a: OrgPushSDK.FTS3.Diacritics, b: OrgPushSDK.FTS3.Diacritics) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public init()
  public static func tokenize(_ string: Swift.String, withTokenizer tokenizer: OrgPushSDK.FTS3TokenizerDescriptor = .simple) -> [Swift.String]
  public let moduleName: Swift.String
  public func makeTableDefinition() -> OrgPushSDK.FTS3TableDefinition
  public func makeTableDefinition(configuration: OrgPushSDK.VirtualTableConfiguration) -> OrgPushSDK.FTS3TableDefinition
  public func moduleArguments(for definition: OrgPushSDK.FTS3TableDefinition, in db: OrgPushSDK.Database) -> [Swift.String]
  public func database(_ db: OrgPushSDK.Database, didCreate tableName: Swift.String, using definition: OrgPushSDK.FTS3TableDefinition)
  public typealias TableDefinition = OrgPushSDK.FTS3TableDefinition
}
@_hasMissingDesignatedInitializers final public class FTS3TableDefinition {
  final public var tokenizer: OrgPushSDK.FTS3TokenizerDescriptor?
  final public func column(_ name: Swift.String)
  @objc deinit
}
public protocol FetchableRecord {
  init(row: OrgPushSDK.Row)
  static var databaseDecodingUserInfo: [Swift.CodingUserInfoKey : Any] { get }
  static func databaseJSONDecoder(for column: Swift.String) -> Foundation.JSONDecoder
  static var databaseDateDecodingStrategy: OrgPushSDK.DatabaseDateDecodingStrategy { get }
  static var databaseColumnDecodingStrategy: OrgPushSDK.DatabaseColumnDecodingStrategy { get }
}
extension OrgPushSDK.FetchableRecord {
  public static var databaseDecodingUserInfo: [Swift.CodingUserInfoKey : Any] {
    get
  }
  public static func databaseJSONDecoder(for column: Swift.String) -> Foundation.JSONDecoder
  public static var databaseDateDecodingStrategy: OrgPushSDK.DatabaseDateDecodingStrategy {
    get
  }
  public static var databaseColumnDecodingStrategy: OrgPushSDK.DatabaseColumnDecodingStrategy {
    get
  }
}
extension OrgPushSDK.FetchableRecord {
  public static func fetchCursor(_ statement: OrgPushSDK.Statement, arguments: OrgPushSDK.StatementArguments? = nil, adapter: OrgPushSDK.RowAdapter? = nil) throws -> OrgPushSDK.RecordCursor<Self>
  public static func fetchAll(_ statement: OrgPushSDK.Statement, arguments: OrgPushSDK.StatementArguments? = nil, adapter: OrgPushSDK.RowAdapter? = nil) throws -> [Self]
  public static func fetchOne(_ statement: OrgPushSDK.Statement, arguments: OrgPushSDK.StatementArguments? = nil, adapter: OrgPushSDK.RowAdapter? = nil) throws -> Self?
}
extension OrgPushSDK.FetchableRecord where Self : Swift.Hashable {
  public static func fetchSet(_ statement: OrgPushSDK.Statement, arguments: OrgPushSDK.StatementArguments? = nil, adapter: OrgPushSDK.RowAdapter? = nil) throws -> Swift.Set<Self>
}
extension OrgPushSDK.FetchableRecord {
  public static func fetchCursor(_ db: OrgPushSDK.Database, sql: Swift.String, arguments: OrgPushSDK.StatementArguments = StatementArguments(), adapter: OrgPushSDK.RowAdapter? = nil) throws -> OrgPushSDK.RecordCursor<Self>
  public static func fetchAll(_ db: OrgPushSDK.Database, sql: Swift.String, arguments: OrgPushSDK.StatementArguments = StatementArguments(), adapter: OrgPushSDK.RowAdapter? = nil) throws -> [Self]
  public static func fetchOne(_ db: OrgPushSDK.Database, sql: Swift.String, arguments: OrgPushSDK.StatementArguments = StatementArguments(), adapter: OrgPushSDK.RowAdapter? = nil) throws -> Self?
}
extension OrgPushSDK.FetchableRecord where Self : Swift.Hashable {
  public static func fetchSet(_ db: OrgPushSDK.Database, sql: Swift.String, arguments: OrgPushSDK.StatementArguments = StatementArguments(), adapter: OrgPushSDK.RowAdapter? = nil) throws -> Swift.Set<Self>
}
extension OrgPushSDK.FetchableRecord {
  public static func fetchCursor<R>(_ db: OrgPushSDK.Database, _ request: R) throws -> OrgPushSDK.RecordCursor<Self> where R : OrgPushSDK.FetchRequest
  public static func fetchAll<R>(_ db: OrgPushSDK.Database, _ request: R) throws -> [Self] where R : OrgPushSDK.FetchRequest
  public static func fetchOne<R>(_ db: OrgPushSDK.Database, _ request: R) throws -> Self? where R : OrgPushSDK.FetchRequest
}
extension OrgPushSDK.FetchableRecord where Self : Swift.Hashable {
  public static func fetchSet<R>(_ db: OrgPushSDK.Database, _ request: R) throws -> Swift.Set<Self> where R : OrgPushSDK.FetchRequest
}
extension OrgPushSDK.FetchRequest where Self.RowDecoder : OrgPushSDK.FetchableRecord {
  public func fetchCursor(_ db: OrgPushSDK.Database) throws -> OrgPushSDK.RecordCursor<Self.RowDecoder>
  public func fetchAll(_ db: OrgPushSDK.Database) throws -> [Self.RowDecoder]
  public func fetchOne(_ db: OrgPushSDK.Database) throws -> Self.RowDecoder?
}
extension OrgPushSDK.FetchRequest where Self.RowDecoder : OrgPushSDK.FetchableRecord, Self.RowDecoder : Swift.Hashable {
  public func fetchSet(_ db: OrgPushSDK.Database) throws -> Swift.Set<Self.RowDecoder>
}
@_hasMissingDesignatedInitializers final public class RecordCursor<Record> : OrgPushSDK.DatabaseCursor where Record : OrgPushSDK.FetchableRecord {
  public typealias Element = Record
  final public let statement: OrgPushSDK.Statement
  final public var _isDone: Swift.Bool
  @objc deinit
  final public func _element(sqliteStatement: OrgPushSDK.SQLiteStatement) -> Record
}
public enum DatabaseDateDecodingStrategy {
  case deferredToDate
  case timeIntervalSinceReferenceDate
  case timeIntervalSince1970
  case millisecondsSince1970
  @available(macOS 10.12, watchOS 3.0, tvOS 10.0, *)
  case iso8601
  case formatted(Foundation.DateFormatter)
  case custom((OrgPushSDK.DatabaseValue) -> Foundation.Date?)
}
public enum DatabaseColumnDecodingStrategy {
  case useDefaultKeys
  case convertFromSnakeCase
  case custom((Swift.String) -> Swift.CodingKey)
}
public struct SQLExpression {
  public struct AssociativeBinaryOperator : Swift.Hashable {
    public static let add: OrgPushSDK.SQLExpression.AssociativeBinaryOperator
    public static let multiply: OrgPushSDK.SQLExpression.AssociativeBinaryOperator
    public static let and: OrgPushSDK.SQLExpression.AssociativeBinaryOperator
    public static let or: OrgPushSDK.SQLExpression.AssociativeBinaryOperator
    public static let concat: OrgPushSDK.SQLExpression.AssociativeBinaryOperator
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: OrgPushSDK.SQLExpression.AssociativeBinaryOperator, b: OrgPushSDK.SQLExpression.AssociativeBinaryOperator) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(*, deprecated, renamed: "SQLExpression.AssociativeBinaryOperator")
public typealias SQLAssociativeBinaryOperator = OrgPushSDK.SQLExpression.AssociativeBinaryOperator
public protocol SQLExpressible {
  var sqlExpression: OrgPushSDK.SQLExpression { get }
}
extension OrgPushSDK.SQLExpressible where Self == OrgPushSDK.Column {
  public static var rowID: OrgPushSDK.Column {
    get
  }
}
public protocol SQLSpecificExpressible : OrgPushSDK.SQLExpressible, OrgPushSDK.SQLOrderingTerm, OrgPushSDK.SQLSelectable {
}
extension OrgPushSDK.SQLSpecificExpressible {
  public var sqlSelection: OrgPushSDK.SQLSelection {
    get
  }
  public var sqlOrdering: OrgPushSDK.SQLOrdering {
    get
  }
}
extension OrgPushSDK.SQLExpression : OrgPushSDK.SQLSpecificExpressible {
  @available(*, deprecated, message: "Already SQLExpression")
  public var sqlExpression: OrgPushSDK.SQLExpression {
    get
  }
}
extension Swift.Sequence where Self.Element : OrgPushSDK.SQLSpecificExpressible {
  public func joined(operator: OrgPushSDK.SQLExpression.AssociativeBinaryOperator) -> OrgPushSDK.SQLExpression
}
extension Swift.Sequence where Self.Element == OrgPushSDK.SQLSpecificExpressible {
  public func joined(operator: OrgPushSDK.SQLExpression.AssociativeBinaryOperator) -> OrgPushSDK.SQLExpression
}
extension OrgPushSDK.SQLSpecificExpressible {
  public var asc: OrgPushSDK.SQLOrdering {
    get
  }
  public var desc: OrgPushSDK.SQLOrdering {
    get
  }
  @available(macOS 11.0, iOS 14, tvOS 14, watchOS 7, *)
  public var ascNullsLast: OrgPushSDK.SQLOrdering {
    get
  }
  @available(macOS 11.0, iOS 14, tvOS 14, watchOS 7, *)
  public var descNullsFirst: OrgPushSDK.SQLOrdering {
    get
  }
}
extension OrgPushSDK.SQLSpecificExpressible {
  public func forKey(_ key: Swift.String) -> OrgPushSDK.SQLSelection
  public func forKey(_ key: Swift.CodingKey) -> OrgPushSDK.SQLSelection
}
extension OrgPushSDK.SQLSpecificExpressible {
  public func collating(_ collation: OrgPushSDK.Database.CollationName) -> OrgPushSDK.SQLExpression
  public func collating(_ collation: OrgPushSDK.DatabaseCollation) -> OrgPushSDK.SQLExpression
}
public protocol TypedRequest {
  associatedtype RowDecoder
}
public protocol SelectionRequest {
  func select(_ selection: @escaping (OrgPushSDK.Database) throws -> [OrgPushSDK.SQLSelectable]) -> Self
  func annotated(with selection: @escaping (OrgPushSDK.Database) throws -> [OrgPushSDK.SQLSelectable]) -> Self
}
extension OrgPushSDK.SelectionRequest {
  public func select(_ selection: [OrgPushSDK.SQLSelectable]) -> Self
  public func select(_ selection: OrgPushSDK.SQLSelectable...) -> Self
  public func select(sql: Swift.String, arguments: OrgPushSDK.StatementArguments = StatementArguments()) -> Self
  public func select(literal sqlLiteral: OrgPushSDK.SQL) -> Self
  public func annotated(with selection: [OrgPushSDK.SQLSelectable]) -> Self
  public func annotated(with selection: OrgPushSDK.SQLSelectable...) -> Self
}
public protocol FilteredRequest {
  func filter(_ predicate: @escaping (OrgPushSDK.Database) throws -> OrgPushSDK.SQLExpressible) -> Self
}
extension OrgPushSDK.FilteredRequest {
  @available(*, deprecated, message: "Did you mean filter(id:) or filter(key:)? If not, prefer filter(value.databaseValue) instead. See also none().")
  public func filter(_ predicate: OrgPushSDK.SQLExpressible) -> Self
  public func filter(_ predicate: OrgPushSDK.SQLSpecificExpressible) -> Self
  public func filter(sql: Swift.String, arguments: OrgPushSDK.StatementArguments = StatementArguments()) -> Self
  public func filter(literal sqlLiteral: OrgPushSDK.SQL) -> Self
  public func none() -> Self
}
public protocol TableRequest {
  var databaseTableName: Swift.String { get }
  func aliased(_ alias: OrgPushSDK.TableAlias) -> Self
}
extension OrgPushSDK.TableRequest where Self : OrgPushSDK.FilteredRequest, Self : OrgPushSDK.TypedRequest {
  public func filter<PrimaryKeyType>(key: PrimaryKeyType?) -> Self where PrimaryKeyType : OrgPushSDK.DatabaseValueConvertible
  public func filter<Sequence>(keys: Sequence) -> Self where Sequence : Swift.Sequence, Sequence.Element : OrgPushSDK.DatabaseValueConvertible
  public func filter(key: [Swift.String : OrgPushSDK.DatabaseValueConvertible?]?) -> Self
  public func filter(keys: [[Swift.String : OrgPushSDK.DatabaseValueConvertible?]]) -> Self
}
@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6, *)
extension OrgPushSDK.TableRequest where Self : OrgPushSDK.FilteredRequest, Self : OrgPushSDK.TypedRequest, Self.RowDecoder : Swift.Identifiable, Self.RowDecoder.ID : OrgPushSDK.DatabaseValueConvertible {
  public func filter(id: Self.RowDecoder.ID) -> Self
  public func filter<Collection>(ids: Collection) -> Self where Collection : Swift.Collection, Collection.Element : OrgPushSDK.DatabaseValueConvertible, Collection.Element == Self.RowDecoder.ID
}
@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6, *)
extension OrgPushSDK.TableRequest where Self : OrgPushSDK.FilteredRequest, Self : OrgPushSDK.TypedRequest, Self.RowDecoder : Swift.Identifiable, Self.RowDecoder.ID : OrgPushSDK._OptionalProtocol, Self.RowDecoder.ID.Wrapped : OrgPushSDK.DatabaseValueConvertible {
  public func filter(id: Self.RowDecoder.ID.Wrapped) -> Self
  public func filter<Collection>(ids: Collection) -> Self where Collection : Swift.Collection, Collection.Element : OrgPushSDK.DatabaseValueConvertible, Collection.Element == Self.RowDecoder.ID.Wrapped
}
extension OrgPushSDK.TableRequest where Self : OrgPushSDK.OrderedRequest {
  public func orderByPrimaryKey() -> Self
}
extension OrgPushSDK.TableRequest where Self : OrgPushSDK.AggregatingRequest {
  public func groupByPrimaryKey() -> Self
}
public protocol AggregatingRequest {
  func group(_ expressions: @escaping (OrgPushSDK.Database) throws -> [OrgPushSDK.SQLExpressible]) -> Self
  func having(_ predicate: @escaping (OrgPushSDK.Database) throws -> OrgPushSDK.SQLExpressible) -> Self
}
extension OrgPushSDK.AggregatingRequest {
  public func group(_ expressions: [OrgPushSDK.SQLExpressible]) -> Self
  public func group(_ expressions: OrgPushSDK.SQLExpressible...) -> Self
  public func group(sql: Swift.String, arguments: OrgPushSDK.StatementArguments = StatementArguments()) -> Self
  public func group(literal sqlLiteral: OrgPushSDK.SQL) -> Self
  public func having(_ predicate: OrgPushSDK.SQLExpressible) -> Self
  public func having(sql: Swift.String, arguments: OrgPushSDK.StatementArguments = StatementArguments()) -> Self
  public func having(literal sqlLiteral: OrgPushSDK.SQL) -> Self
}
public protocol OrderedRequest {
  func order(_ orderings: @escaping (OrgPushSDK.Database) throws -> [OrgPushSDK.SQLOrderingTerm]) -> Self
  func reversed() -> Self
  func unordered() -> Self
}
extension OrgPushSDK.OrderedRequest {
  public func order(_ orderings: OrgPushSDK.SQLOrderingTerm...) -> Self
  public func order(_ orderings: [OrgPushSDK.SQLOrderingTerm]) -> Self
  public func order(sql: Swift.String, arguments: OrgPushSDK.StatementArguments = StatementArguments()) -> Self
  public func order(literal sqlLiteral: OrgPushSDK.SQL) -> Self
}
public protocol _JoinableRequest {
  func _including(all association: OrgPushSDK._SQLAssociation) -> Self
  func _including(optional association: OrgPushSDK._SQLAssociation) -> Self
  func _including(required association: OrgPushSDK._SQLAssociation) -> Self
  func _joining(optional association: OrgPushSDK._SQLAssociation) -> Self
  func _joining(required association: OrgPushSDK._SQLAssociation) -> Self
}
public protocol JoinableRequest : OrgPushSDK.TypedRequest, OrgPushSDK._JoinableRequest {
}
extension OrgPushSDK.JoinableRequest {
  public func including<A>(all association: A) -> Self where A : OrgPushSDK.AssociationToMany, Self.RowDecoder == A.OriginRowDecoder
  public func including<A>(optional association: A) -> Self where A : OrgPushSDK.Association, Self.RowDecoder == A.OriginRowDecoder
  public func including<A>(required association: A) -> Self where A : OrgPushSDK.Association, Self.RowDecoder == A.OriginRowDecoder
  public func joining<A>(optional association: A) -> Self where A : OrgPushSDK.Association, Self.RowDecoder == A.OriginRowDecoder
  public func joining<A>(required association: A) -> Self where A : OrgPushSDK.Association, Self.RowDecoder == A.OriginRowDecoder
}
extension OrgPushSDK.JoinableRequest where Self : OrgPushSDK.SelectionRequest {
  public func annotated<A>(withOptional association: A) -> Self where A : OrgPushSDK.Association, Self.RowDecoder == A.OriginRowDecoder
  public func annotated<A>(withRequired association: A) -> Self where A : OrgPushSDK.Association, Self.RowDecoder == A.OriginRowDecoder
}
public protocol DerivableRequest : OrgPushSDK.AggregatingRequest, OrgPushSDK.FilteredRequest, OrgPushSDK.JoinableRequest, OrgPushSDK.OrderedRequest, OrgPushSDK.SelectionRequest, OrgPushSDK.TableRequest {
  func distinct() -> Self
  func limit(_ limit: Swift.Int, offset: Swift.Int?) -> Self
  func with<RowDecoder>(_ cte: OrgPushSDK.CommonTableExpression<RowDecoder>) -> Self
}
extension OrgPushSDK.DerivableRequest {
  public func limit(_ limit: Swift.Int) -> Self
  public func annotated(with aggregates: OrgPushSDK.AssociationAggregate<Self.RowDecoder>...) -> Self
  public func annotated(with aggregates: [OrgPushSDK.AssociationAggregate<Self.RowDecoder>]) -> Self
  public func having(_ predicate: OrgPushSDK.AssociationAggregate<Self.RowDecoder>) -> Self
}
public protocol EncodableRecord {
  func encode(to container: inout OrgPushSDK.PersistenceContainer)
  static var databaseEncodingUserInfo: [Swift.CodingUserInfoKey : Any] { get }
  static func databaseJSONEncoder(for column: Swift.String) -> Foundation.JSONEncoder
  static var databaseDateEncodingStrategy: OrgPushSDK.DatabaseDateEncodingStrategy { get }
  static var databaseUUIDEncodingStrategy: OrgPushSDK.DatabaseUUIDEncodingStrategy { get }
  static var databaseColumnEncodingStrategy: OrgPushSDK.DatabaseColumnEncodingStrategy { get }
}
extension OrgPushSDK.EncodableRecord {
  public static var databaseEncodingUserInfo: [Swift.CodingUserInfoKey : Any] {
    get
  }
  public static func databaseJSONEncoder(for column: Swift.String) -> Foundation.JSONEncoder
  public static var databaseDateEncodingStrategy: OrgPushSDK.DatabaseDateEncodingStrategy {
    get
  }
  public static var databaseUUIDEncodingStrategy: OrgPushSDK.DatabaseUUIDEncodingStrategy {
    get
  }
  public static var databaseColumnEncodingStrategy: OrgPushSDK.DatabaseColumnEncodingStrategy {
    get
  }
}
extension OrgPushSDK.EncodableRecord {
  public var databaseDictionary: [Swift.String : OrgPushSDK.DatabaseValue] {
    get
  }
}
extension OrgPushSDK.EncodableRecord {
  public func databaseEquals(_ record: Self) -> Swift.Bool
  public func databaseChanges<Record>(from record: Record) -> [Swift.String : OrgPushSDK.DatabaseValue] where Record : OrgPushSDK.EncodableRecord
}
public struct PersistenceContainer {
  public subscript(column: Swift.String) -> OrgPushSDK.DatabaseValueConvertible? {
    get
    set
  }
  public subscript<Column>(column: Column) -> OrgPushSDK.DatabaseValueConvertible? where Column : OrgPushSDK.ColumnExpression {
    get
    set
  }
}
public enum DatabaseDateEncodingStrategy {
  case deferredToDate
  case timeIntervalSinceReferenceDate
  case timeIntervalSince1970
  case secondsSince1970
  case millisecondsSince1970
  @available(macOS 10.12, watchOS 3.0, tvOS 10.0, *)
  case iso8601
  case formatted(Foundation.DateFormatter)
  case custom((Foundation.Date) -> OrgPushSDK.DatabaseValueConvertible?)
}
public enum DatabaseUUIDEncodingStrategy {
  case deferredToUUID
  case uppercaseString
  case lowercaseString
  @available(*, deprecated, renamed: "uppercaseString")
  public static var string: OrgPushSDK.DatabaseUUIDEncodingStrategy {
    get
  }
  public static func == (a: OrgPushSDK.DatabaseUUIDEncodingStrategy, b: OrgPushSDK.DatabaseUUIDEncodingStrategy) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum DatabaseColumnEncodingStrategy {
  case useDefaultKeys
  case convertToSnakeCase
  case custom((Swift.CodingKey) -> Swift.String)
}
public struct SQL {
  public init(sql: Swift.String, arguments: OrgPushSDK.StatementArguments = StatementArguments())
  public init(_ expression: OrgPushSDK.SQLSpecificExpressible)
  public var isEmpty: Swift.Bool {
    get
  }
  public func build(_ db: OrgPushSDK.Database) throws -> (sql: Swift.String, arguments: OrgPushSDK.StatementArguments)
}
extension OrgPushSDK.SQL {
  public static func + (lhs: OrgPushSDK.SQL, rhs: OrgPushSDK.SQL) -> OrgPushSDK.SQL
  public static func += (lhs: inout OrgPushSDK.SQL, rhs: OrgPushSDK.SQL)
  public mutating func append(literal sqlLiteral: OrgPushSDK.SQL)
  public mutating func append(sql: Swift.String, arguments: OrgPushSDK.StatementArguments = StatementArguments())
}
extension OrgPushSDK.SQL : OrgPushSDK.SQLSpecificExpressible {
  public var sqlExpression: OrgPushSDK.SQLExpression {
    get
  }
}
extension OrgPushSDK.SQL : OrgPushSDK.SQLSelectable {
  public var sqlSelection: OrgPushSDK.SQLSelection {
    get
  }
}
extension OrgPushSDK.SQL : OrgPushSDK.SQLOrderingTerm {
  public var sqlOrdering: OrgPushSDK.SQLOrdering {
    get
  }
}
extension Swift.Sequence where Self.Element == OrgPushSDK.SQL {
  public func joined(separator: Swift.String = "") -> OrgPushSDK.SQL
}
extension Swift.Collection where Self.Element == OrgPushSDK.SQL {
  public func joined(separator: Swift.String = "") -> OrgPushSDK.SQL
}
extension OrgPushSDK.SQL : Swift.ExpressibleByStringInterpolation {
  public init(unicodeScalarLiteral: Swift.String)
  public init(extendedGraphemeClusterLiteral: Swift.String)
  public init(stringLiteral: Swift.String)
  public init(stringInterpolation sqlInterpolation: OrgPushSDK.SQLInterpolation)
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringInterpolation = OrgPushSDK.SQLInterpolation
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
extension OrgPushSDK.CompressionMethod : Swift.Equatable {}
extension OrgPushSDK.CompressionMethod : Swift.Hashable {}
extension OrgPushSDK.CompressionMethod : Swift.RawRepresentable {}
extension OrgPushSDK.Archive.ArchiveError : Swift.Equatable {}
extension OrgPushSDK.Archive.ArchiveError : Swift.Hashable {}
extension OrgPushSDK.Archive.AccessMode : Swift.Equatable {}
extension OrgPushSDK.Archive.AccessMode : Swift.Hashable {}
extension OrgPushSDK.Archive.AccessMode : Swift.RawRepresentable {}
extension OrgPushSDK.PushTask : Swift.Equatable {}
extension OrgPushSDK.PushTask : Swift.Hashable {}
extension OrgPushSDK.PushTask : Swift.RawRepresentable {}
extension OrgPushSDK.StorageMessageEntity : Swift.Equatable {}
extension OrgPushSDK.StorageMessageEntity : Swift.Hashable {}
extension OrgPushSDK.StorageMessageEntity : Swift.RawRepresentable {}
extension OrgPushSDK.DatabaseDateComponents.Format : Swift.Equatable {}
extension OrgPushSDK.DatabaseDateComponents.Format : Swift.Hashable {}
extension OrgPushSDK.DatabaseDateComponents.Format : Swift.RawRepresentable {}
extension OrgPushSDK.NSResultsChangeType : Swift.Equatable {}
extension OrgPushSDK.NSResultsChangeType : Swift.Hashable {}
extension OrgPushSDK.NSObjectChanged : Swift.Equatable {}
extension OrgPushSDK.NSObjectChanged : Swift.Hashable {}
extension OrgPushSDK.NSObjectChanged : Swift.RawRepresentable {}
extension OrgPushSDK.Database.ConflictResolution : Swift.Equatable {}
extension OrgPushSDK.Database.ConflictResolution : Swift.Hashable {}
extension OrgPushSDK.Database.ConflictResolution : Swift.RawRepresentable {}
extension OrgPushSDK.Database.CheckpointMode : Swift.Equatable {}
extension OrgPushSDK.Database.CheckpointMode : Swift.Hashable {}
extension OrgPushSDK.Database.CheckpointMode : Swift.RawRepresentable {}
extension OrgPushSDK.Database.ForeignKeyAction : Swift.Equatable {}
extension OrgPushSDK.Database.ForeignKeyAction : Swift.Hashable {}
extension OrgPushSDK.Database.ForeignKeyAction : Swift.RawRepresentable {}
extension OrgPushSDK.Database.TransactionCompletion : Swift.Equatable {}
extension OrgPushSDK.Database.TransactionCompletion : Swift.Hashable {}
extension OrgPushSDK.Database.TransactionCompletion : Swift.Sendable {}
extension OrgPushSDK.Database.TransactionKind : Swift.Equatable {}
extension OrgPushSDK.Database.TransactionKind : Swift.Hashable {}
extension OrgPushSDK.Database.TransactionKind : Swift.RawRepresentable {}
extension OrgPushSDK.Reachability.Connection : Swift.Equatable {}
extension OrgPushSDK.Reachability.Connection : Swift.Hashable {}
extension OrgPushSDK.ApiMethods : Swift.Equatable {}
extension OrgPushSDK.ApiMethods : Swift.Hashable {}
extension OrgPushSDK.PushApiStatus : Swift.Equatable {}
extension OrgPushSDK.PushApiStatus : Swift.Hashable {}
extension OrgPushSDK.PushApiStatus : Swift.RawRepresentable {}
extension OrgPushSDK.DatabaseValue.Storage : Swift.Sendable {}
extension OrgPushSDK.Entry.EntryType : Swift.Equatable {}
extension OrgPushSDK.Entry.EntryType : Swift.Hashable {}
extension OrgPushSDK.Entry.EntryType : Swift.RawRepresentable {}
extension OrgPushSDK.ColumnDefinition.GeneratedColumnQualification : Swift.Equatable {}
extension OrgPushSDK.ColumnDefinition.GeneratedColumnQualification : Swift.Hashable {}
extension OrgPushSDK.Database.TransactionObservationExtent : Swift.Equatable {}
extension OrgPushSDK.Database.TransactionObservationExtent : Swift.Hashable {}
extension OrgPushSDK.DatabaseEventKind : Swift.Sendable {}
extension OrgPushSDK.DatabaseEvent.Kind : Swift.Equatable {}
extension OrgPushSDK.DatabaseEvent.Kind : Swift.Hashable {}
extension OrgPushSDK.DatabaseEvent.Kind : Swift.RawRepresentable {}
extension OrgPushSDK.ResultKind : Swift.Equatable {}
extension OrgPushSDK.ResultKind : Swift.Hashable {}
extension OrgPushSDK.ResultKind : Swift.RawRepresentable {}
extension OrgPushSDK.SharedValueObservationExtent : Swift.Equatable {}
extension OrgPushSDK.SharedValueObservationExtent : Swift.Hashable {}
extension OrgPushSDK.AppTarget : Swift.Equatable {}
extension OrgPushSDK.AppTarget : Swift.Hashable {}
extension OrgPushSDK.AppTarget : Swift.RawRepresentable {}
extension OrgPushSDK.DatabaseMigrator.ForeignKeyChecks : Swift.Equatable {}
extension OrgPushSDK.DatabaseMigrator.ForeignKeyChecks : Swift.Hashable {}
extension OrgPushSDK.FTS3.Diacritics : Swift.Equatable {}
extension OrgPushSDK.FTS3.Diacritics : Swift.Hashable {}
extension OrgPushSDK.DatabaseUUIDEncodingStrategy : Swift.Equatable {}
extension OrgPushSDK.DatabaseUUIDEncodingStrategy : Swift.Hashable {}
